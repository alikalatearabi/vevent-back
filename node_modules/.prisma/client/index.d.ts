
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model EventSpeaker
 * 
 */
export type EventSpeaker = $Result.DefaultSelection<Prisma.$EventSpeakerPayload>
/**
 * Model Exhibitor
 * 
 */
export type Exhibitor = $Result.DefaultSelection<Prisma.$ExhibitorPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Attendee
 * 
 */
export type Attendee = $Result.DefaultSelection<Prisma.$AttendeePayload>
/**
 * Model Favorite
 * 
 */
export type Favorite = $Result.DefaultSelection<Prisma.$FavoritePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Asset
 * 
 */
export type Asset = $Result.DefaultSelection<Prisma.$AssetPayload>
/**
 * Model AssetOnProduct
 * 
 */
export type AssetOnProduct = $Result.DefaultSelection<Prisma.$AssetOnProductPayload>
/**
 * Model AssetOnExhibitor
 * 
 */
export type AssetOnExhibitor = $Result.DefaultSelection<Prisma.$AssetOnExhibitorPayload>
/**
 * Model AssetOnEvent
 * 
 */
export type AssetOnEvent = $Result.DefaultSelection<Prisma.$AssetOnEventPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model TagOnEvent
 * 
 */
export type TagOnEvent = $Result.DefaultSelection<Prisma.$TagOnEventPayload>
/**
 * Model TagOnExhibitor
 * 
 */
export type TagOnExhibitor = $Result.DefaultSelection<Prisma.$TagOnExhibitorPayload>
/**
 * Model TagOnProduct
 * 
 */
export type TagOnProduct = $Result.DefaultSelection<Prisma.$TagOnProductPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Recent
 * 
 */
export type Recent = $Result.DefaultSelection<Prisma.$RecentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ResourceType: {
  EVENT: 'EVENT',
  EXHIBITOR: 'EXHIBITOR',
  PRODUCT: 'PRODUCT'
};

export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ResourceType = $Enums.ResourceType

export const ResourceType: typeof $Enums.ResourceType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.eventSpeaker`: Exposes CRUD operations for the **EventSpeaker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventSpeakers
    * const eventSpeakers = await prisma.eventSpeaker.findMany()
    * ```
    */
  get eventSpeaker(): Prisma.EventSpeakerDelegate<ExtArgs>;

  /**
   * `prisma.exhibitor`: Exposes CRUD operations for the **Exhibitor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exhibitors
    * const exhibitors = await prisma.exhibitor.findMany()
    * ```
    */
  get exhibitor(): Prisma.ExhibitorDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.attendee`: Exposes CRUD operations for the **Attendee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendees
    * const attendees = await prisma.attendee.findMany()
    * ```
    */
  get attendee(): Prisma.AttendeeDelegate<ExtArgs>;

  /**
   * `prisma.favorite`: Exposes CRUD operations for the **Favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.FavoriteDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.asset`: Exposes CRUD operations for the **Asset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assets
    * const assets = await prisma.asset.findMany()
    * ```
    */
  get asset(): Prisma.AssetDelegate<ExtArgs>;

  /**
   * `prisma.assetOnProduct`: Exposes CRUD operations for the **AssetOnProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetOnProducts
    * const assetOnProducts = await prisma.assetOnProduct.findMany()
    * ```
    */
  get assetOnProduct(): Prisma.AssetOnProductDelegate<ExtArgs>;

  /**
   * `prisma.assetOnExhibitor`: Exposes CRUD operations for the **AssetOnExhibitor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetOnExhibitors
    * const assetOnExhibitors = await prisma.assetOnExhibitor.findMany()
    * ```
    */
  get assetOnExhibitor(): Prisma.AssetOnExhibitorDelegate<ExtArgs>;

  /**
   * `prisma.assetOnEvent`: Exposes CRUD operations for the **AssetOnEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssetOnEvents
    * const assetOnEvents = await prisma.assetOnEvent.findMany()
    * ```
    */
  get assetOnEvent(): Prisma.AssetOnEventDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.tagOnEvent`: Exposes CRUD operations for the **TagOnEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagOnEvents
    * const tagOnEvents = await prisma.tagOnEvent.findMany()
    * ```
    */
  get tagOnEvent(): Prisma.TagOnEventDelegate<ExtArgs>;

  /**
   * `prisma.tagOnExhibitor`: Exposes CRUD operations for the **TagOnExhibitor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagOnExhibitors
    * const tagOnExhibitors = await prisma.tagOnExhibitor.findMany()
    * ```
    */
  get tagOnExhibitor(): Prisma.TagOnExhibitorDelegate<ExtArgs>;

  /**
   * `prisma.tagOnProduct`: Exposes CRUD operations for the **TagOnProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagOnProducts
    * const tagOnProducts = await prisma.tagOnProduct.findMany()
    * ```
    */
  get tagOnProduct(): Prisma.TagOnProductDelegate<ExtArgs>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.recent`: Exposes CRUD operations for the **Recent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recents
    * const recents = await prisma.recent.findMany()
    * ```
    */
  get recent(): Prisma.RecentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Event: 'Event',
    EventSpeaker: 'EventSpeaker',
    Exhibitor: 'Exhibitor',
    Product: 'Product',
    Attendee: 'Attendee',
    Favorite: 'Favorite',
    Notification: 'Notification',
    Asset: 'Asset',
    AssetOnProduct: 'AssetOnProduct',
    AssetOnExhibitor: 'AssetOnExhibitor',
    AssetOnEvent: 'AssetOnEvent',
    Tag: 'Tag',
    Category: 'Category',
    TagOnEvent: 'TagOnEvent',
    TagOnExhibitor: 'TagOnExhibitor',
    TagOnProduct: 'TagOnProduct',
    RefreshToken: 'RefreshToken',
    AuditLog: 'AuditLog',
    Recent: 'Recent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "event" | "eventSpeaker" | "exhibitor" | "product" | "attendee" | "favorite" | "notification" | "asset" | "assetOnProduct" | "assetOnExhibitor" | "assetOnEvent" | "tag" | "category" | "tagOnEvent" | "tagOnExhibitor" | "tagOnProduct" | "refreshToken" | "auditLog" | "recent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      EventSpeaker: {
        payload: Prisma.$EventSpeakerPayload<ExtArgs>
        fields: Prisma.EventSpeakerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventSpeakerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventSpeakerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>
          }
          findFirst: {
            args: Prisma.EventSpeakerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventSpeakerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>
          }
          findMany: {
            args: Prisma.EventSpeakerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>[]
          }
          create: {
            args: Prisma.EventSpeakerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>
          }
          createMany: {
            args: Prisma.EventSpeakerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventSpeakerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>[]
          }
          delete: {
            args: Prisma.EventSpeakerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>
          }
          update: {
            args: Prisma.EventSpeakerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>
          }
          deleteMany: {
            args: Prisma.EventSpeakerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventSpeakerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventSpeakerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSpeakerPayload>
          }
          aggregate: {
            args: Prisma.EventSpeakerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventSpeaker>
          }
          groupBy: {
            args: Prisma.EventSpeakerGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventSpeakerGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventSpeakerCountArgs<ExtArgs>
            result: $Utils.Optional<EventSpeakerCountAggregateOutputType> | number
          }
        }
      }
      Exhibitor: {
        payload: Prisma.$ExhibitorPayload<ExtArgs>
        fields: Prisma.ExhibitorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExhibitorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExhibitorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>
          }
          findFirst: {
            args: Prisma.ExhibitorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExhibitorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>
          }
          findMany: {
            args: Prisma.ExhibitorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>[]
          }
          create: {
            args: Prisma.ExhibitorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>
          }
          createMany: {
            args: Prisma.ExhibitorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExhibitorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>[]
          }
          delete: {
            args: Prisma.ExhibitorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>
          }
          update: {
            args: Prisma.ExhibitorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>
          }
          deleteMany: {
            args: Prisma.ExhibitorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExhibitorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExhibitorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExhibitorPayload>
          }
          aggregate: {
            args: Prisma.ExhibitorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExhibitor>
          }
          groupBy: {
            args: Prisma.ExhibitorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExhibitorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExhibitorCountArgs<ExtArgs>
            result: $Utils.Optional<ExhibitorCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Attendee: {
        payload: Prisma.$AttendeePayload<ExtArgs>
        fields: Prisma.AttendeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>
          }
          findFirst: {
            args: Prisma.AttendeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>
          }
          findMany: {
            args: Prisma.AttendeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>[]
          }
          create: {
            args: Prisma.AttendeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>
          }
          createMany: {
            args: Prisma.AttendeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>[]
          }
          delete: {
            args: Prisma.AttendeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>
          }
          update: {
            args: Prisma.AttendeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>
          }
          deleteMany: {
            args: Prisma.AttendeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttendeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendeePayload>
          }
          aggregate: {
            args: Prisma.AttendeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendee>
          }
          groupBy: {
            args: Prisma.AttendeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendeeCountArgs<ExtArgs>
            result: $Utils.Optional<AttendeeCountAggregateOutputType> | number
          }
        }
      }
      Favorite: {
        payload: Prisma.$FavoritePayload<ExtArgs>
        fields: Prisma.FavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findFirst: {
            args: Prisma.FavoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findMany: {
            args: Prisma.FavoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          create: {
            args: Prisma.FavoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          createMany: {
            args: Prisma.FavoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          delete: {
            args: Prisma.FavoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          update: {
            args: Prisma.FavoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.FavoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Asset: {
        payload: Prisma.$AssetPayload<ExtArgs>
        fields: Prisma.AssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findFirst: {
            args: Prisma.AssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          findMany: {
            args: Prisma.AssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          create: {
            args: Prisma.AssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          createMany: {
            args: Prisma.AssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>[]
          }
          delete: {
            args: Prisma.AssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          update: {
            args: Prisma.AssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          deleteMany: {
            args: Prisma.AssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetPayload>
          }
          aggregate: {
            args: Prisma.AssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAsset>
          }
          groupBy: {
            args: Prisma.AssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetCountArgs<ExtArgs>
            result: $Utils.Optional<AssetCountAggregateOutputType> | number
          }
        }
      }
      AssetOnProduct: {
        payload: Prisma.$AssetOnProductPayload<ExtArgs>
        fields: Prisma.AssetOnProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetOnProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetOnProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>
          }
          findFirst: {
            args: Prisma.AssetOnProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetOnProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>
          }
          findMany: {
            args: Prisma.AssetOnProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>[]
          }
          create: {
            args: Prisma.AssetOnProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>
          }
          createMany: {
            args: Prisma.AssetOnProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetOnProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>[]
          }
          delete: {
            args: Prisma.AssetOnProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>
          }
          update: {
            args: Prisma.AssetOnProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>
          }
          deleteMany: {
            args: Prisma.AssetOnProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetOnProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetOnProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnProductPayload>
          }
          aggregate: {
            args: Prisma.AssetOnProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetOnProduct>
          }
          groupBy: {
            args: Prisma.AssetOnProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetOnProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetOnProductCountArgs<ExtArgs>
            result: $Utils.Optional<AssetOnProductCountAggregateOutputType> | number
          }
        }
      }
      AssetOnExhibitor: {
        payload: Prisma.$AssetOnExhibitorPayload<ExtArgs>
        fields: Prisma.AssetOnExhibitorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetOnExhibitorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetOnExhibitorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>
          }
          findFirst: {
            args: Prisma.AssetOnExhibitorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetOnExhibitorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>
          }
          findMany: {
            args: Prisma.AssetOnExhibitorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>[]
          }
          create: {
            args: Prisma.AssetOnExhibitorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>
          }
          createMany: {
            args: Prisma.AssetOnExhibitorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetOnExhibitorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>[]
          }
          delete: {
            args: Prisma.AssetOnExhibitorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>
          }
          update: {
            args: Prisma.AssetOnExhibitorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>
          }
          deleteMany: {
            args: Prisma.AssetOnExhibitorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetOnExhibitorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetOnExhibitorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnExhibitorPayload>
          }
          aggregate: {
            args: Prisma.AssetOnExhibitorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetOnExhibitor>
          }
          groupBy: {
            args: Prisma.AssetOnExhibitorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetOnExhibitorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetOnExhibitorCountArgs<ExtArgs>
            result: $Utils.Optional<AssetOnExhibitorCountAggregateOutputType> | number
          }
        }
      }
      AssetOnEvent: {
        payload: Prisma.$AssetOnEventPayload<ExtArgs>
        fields: Prisma.AssetOnEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssetOnEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssetOnEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>
          }
          findFirst: {
            args: Prisma.AssetOnEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssetOnEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>
          }
          findMany: {
            args: Prisma.AssetOnEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>[]
          }
          create: {
            args: Prisma.AssetOnEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>
          }
          createMany: {
            args: Prisma.AssetOnEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssetOnEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>[]
          }
          delete: {
            args: Prisma.AssetOnEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>
          }
          update: {
            args: Prisma.AssetOnEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>
          }
          deleteMany: {
            args: Prisma.AssetOnEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssetOnEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssetOnEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssetOnEventPayload>
          }
          aggregate: {
            args: Prisma.AssetOnEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssetOnEvent>
          }
          groupBy: {
            args: Prisma.AssetOnEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssetOnEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssetOnEventCountArgs<ExtArgs>
            result: $Utils.Optional<AssetOnEventCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      TagOnEvent: {
        payload: Prisma.$TagOnEventPayload<ExtArgs>
        fields: Prisma.TagOnEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagOnEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagOnEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>
          }
          findFirst: {
            args: Prisma.TagOnEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagOnEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>
          }
          findMany: {
            args: Prisma.TagOnEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>[]
          }
          create: {
            args: Prisma.TagOnEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>
          }
          createMany: {
            args: Prisma.TagOnEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagOnEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>[]
          }
          delete: {
            args: Prisma.TagOnEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>
          }
          update: {
            args: Prisma.TagOnEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>
          }
          deleteMany: {
            args: Prisma.TagOnEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagOnEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagOnEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnEventPayload>
          }
          aggregate: {
            args: Prisma.TagOnEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagOnEvent>
          }
          groupBy: {
            args: Prisma.TagOnEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagOnEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagOnEventCountArgs<ExtArgs>
            result: $Utils.Optional<TagOnEventCountAggregateOutputType> | number
          }
        }
      }
      TagOnExhibitor: {
        payload: Prisma.$TagOnExhibitorPayload<ExtArgs>
        fields: Prisma.TagOnExhibitorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagOnExhibitorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagOnExhibitorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>
          }
          findFirst: {
            args: Prisma.TagOnExhibitorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagOnExhibitorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>
          }
          findMany: {
            args: Prisma.TagOnExhibitorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>[]
          }
          create: {
            args: Prisma.TagOnExhibitorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>
          }
          createMany: {
            args: Prisma.TagOnExhibitorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagOnExhibitorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>[]
          }
          delete: {
            args: Prisma.TagOnExhibitorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>
          }
          update: {
            args: Prisma.TagOnExhibitorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>
          }
          deleteMany: {
            args: Prisma.TagOnExhibitorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagOnExhibitorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagOnExhibitorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnExhibitorPayload>
          }
          aggregate: {
            args: Prisma.TagOnExhibitorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagOnExhibitor>
          }
          groupBy: {
            args: Prisma.TagOnExhibitorGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagOnExhibitorGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagOnExhibitorCountArgs<ExtArgs>
            result: $Utils.Optional<TagOnExhibitorCountAggregateOutputType> | number
          }
        }
      }
      TagOnProduct: {
        payload: Prisma.$TagOnProductPayload<ExtArgs>
        fields: Prisma.TagOnProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagOnProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagOnProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>
          }
          findFirst: {
            args: Prisma.TagOnProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagOnProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>
          }
          findMany: {
            args: Prisma.TagOnProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>[]
          }
          create: {
            args: Prisma.TagOnProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>
          }
          createMany: {
            args: Prisma.TagOnProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagOnProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>[]
          }
          delete: {
            args: Prisma.TagOnProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>
          }
          update: {
            args: Prisma.TagOnProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>
          }
          deleteMany: {
            args: Prisma.TagOnProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagOnProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagOnProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagOnProductPayload>
          }
          aggregate: {
            args: Prisma.TagOnProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTagOnProduct>
          }
          groupBy: {
            args: Prisma.TagOnProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagOnProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagOnProductCountArgs<ExtArgs>
            result: $Utils.Optional<TagOnProductCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Recent: {
        payload: Prisma.$RecentPayload<ExtArgs>
        fields: Prisma.RecentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>
          }
          findFirst: {
            args: Prisma.RecentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>
          }
          findMany: {
            args: Prisma.RecentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>[]
          }
          create: {
            args: Prisma.RecentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>
          }
          createMany: {
            args: Prisma.RecentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>[]
          }
          delete: {
            args: Prisma.RecentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>
          }
          update: {
            args: Prisma.RecentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>
          }
          deleteMany: {
            args: Prisma.RecentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecentPayload>
          }
          aggregate: {
            args: Prisma.RecentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecent>
          }
          groupBy: {
            args: Prisma.RecentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecentCountArgs<ExtArgs>
            result: $Utils.Optional<RecentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    eventsCreated: number
    speakersFor: number
    attendees: number
    favorites: number
    refreshTokens: number
    notifications: number
    AuditLog: number
    Exhibitor: number
    recents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventsCreated?: boolean | UserCountOutputTypeCountEventsCreatedArgs
    speakersFor?: boolean | UserCountOutputTypeCountSpeakersForArgs
    attendees?: boolean | UserCountOutputTypeCountAttendeesArgs
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    AuditLog?: boolean | UserCountOutputTypeCountAuditLogArgs
    Exhibitor?: boolean | UserCountOutputTypeCountExhibitorArgs
    recents?: boolean | UserCountOutputTypeCountRecentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSpeakersForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSpeakerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExhibitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExhibitorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecentWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    speakers: number
    attendees: number
    tags: number
    assets: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    speakers?: boolean | EventCountOutputTypeCountSpeakersArgs
    attendees?: boolean | EventCountOutputTypeCountAttendeesArgs
    tags?: boolean | EventCountOutputTypeCountTagsArgs
    assets?: boolean | EventCountOutputTypeCountAssetsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountSpeakersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSpeakerWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendeeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnEventWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnEventWhereInput
  }


  /**
   * Count Type ExhibitorCountOutputType
   */

  export type ExhibitorCountOutputType = {
    products: number
    assets: number
    tags: number
    events: number
  }

  export type ExhibitorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ExhibitorCountOutputTypeCountProductsArgs
    assets?: boolean | ExhibitorCountOutputTypeCountAssetsArgs
    tags?: boolean | ExhibitorCountOutputTypeCountTagsArgs
    events?: boolean | ExhibitorCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * ExhibitorCountOutputType without action
   */
  export type ExhibitorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExhibitorCountOutputType
     */
    select?: ExhibitorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExhibitorCountOutputType without action
   */
  export type ExhibitorCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * ExhibitorCountOutputType without action
   */
  export type ExhibitorCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnExhibitorWhereInput
  }

  /**
   * ExhibitorCountOutputType without action
   */
  export type ExhibitorCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnExhibitorWhereInput
  }

  /**
   * ExhibitorCountOutputType without action
   */
  export type ExhibitorCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    assets: number
    tags: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | ProductCountOutputTypeCountAssetsArgs
    tags?: boolean | ProductCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnProductWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnProductWhereInput
  }


  /**
   * Count Type AssetCountOutputType
   */

  export type AssetCountOutputType = {
    productLinks: number
    exhibitorLinks: number
    eventLinks: number
    userAvatarLinks: number
  }

  export type AssetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productLinks?: boolean | AssetCountOutputTypeCountProductLinksArgs
    exhibitorLinks?: boolean | AssetCountOutputTypeCountExhibitorLinksArgs
    eventLinks?: boolean | AssetCountOutputTypeCountEventLinksArgs
    userAvatarLinks?: boolean | AssetCountOutputTypeCountUserAvatarLinksArgs
  }

  // Custom InputTypes
  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetCountOutputType
     */
    select?: AssetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountProductLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnProductWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountExhibitorLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnExhibitorWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountEventLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnEventWhereInput
  }

  /**
   * AssetCountOutputType without action
   */
  export type AssetCountOutputTypeCountUserAvatarLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    events: number
    exhibitors: number
    products: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | TagCountOutputTypeCountEventsArgs
    exhibitors?: boolean | TagCountOutputTypeCountExhibitorsArgs
    products?: boolean | TagCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnEventWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountExhibitorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnExhibitorWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnProductWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    avatarAssetId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    avatarAssetId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    email: number
    passwordHash: number
    role: number
    avatarAssetId: number
    isActive: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    passwordHash?: true
    role?: true
    avatarAssetId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    passwordHash?: true
    role?: true
    avatarAssetId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    passwordHash?: true
    role?: true
    avatarAssetId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role: $Enums.Role
    avatarAssetId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    avatarAssetId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    avatarAsset?: boolean | User$avatarAssetArgs<ExtArgs>
    eventsCreated?: boolean | User$eventsCreatedArgs<ExtArgs>
    speakersFor?: boolean | User$speakersForArgs<ExtArgs>
    attendees?: boolean | User$attendeesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    AuditLog?: boolean | User$AuditLogArgs<ExtArgs>
    Exhibitor?: boolean | User$ExhibitorArgs<ExtArgs>
    recents?: boolean | User$recentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    avatarAssetId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    avatarAsset?: boolean | User$avatarAssetArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    avatarAssetId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatarAsset?: boolean | User$avatarAssetArgs<ExtArgs>
    eventsCreated?: boolean | User$eventsCreatedArgs<ExtArgs>
    speakersFor?: boolean | User$speakersForArgs<ExtArgs>
    attendees?: boolean | User$attendeesArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    AuditLog?: boolean | User$AuditLogArgs<ExtArgs>
    Exhibitor?: boolean | User$ExhibitorArgs<ExtArgs>
    recents?: boolean | User$recentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatarAsset?: boolean | User$avatarAssetArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      avatarAsset: Prisma.$AssetPayload<ExtArgs> | null
      eventsCreated: Prisma.$EventPayload<ExtArgs>[]
      speakersFor: Prisma.$EventSpeakerPayload<ExtArgs>[]
      attendees: Prisma.$AttendeePayload<ExtArgs>[]
      favorites: Prisma.$FavoritePayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      AuditLog: Prisma.$AuditLogPayload<ExtArgs>[]
      Exhibitor: Prisma.$ExhibitorPayload<ExtArgs>[]
      recents: Prisma.$RecentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstname: string
      lastname: string
      email: string
      passwordHash: string
      role: $Enums.Role
      avatarAssetId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    avatarAsset<T extends User$avatarAssetArgs<ExtArgs> = {}>(args?: Subset<T, User$avatarAssetArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    eventsCreated<T extends User$eventsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    speakersFor<T extends User$speakersForArgs<ExtArgs> = {}>(args?: Subset<T, User$speakersForArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findMany"> | Null>
    attendees<T extends User$attendeesArgs<ExtArgs> = {}>(args?: Subset<T, User$attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findMany"> | Null>
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany"> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    AuditLog<T extends User$AuditLogArgs<ExtArgs> = {}>(args?: Subset<T, User$AuditLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    Exhibitor<T extends User$ExhibitorArgs<ExtArgs> = {}>(args?: Subset<T, User$ExhibitorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findMany"> | Null>
    recents<T extends User$recentsArgs<ExtArgs> = {}>(args?: Subset<T, User$recentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly avatarAssetId: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.avatarAsset
   */
  export type User$avatarAssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    where?: AssetWhereInput
  }

  /**
   * User.eventsCreated
   */
  export type User$eventsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.speakersFor
   */
  export type User$speakersForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    where?: EventSpeakerWhereInput
    orderBy?: EventSpeakerOrderByWithRelationInput | EventSpeakerOrderByWithRelationInput[]
    cursor?: EventSpeakerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventSpeakerScalarFieldEnum | EventSpeakerScalarFieldEnum[]
  }

  /**
   * User.attendees
   */
  export type User$attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    where?: AttendeeWhereInput
    orderBy?: AttendeeOrderByWithRelationInput | AttendeeOrderByWithRelationInput[]
    cursor?: AttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendeeScalarFieldEnum | AttendeeScalarFieldEnum[]
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.AuditLog
   */
  export type User$AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.Exhibitor
   */
  export type User$ExhibitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    where?: ExhibitorWhereInput
    orderBy?: ExhibitorOrderByWithRelationInput | ExhibitorOrderByWithRelationInput[]
    cursor?: ExhibitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExhibitorScalarFieldEnum | ExhibitorScalarFieldEnum[]
  }

  /**
   * User.recents
   */
  export type User$recentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    where?: RecentWhereInput
    orderBy?: RecentOrderByWithRelationInput | RecentOrderByWithRelationInput[]
    cursor?: RecentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecentScalarFieldEnum | RecentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    color: string | null
    start: Date | null
    end: Date | null
    timed: boolean | null
    location: string | null
    exhibitorId: string | null
    timezone: string | null
    published: boolean | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    color: string | null
    start: Date | null
    end: Date | null
    timed: boolean | null
    location: string | null
    exhibitorId: string | null
    timezone: string | null
    published: boolean | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    title: number
    description: number
    color: number
    start: number
    end: number
    timed: number
    location: number
    exhibitorId: number
    timezone: number
    published: number
    createdById: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    color?: true
    start?: true
    end?: true
    timed?: true
    location?: true
    exhibitorId?: true
    timezone?: true
    published?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    color?: true
    start?: true
    end?: true
    timed?: true
    location?: true
    exhibitorId?: true
    timezone?: true
    published?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    color?: true
    start?: true
    end?: true
    timed?: true
    location?: true
    exhibitorId?: true
    timezone?: true
    published?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    name: string
    title: string
    description: string | null
    color: string | null
    start: Date
    end: Date
    timed: boolean
    location: string | null
    exhibitorId: string | null
    timezone: string | null
    published: boolean
    createdById: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    color?: boolean
    start?: boolean
    end?: boolean
    timed?: boolean
    location?: boolean
    exhibitorId?: boolean
    timezone?: boolean
    published?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdBy?: boolean | Event$createdByArgs<ExtArgs>
    exhibitor?: boolean | Event$exhibitorArgs<ExtArgs>
    speakers?: boolean | Event$speakersArgs<ExtArgs>
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    tags?: boolean | Event$tagsArgs<ExtArgs>
    assets?: boolean | Event$assetsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    color?: boolean
    start?: boolean
    end?: boolean
    timed?: boolean
    location?: boolean
    exhibitorId?: boolean
    timezone?: boolean
    published?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdBy?: boolean | Event$createdByArgs<ExtArgs>
    exhibitor?: boolean | Event$exhibitorArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    color?: boolean
    start?: boolean
    end?: boolean
    timed?: boolean
    location?: boolean
    exhibitorId?: boolean
    timezone?: boolean
    published?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Event$createdByArgs<ExtArgs>
    exhibitor?: boolean | Event$exhibitorArgs<ExtArgs>
    speakers?: boolean | Event$speakersArgs<ExtArgs>
    attendees?: boolean | Event$attendeesArgs<ExtArgs>
    tags?: boolean | Event$tagsArgs<ExtArgs>
    assets?: boolean | Event$assetsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Event$createdByArgs<ExtArgs>
    exhibitor?: boolean | Event$exhibitorArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      exhibitor: Prisma.$ExhibitorPayload<ExtArgs> | null
      speakers: Prisma.$EventSpeakerPayload<ExtArgs>[]
      attendees: Prisma.$AttendeePayload<ExtArgs>[]
      tags: Prisma.$TagOnEventPayload<ExtArgs>[]
      assets: Prisma.$AssetOnEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      title: string
      description: string | null
      color: string | null
      start: Date
      end: Date
      timed: boolean
      location: string | null
      exhibitorId: string | null
      timezone: string | null
      published: boolean
      createdById: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Event$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Event$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    exhibitor<T extends Event$exhibitorArgs<ExtArgs> = {}>(args?: Subset<T, Event$exhibitorArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    speakers<T extends Event$speakersArgs<ExtArgs> = {}>(args?: Subset<T, Event$speakersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findMany"> | Null>
    attendees<T extends Event$attendeesArgs<ExtArgs> = {}>(args?: Subset<T, Event$attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Event$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Event$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findMany"> | Null>
    assets<T extends Event$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Event$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly name: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly color: FieldRef<"Event", 'String'>
    readonly start: FieldRef<"Event", 'DateTime'>
    readonly end: FieldRef<"Event", 'DateTime'>
    readonly timed: FieldRef<"Event", 'Boolean'>
    readonly location: FieldRef<"Event", 'String'>
    readonly exhibitorId: FieldRef<"Event", 'String'>
    readonly timezone: FieldRef<"Event", 'String'>
    readonly published: FieldRef<"Event", 'Boolean'>
    readonly createdById: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
    readonly deletedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.createdBy
   */
  export type Event$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Event.exhibitor
   */
  export type Event$exhibitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    where?: ExhibitorWhereInput
  }

  /**
   * Event.speakers
   */
  export type Event$speakersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    where?: EventSpeakerWhereInput
    orderBy?: EventSpeakerOrderByWithRelationInput | EventSpeakerOrderByWithRelationInput[]
    cursor?: EventSpeakerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventSpeakerScalarFieldEnum | EventSpeakerScalarFieldEnum[]
  }

  /**
   * Event.attendees
   */
  export type Event$attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    where?: AttendeeWhereInput
    orderBy?: AttendeeOrderByWithRelationInput | AttendeeOrderByWithRelationInput[]
    cursor?: AttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendeeScalarFieldEnum | AttendeeScalarFieldEnum[]
  }

  /**
   * Event.tags
   */
  export type Event$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    where?: TagOnEventWhereInput
    orderBy?: TagOnEventOrderByWithRelationInput | TagOnEventOrderByWithRelationInput[]
    cursor?: TagOnEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagOnEventScalarFieldEnum | TagOnEventScalarFieldEnum[]
  }

  /**
   * Event.assets
   */
  export type Event$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    where?: AssetOnEventWhereInput
    orderBy?: AssetOnEventOrderByWithRelationInput | AssetOnEventOrderByWithRelationInput[]
    cursor?: AssetOnEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetOnEventScalarFieldEnum | AssetOnEventScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model EventSpeaker
   */

  export type AggregateEventSpeaker = {
    _count: EventSpeakerCountAggregateOutputType | null
    _avg: EventSpeakerAvgAggregateOutputType | null
    _sum: EventSpeakerSumAggregateOutputType | null
    _min: EventSpeakerMinAggregateOutputType | null
    _max: EventSpeakerMaxAggregateOutputType | null
  }

  export type EventSpeakerAvgAggregateOutputType = {
    order: number | null
  }

  export type EventSpeakerSumAggregateOutputType = {
    order: number | null
  }

  export type EventSpeakerMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    role: string | null
    order: number | null
  }

  export type EventSpeakerMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userId: string | null
    role: string | null
    order: number | null
  }

  export type EventSpeakerCountAggregateOutputType = {
    id: number
    eventId: number
    userId: number
    role: number
    order: number
    _all: number
  }


  export type EventSpeakerAvgAggregateInputType = {
    order?: true
  }

  export type EventSpeakerSumAggregateInputType = {
    order?: true
  }

  export type EventSpeakerMinAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    role?: true
    order?: true
  }

  export type EventSpeakerMaxAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    role?: true
    order?: true
  }

  export type EventSpeakerCountAggregateInputType = {
    id?: true
    eventId?: true
    userId?: true
    role?: true
    order?: true
    _all?: true
  }

  export type EventSpeakerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventSpeaker to aggregate.
     */
    where?: EventSpeakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSpeakers to fetch.
     */
    orderBy?: EventSpeakerOrderByWithRelationInput | EventSpeakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventSpeakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventSpeakers
    **/
    _count?: true | EventSpeakerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventSpeakerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSpeakerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventSpeakerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventSpeakerMaxAggregateInputType
  }

  export type GetEventSpeakerAggregateType<T extends EventSpeakerAggregateArgs> = {
        [P in keyof T & keyof AggregateEventSpeaker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventSpeaker[P]>
      : GetScalarType<T[P], AggregateEventSpeaker[P]>
  }




  export type EventSpeakerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSpeakerWhereInput
    orderBy?: EventSpeakerOrderByWithAggregationInput | EventSpeakerOrderByWithAggregationInput[]
    by: EventSpeakerScalarFieldEnum[] | EventSpeakerScalarFieldEnum
    having?: EventSpeakerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventSpeakerCountAggregateInputType | true
    _avg?: EventSpeakerAvgAggregateInputType
    _sum?: EventSpeakerSumAggregateInputType
    _min?: EventSpeakerMinAggregateInputType
    _max?: EventSpeakerMaxAggregateInputType
  }

  export type EventSpeakerGroupByOutputType = {
    id: string
    eventId: string
    userId: string
    role: string | null
    order: number | null
    _count: EventSpeakerCountAggregateOutputType | null
    _avg: EventSpeakerAvgAggregateOutputType | null
    _sum: EventSpeakerSumAggregateOutputType | null
    _min: EventSpeakerMinAggregateOutputType | null
    _max: EventSpeakerMaxAggregateOutputType | null
  }

  type GetEventSpeakerGroupByPayload<T extends EventSpeakerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventSpeakerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventSpeakerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventSpeakerGroupByOutputType[P]>
            : GetScalarType<T[P], EventSpeakerGroupByOutputType[P]>
        }
      >
    >


  export type EventSpeakerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    role?: boolean
    order?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSpeaker"]>

  export type EventSpeakerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userId?: boolean
    role?: boolean
    order?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSpeaker"]>

  export type EventSpeakerSelectScalar = {
    id?: boolean
    eventId?: boolean
    userId?: boolean
    role?: boolean
    order?: boolean
  }

  export type EventSpeakerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventSpeakerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventSpeakerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventSpeaker"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userId: string
      role: string | null
      order: number | null
    }, ExtArgs["result"]["eventSpeaker"]>
    composites: {}
  }

  type EventSpeakerGetPayload<S extends boolean | null | undefined | EventSpeakerDefaultArgs> = $Result.GetResult<Prisma.$EventSpeakerPayload, S>

  type EventSpeakerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventSpeakerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventSpeakerCountAggregateInputType | true
    }

  export interface EventSpeakerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventSpeaker'], meta: { name: 'EventSpeaker' } }
    /**
     * Find zero or one EventSpeaker that matches the filter.
     * @param {EventSpeakerFindUniqueArgs} args - Arguments to find a EventSpeaker
     * @example
     * // Get one EventSpeaker
     * const eventSpeaker = await prisma.eventSpeaker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventSpeakerFindUniqueArgs>(args: SelectSubset<T, EventSpeakerFindUniqueArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventSpeaker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventSpeakerFindUniqueOrThrowArgs} args - Arguments to find a EventSpeaker
     * @example
     * // Get one EventSpeaker
     * const eventSpeaker = await prisma.eventSpeaker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventSpeakerFindUniqueOrThrowArgs>(args: SelectSubset<T, EventSpeakerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventSpeaker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerFindFirstArgs} args - Arguments to find a EventSpeaker
     * @example
     * // Get one EventSpeaker
     * const eventSpeaker = await prisma.eventSpeaker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventSpeakerFindFirstArgs>(args?: SelectSubset<T, EventSpeakerFindFirstArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventSpeaker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerFindFirstOrThrowArgs} args - Arguments to find a EventSpeaker
     * @example
     * // Get one EventSpeaker
     * const eventSpeaker = await prisma.eventSpeaker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventSpeakerFindFirstOrThrowArgs>(args?: SelectSubset<T, EventSpeakerFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventSpeakers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventSpeakers
     * const eventSpeakers = await prisma.eventSpeaker.findMany()
     * 
     * // Get first 10 EventSpeakers
     * const eventSpeakers = await prisma.eventSpeaker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventSpeakerWithIdOnly = await prisma.eventSpeaker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventSpeakerFindManyArgs>(args?: SelectSubset<T, EventSpeakerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventSpeaker.
     * @param {EventSpeakerCreateArgs} args - Arguments to create a EventSpeaker.
     * @example
     * // Create one EventSpeaker
     * const EventSpeaker = await prisma.eventSpeaker.create({
     *   data: {
     *     // ... data to create a EventSpeaker
     *   }
     * })
     * 
     */
    create<T extends EventSpeakerCreateArgs>(args: SelectSubset<T, EventSpeakerCreateArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventSpeakers.
     * @param {EventSpeakerCreateManyArgs} args - Arguments to create many EventSpeakers.
     * @example
     * // Create many EventSpeakers
     * const eventSpeaker = await prisma.eventSpeaker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventSpeakerCreateManyArgs>(args?: SelectSubset<T, EventSpeakerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventSpeakers and returns the data saved in the database.
     * @param {EventSpeakerCreateManyAndReturnArgs} args - Arguments to create many EventSpeakers.
     * @example
     * // Create many EventSpeakers
     * const eventSpeaker = await prisma.eventSpeaker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventSpeakers and only return the `id`
     * const eventSpeakerWithIdOnly = await prisma.eventSpeaker.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventSpeakerCreateManyAndReturnArgs>(args?: SelectSubset<T, EventSpeakerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventSpeaker.
     * @param {EventSpeakerDeleteArgs} args - Arguments to delete one EventSpeaker.
     * @example
     * // Delete one EventSpeaker
     * const EventSpeaker = await prisma.eventSpeaker.delete({
     *   where: {
     *     // ... filter to delete one EventSpeaker
     *   }
     * })
     * 
     */
    delete<T extends EventSpeakerDeleteArgs>(args: SelectSubset<T, EventSpeakerDeleteArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventSpeaker.
     * @param {EventSpeakerUpdateArgs} args - Arguments to update one EventSpeaker.
     * @example
     * // Update one EventSpeaker
     * const eventSpeaker = await prisma.eventSpeaker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventSpeakerUpdateArgs>(args: SelectSubset<T, EventSpeakerUpdateArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventSpeakers.
     * @param {EventSpeakerDeleteManyArgs} args - Arguments to filter EventSpeakers to delete.
     * @example
     * // Delete a few EventSpeakers
     * const { count } = await prisma.eventSpeaker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventSpeakerDeleteManyArgs>(args?: SelectSubset<T, EventSpeakerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventSpeakers
     * const eventSpeaker = await prisma.eventSpeaker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventSpeakerUpdateManyArgs>(args: SelectSubset<T, EventSpeakerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventSpeaker.
     * @param {EventSpeakerUpsertArgs} args - Arguments to update or create a EventSpeaker.
     * @example
     * // Update or create a EventSpeaker
     * const eventSpeaker = await prisma.eventSpeaker.upsert({
     *   create: {
     *     // ... data to create a EventSpeaker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventSpeaker we want to update
     *   }
     * })
     */
    upsert<T extends EventSpeakerUpsertArgs>(args: SelectSubset<T, EventSpeakerUpsertArgs<ExtArgs>>): Prisma__EventSpeakerClient<$Result.GetResult<Prisma.$EventSpeakerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventSpeakers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerCountArgs} args - Arguments to filter EventSpeakers to count.
     * @example
     * // Count the number of EventSpeakers
     * const count = await prisma.eventSpeaker.count({
     *   where: {
     *     // ... the filter for the EventSpeakers we want to count
     *   }
     * })
    **/
    count<T extends EventSpeakerCountArgs>(
      args?: Subset<T, EventSpeakerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventSpeakerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventSpeaker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventSpeakerAggregateArgs>(args: Subset<T, EventSpeakerAggregateArgs>): Prisma.PrismaPromise<GetEventSpeakerAggregateType<T>>

    /**
     * Group by EventSpeaker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSpeakerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventSpeakerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventSpeakerGroupByArgs['orderBy'] }
        : { orderBy?: EventSpeakerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventSpeakerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventSpeakerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventSpeaker model
   */
  readonly fields: EventSpeakerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventSpeaker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventSpeakerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventSpeaker model
   */ 
  interface EventSpeakerFieldRefs {
    readonly id: FieldRef<"EventSpeaker", 'String'>
    readonly eventId: FieldRef<"EventSpeaker", 'String'>
    readonly userId: FieldRef<"EventSpeaker", 'String'>
    readonly role: FieldRef<"EventSpeaker", 'String'>
    readonly order: FieldRef<"EventSpeaker", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EventSpeaker findUnique
   */
  export type EventSpeakerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * Filter, which EventSpeaker to fetch.
     */
    where: EventSpeakerWhereUniqueInput
  }

  /**
   * EventSpeaker findUniqueOrThrow
   */
  export type EventSpeakerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * Filter, which EventSpeaker to fetch.
     */
    where: EventSpeakerWhereUniqueInput
  }

  /**
   * EventSpeaker findFirst
   */
  export type EventSpeakerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * Filter, which EventSpeaker to fetch.
     */
    where?: EventSpeakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSpeakers to fetch.
     */
    orderBy?: EventSpeakerOrderByWithRelationInput | EventSpeakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSpeakers.
     */
    cursor?: EventSpeakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSpeakers.
     */
    distinct?: EventSpeakerScalarFieldEnum | EventSpeakerScalarFieldEnum[]
  }

  /**
   * EventSpeaker findFirstOrThrow
   */
  export type EventSpeakerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * Filter, which EventSpeaker to fetch.
     */
    where?: EventSpeakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSpeakers to fetch.
     */
    orderBy?: EventSpeakerOrderByWithRelationInput | EventSpeakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSpeakers.
     */
    cursor?: EventSpeakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSpeakers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSpeakers.
     */
    distinct?: EventSpeakerScalarFieldEnum | EventSpeakerScalarFieldEnum[]
  }

  /**
   * EventSpeaker findMany
   */
  export type EventSpeakerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * Filter, which EventSpeakers to fetch.
     */
    where?: EventSpeakerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSpeakers to fetch.
     */
    orderBy?: EventSpeakerOrderByWithRelationInput | EventSpeakerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventSpeakers.
     */
    cursor?: EventSpeakerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSpeakers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSpeakers.
     */
    skip?: number
    distinct?: EventSpeakerScalarFieldEnum | EventSpeakerScalarFieldEnum[]
  }

  /**
   * EventSpeaker create
   */
  export type EventSpeakerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * The data needed to create a EventSpeaker.
     */
    data: XOR<EventSpeakerCreateInput, EventSpeakerUncheckedCreateInput>
  }

  /**
   * EventSpeaker createMany
   */
  export type EventSpeakerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventSpeakers.
     */
    data: EventSpeakerCreateManyInput | EventSpeakerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventSpeaker createManyAndReturn
   */
  export type EventSpeakerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventSpeakers.
     */
    data: EventSpeakerCreateManyInput | EventSpeakerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventSpeaker update
   */
  export type EventSpeakerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * The data needed to update a EventSpeaker.
     */
    data: XOR<EventSpeakerUpdateInput, EventSpeakerUncheckedUpdateInput>
    /**
     * Choose, which EventSpeaker to update.
     */
    where: EventSpeakerWhereUniqueInput
  }

  /**
   * EventSpeaker updateMany
   */
  export type EventSpeakerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventSpeakers.
     */
    data: XOR<EventSpeakerUpdateManyMutationInput, EventSpeakerUncheckedUpdateManyInput>
    /**
     * Filter which EventSpeakers to update
     */
    where?: EventSpeakerWhereInput
  }

  /**
   * EventSpeaker upsert
   */
  export type EventSpeakerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * The filter to search for the EventSpeaker to update in case it exists.
     */
    where: EventSpeakerWhereUniqueInput
    /**
     * In case the EventSpeaker found by the `where` argument doesn't exist, create a new EventSpeaker with this data.
     */
    create: XOR<EventSpeakerCreateInput, EventSpeakerUncheckedCreateInput>
    /**
     * In case the EventSpeaker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventSpeakerUpdateInput, EventSpeakerUncheckedUpdateInput>
  }

  /**
   * EventSpeaker delete
   */
  export type EventSpeakerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
    /**
     * Filter which EventSpeaker to delete.
     */
    where: EventSpeakerWhereUniqueInput
  }

  /**
   * EventSpeaker deleteMany
   */
  export type EventSpeakerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventSpeakers to delete
     */
    where?: EventSpeakerWhereInput
  }

  /**
   * EventSpeaker without action
   */
  export type EventSpeakerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSpeaker
     */
    select?: EventSpeakerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSpeakerInclude<ExtArgs> | null
  }


  /**
   * Model Exhibitor
   */

  export type AggregateExhibitor = {
    _count: ExhibitorCountAggregateOutputType | null
    _avg: ExhibitorAvgAggregateOutputType | null
    _sum: ExhibitorSumAggregateOutputType | null
    _min: ExhibitorMinAggregateOutputType | null
    _max: ExhibitorMaxAggregateOutputType | null
  }

  export type ExhibitorAvgAggregateOutputType = {
    favoriteCount: number | null
  }

  export type ExhibitorSumAggregateOutputType = {
    favoriteCount: number | null
  }

  export type ExhibitorMinAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    website: string | null
    location: string | null
    sponsor: boolean | null
    favoriteCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    createdById: string | null
  }

  export type ExhibitorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    website: string | null
    location: string | null
    sponsor: boolean | null
    favoriteCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    createdById: string | null
  }

  export type ExhibitorCountAggregateOutputType = {
    id: number
    name: number
    title: number
    description: number
    website: number
    location: number
    sponsor: number
    favoriteCount: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    createdById: number
    _all: number
  }


  export type ExhibitorAvgAggregateInputType = {
    favoriteCount?: true
  }

  export type ExhibitorSumAggregateInputType = {
    favoriteCount?: true
  }

  export type ExhibitorMinAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    website?: true
    location?: true
    sponsor?: true
    favoriteCount?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    createdById?: true
  }

  export type ExhibitorMaxAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    website?: true
    location?: true
    sponsor?: true
    favoriteCount?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    createdById?: true
  }

  export type ExhibitorCountAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    website?: true
    location?: true
    sponsor?: true
    favoriteCount?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    createdById?: true
    _all?: true
  }

  export type ExhibitorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exhibitor to aggregate.
     */
    where?: ExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibitors to fetch.
     */
    orderBy?: ExhibitorOrderByWithRelationInput | ExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exhibitors
    **/
    _count?: true | ExhibitorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExhibitorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExhibitorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExhibitorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExhibitorMaxAggregateInputType
  }

  export type GetExhibitorAggregateType<T extends ExhibitorAggregateArgs> = {
        [P in keyof T & keyof AggregateExhibitor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExhibitor[P]>
      : GetScalarType<T[P], AggregateExhibitor[P]>
  }




  export type ExhibitorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExhibitorWhereInput
    orderBy?: ExhibitorOrderByWithAggregationInput | ExhibitorOrderByWithAggregationInput[]
    by: ExhibitorScalarFieldEnum[] | ExhibitorScalarFieldEnum
    having?: ExhibitorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExhibitorCountAggregateInputType | true
    _avg?: ExhibitorAvgAggregateInputType
    _sum?: ExhibitorSumAggregateInputType
    _min?: ExhibitorMinAggregateInputType
    _max?: ExhibitorMaxAggregateInputType
  }

  export type ExhibitorGroupByOutputType = {
    id: string
    name: string
    title: string | null
    description: string | null
    website: string | null
    location: string | null
    sponsor: boolean
    favoriteCount: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    createdById: string | null
    _count: ExhibitorCountAggregateOutputType | null
    _avg: ExhibitorAvgAggregateOutputType | null
    _sum: ExhibitorSumAggregateOutputType | null
    _min: ExhibitorMinAggregateOutputType | null
    _max: ExhibitorMaxAggregateOutputType | null
  }

  type GetExhibitorGroupByPayload<T extends ExhibitorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExhibitorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExhibitorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExhibitorGroupByOutputType[P]>
            : GetScalarType<T[P], ExhibitorGroupByOutputType[P]>
        }
      >
    >


  export type ExhibitorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    website?: boolean
    location?: boolean
    sponsor?: boolean
    favoriteCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | Exhibitor$createdByArgs<ExtArgs>
    products?: boolean | Exhibitor$productsArgs<ExtArgs>
    assets?: boolean | Exhibitor$assetsArgs<ExtArgs>
    tags?: boolean | Exhibitor$tagsArgs<ExtArgs>
    events?: boolean | Exhibitor$eventsArgs<ExtArgs>
    _count?: boolean | ExhibitorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exhibitor"]>

  export type ExhibitorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    website?: boolean
    location?: boolean
    sponsor?: boolean
    favoriteCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | Exhibitor$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["exhibitor"]>

  export type ExhibitorSelectScalar = {
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    website?: boolean
    location?: boolean
    sponsor?: boolean
    favoriteCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdById?: boolean
  }

  export type ExhibitorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Exhibitor$createdByArgs<ExtArgs>
    products?: boolean | Exhibitor$productsArgs<ExtArgs>
    assets?: boolean | Exhibitor$assetsArgs<ExtArgs>
    tags?: boolean | Exhibitor$tagsArgs<ExtArgs>
    events?: boolean | Exhibitor$eventsArgs<ExtArgs>
    _count?: boolean | ExhibitorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExhibitorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Exhibitor$createdByArgs<ExtArgs>
  }

  export type $ExhibitorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exhibitor"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      products: Prisma.$ProductPayload<ExtArgs>[]
      assets: Prisma.$AssetOnExhibitorPayload<ExtArgs>[]
      tags: Prisma.$TagOnExhibitorPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      title: string | null
      description: string | null
      website: string | null
      location: string | null
      sponsor: boolean
      favoriteCount: number
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
      createdById: string | null
    }, ExtArgs["result"]["exhibitor"]>
    composites: {}
  }

  type ExhibitorGetPayload<S extends boolean | null | undefined | ExhibitorDefaultArgs> = $Result.GetResult<Prisma.$ExhibitorPayload, S>

  type ExhibitorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExhibitorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExhibitorCountAggregateInputType | true
    }

  export interface ExhibitorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exhibitor'], meta: { name: 'Exhibitor' } }
    /**
     * Find zero or one Exhibitor that matches the filter.
     * @param {ExhibitorFindUniqueArgs} args - Arguments to find a Exhibitor
     * @example
     * // Get one Exhibitor
     * const exhibitor = await prisma.exhibitor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExhibitorFindUniqueArgs>(args: SelectSubset<T, ExhibitorFindUniqueArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Exhibitor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExhibitorFindUniqueOrThrowArgs} args - Arguments to find a Exhibitor
     * @example
     * // Get one Exhibitor
     * const exhibitor = await prisma.exhibitor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExhibitorFindUniqueOrThrowArgs>(args: SelectSubset<T, ExhibitorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Exhibitor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorFindFirstArgs} args - Arguments to find a Exhibitor
     * @example
     * // Get one Exhibitor
     * const exhibitor = await prisma.exhibitor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExhibitorFindFirstArgs>(args?: SelectSubset<T, ExhibitorFindFirstArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Exhibitor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorFindFirstOrThrowArgs} args - Arguments to find a Exhibitor
     * @example
     * // Get one Exhibitor
     * const exhibitor = await prisma.exhibitor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExhibitorFindFirstOrThrowArgs>(args?: SelectSubset<T, ExhibitorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Exhibitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exhibitors
     * const exhibitors = await prisma.exhibitor.findMany()
     * 
     * // Get first 10 Exhibitors
     * const exhibitors = await prisma.exhibitor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exhibitorWithIdOnly = await prisma.exhibitor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExhibitorFindManyArgs>(args?: SelectSubset<T, ExhibitorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Exhibitor.
     * @param {ExhibitorCreateArgs} args - Arguments to create a Exhibitor.
     * @example
     * // Create one Exhibitor
     * const Exhibitor = await prisma.exhibitor.create({
     *   data: {
     *     // ... data to create a Exhibitor
     *   }
     * })
     * 
     */
    create<T extends ExhibitorCreateArgs>(args: SelectSubset<T, ExhibitorCreateArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Exhibitors.
     * @param {ExhibitorCreateManyArgs} args - Arguments to create many Exhibitors.
     * @example
     * // Create many Exhibitors
     * const exhibitor = await prisma.exhibitor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExhibitorCreateManyArgs>(args?: SelectSubset<T, ExhibitorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exhibitors and returns the data saved in the database.
     * @param {ExhibitorCreateManyAndReturnArgs} args - Arguments to create many Exhibitors.
     * @example
     * // Create many Exhibitors
     * const exhibitor = await prisma.exhibitor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exhibitors and only return the `id`
     * const exhibitorWithIdOnly = await prisma.exhibitor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExhibitorCreateManyAndReturnArgs>(args?: SelectSubset<T, ExhibitorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Exhibitor.
     * @param {ExhibitorDeleteArgs} args - Arguments to delete one Exhibitor.
     * @example
     * // Delete one Exhibitor
     * const Exhibitor = await prisma.exhibitor.delete({
     *   where: {
     *     // ... filter to delete one Exhibitor
     *   }
     * })
     * 
     */
    delete<T extends ExhibitorDeleteArgs>(args: SelectSubset<T, ExhibitorDeleteArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Exhibitor.
     * @param {ExhibitorUpdateArgs} args - Arguments to update one Exhibitor.
     * @example
     * // Update one Exhibitor
     * const exhibitor = await prisma.exhibitor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExhibitorUpdateArgs>(args: SelectSubset<T, ExhibitorUpdateArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Exhibitors.
     * @param {ExhibitorDeleteManyArgs} args - Arguments to filter Exhibitors to delete.
     * @example
     * // Delete a few Exhibitors
     * const { count } = await prisma.exhibitor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExhibitorDeleteManyArgs>(args?: SelectSubset<T, ExhibitorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exhibitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exhibitors
     * const exhibitor = await prisma.exhibitor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExhibitorUpdateManyArgs>(args: SelectSubset<T, ExhibitorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exhibitor.
     * @param {ExhibitorUpsertArgs} args - Arguments to update or create a Exhibitor.
     * @example
     * // Update or create a Exhibitor
     * const exhibitor = await prisma.exhibitor.upsert({
     *   create: {
     *     // ... data to create a Exhibitor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exhibitor we want to update
     *   }
     * })
     */
    upsert<T extends ExhibitorUpsertArgs>(args: SelectSubset<T, ExhibitorUpsertArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Exhibitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorCountArgs} args - Arguments to filter Exhibitors to count.
     * @example
     * // Count the number of Exhibitors
     * const count = await prisma.exhibitor.count({
     *   where: {
     *     // ... the filter for the Exhibitors we want to count
     *   }
     * })
    **/
    count<T extends ExhibitorCountArgs>(
      args?: Subset<T, ExhibitorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExhibitorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exhibitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExhibitorAggregateArgs>(args: Subset<T, ExhibitorAggregateArgs>): Prisma.PrismaPromise<GetExhibitorAggregateType<T>>

    /**
     * Group by Exhibitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExhibitorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExhibitorGroupByArgs['orderBy'] }
        : { orderBy?: ExhibitorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExhibitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExhibitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exhibitor model
   */
  readonly fields: ExhibitorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exhibitor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExhibitorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Exhibitor$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Exhibitor$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    products<T extends Exhibitor$productsArgs<ExtArgs> = {}>(args?: Subset<T, Exhibitor$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    assets<T extends Exhibitor$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Exhibitor$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Exhibitor$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Exhibitor$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Exhibitor$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Exhibitor$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exhibitor model
   */ 
  interface ExhibitorFieldRefs {
    readonly id: FieldRef<"Exhibitor", 'String'>
    readonly name: FieldRef<"Exhibitor", 'String'>
    readonly title: FieldRef<"Exhibitor", 'String'>
    readonly description: FieldRef<"Exhibitor", 'String'>
    readonly website: FieldRef<"Exhibitor", 'String'>
    readonly location: FieldRef<"Exhibitor", 'String'>
    readonly sponsor: FieldRef<"Exhibitor", 'Boolean'>
    readonly favoriteCount: FieldRef<"Exhibitor", 'Int'>
    readonly createdAt: FieldRef<"Exhibitor", 'DateTime'>
    readonly updatedAt: FieldRef<"Exhibitor", 'DateTime'>
    readonly deletedAt: FieldRef<"Exhibitor", 'DateTime'>
    readonly createdById: FieldRef<"Exhibitor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Exhibitor findUnique
   */
  export type ExhibitorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which Exhibitor to fetch.
     */
    where: ExhibitorWhereUniqueInput
  }

  /**
   * Exhibitor findUniqueOrThrow
   */
  export type ExhibitorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which Exhibitor to fetch.
     */
    where: ExhibitorWhereUniqueInput
  }

  /**
   * Exhibitor findFirst
   */
  export type ExhibitorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which Exhibitor to fetch.
     */
    where?: ExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibitors to fetch.
     */
    orderBy?: ExhibitorOrderByWithRelationInput | ExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exhibitors.
     */
    cursor?: ExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exhibitors.
     */
    distinct?: ExhibitorScalarFieldEnum | ExhibitorScalarFieldEnum[]
  }

  /**
   * Exhibitor findFirstOrThrow
   */
  export type ExhibitorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which Exhibitor to fetch.
     */
    where?: ExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibitors to fetch.
     */
    orderBy?: ExhibitorOrderByWithRelationInput | ExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exhibitors.
     */
    cursor?: ExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exhibitors.
     */
    distinct?: ExhibitorScalarFieldEnum | ExhibitorScalarFieldEnum[]
  }

  /**
   * Exhibitor findMany
   */
  export type ExhibitorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which Exhibitors to fetch.
     */
    where?: ExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibitors to fetch.
     */
    orderBy?: ExhibitorOrderByWithRelationInput | ExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exhibitors.
     */
    cursor?: ExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibitors.
     */
    skip?: number
    distinct?: ExhibitorScalarFieldEnum | ExhibitorScalarFieldEnum[]
  }

  /**
   * Exhibitor create
   */
  export type ExhibitorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * The data needed to create a Exhibitor.
     */
    data: XOR<ExhibitorCreateInput, ExhibitorUncheckedCreateInput>
  }

  /**
   * Exhibitor createMany
   */
  export type ExhibitorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exhibitors.
     */
    data: ExhibitorCreateManyInput | ExhibitorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exhibitor createManyAndReturn
   */
  export type ExhibitorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Exhibitors.
     */
    data: ExhibitorCreateManyInput | ExhibitorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exhibitor update
   */
  export type ExhibitorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * The data needed to update a Exhibitor.
     */
    data: XOR<ExhibitorUpdateInput, ExhibitorUncheckedUpdateInput>
    /**
     * Choose, which Exhibitor to update.
     */
    where: ExhibitorWhereUniqueInput
  }

  /**
   * Exhibitor updateMany
   */
  export type ExhibitorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exhibitors.
     */
    data: XOR<ExhibitorUpdateManyMutationInput, ExhibitorUncheckedUpdateManyInput>
    /**
     * Filter which Exhibitors to update
     */
    where?: ExhibitorWhereInput
  }

  /**
   * Exhibitor upsert
   */
  export type ExhibitorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * The filter to search for the Exhibitor to update in case it exists.
     */
    where: ExhibitorWhereUniqueInput
    /**
     * In case the Exhibitor found by the `where` argument doesn't exist, create a new Exhibitor with this data.
     */
    create: XOR<ExhibitorCreateInput, ExhibitorUncheckedCreateInput>
    /**
     * In case the Exhibitor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExhibitorUpdateInput, ExhibitorUncheckedUpdateInput>
  }

  /**
   * Exhibitor delete
   */
  export type ExhibitorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
    /**
     * Filter which Exhibitor to delete.
     */
    where: ExhibitorWhereUniqueInput
  }

  /**
   * Exhibitor deleteMany
   */
  export type ExhibitorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exhibitors to delete
     */
    where?: ExhibitorWhereInput
  }

  /**
   * Exhibitor.createdBy
   */
  export type Exhibitor$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Exhibitor.products
   */
  export type Exhibitor$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Exhibitor.assets
   */
  export type Exhibitor$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    where?: AssetOnExhibitorWhereInput
    orderBy?: AssetOnExhibitorOrderByWithRelationInput | AssetOnExhibitorOrderByWithRelationInput[]
    cursor?: AssetOnExhibitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetOnExhibitorScalarFieldEnum | AssetOnExhibitorScalarFieldEnum[]
  }

  /**
   * Exhibitor.tags
   */
  export type Exhibitor$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    where?: TagOnExhibitorWhereInput
    orderBy?: TagOnExhibitorOrderByWithRelationInput | TagOnExhibitorOrderByWithRelationInput[]
    cursor?: TagOnExhibitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagOnExhibitorScalarFieldEnum | TagOnExhibitorScalarFieldEnum[]
  }

  /**
   * Exhibitor.events
   */
  export type Exhibitor$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Exhibitor without action
   */
  export type ExhibitorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibitor
     */
    select?: ExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitorInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    price: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    exhibitorId: string | null
    categoryId: string | null
    name: string | null
    title: string | null
    description: string | null
    shortDescription: string | null
    price: Decimal | null
    imageUrl: string | null
    inStock: boolean | null
    featured: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    exhibitorId: string | null
    categoryId: string | null
    name: string | null
    title: string | null
    description: string | null
    shortDescription: string | null
    price: Decimal | null
    imageUrl: string | null
    inStock: boolean | null
    featured: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    exhibitorId: number
    categoryId: number
    name: number
    title: number
    description: number
    shortDescription: number
    price: number
    imageUrl: number
    inStock: number
    featured: number
    metadata: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    price?: true
  }

  export type ProductSumAggregateInputType = {
    price?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    exhibitorId?: true
    categoryId?: true
    name?: true
    title?: true
    description?: true
    shortDescription?: true
    price?: true
    imageUrl?: true
    inStock?: true
    featured?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    exhibitorId?: true
    categoryId?: true
    name?: true
    title?: true
    description?: true
    shortDescription?: true
    price?: true
    imageUrl?: true
    inStock?: true
    featured?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    exhibitorId?: true
    categoryId?: true
    name?: true
    title?: true
    description?: true
    shortDescription?: true
    price?: true
    imageUrl?: true
    inStock?: true
    featured?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    exhibitorId: string
    categoryId: string | null
    name: string
    title: string | null
    description: string | null
    shortDescription: string | null
    price: Decimal | null
    imageUrl: string | null
    inStock: boolean
    featured: boolean
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exhibitorId?: boolean
    categoryId?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    shortDescription?: boolean
    price?: boolean
    imageUrl?: boolean
    inStock?: boolean
    featured?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
    category?: boolean | Product$categoryArgs<ExtArgs>
    assets?: boolean | Product$assetsArgs<ExtArgs>
    tags?: boolean | Product$tagsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exhibitorId?: boolean
    categoryId?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    shortDescription?: boolean
    price?: boolean
    imageUrl?: boolean
    inStock?: boolean
    featured?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
    category?: boolean | Product$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    exhibitorId?: boolean
    categoryId?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    shortDescription?: boolean
    price?: boolean
    imageUrl?: boolean
    inStock?: boolean
    featured?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
    category?: boolean | Product$categoryArgs<ExtArgs>
    assets?: boolean | Product$assetsArgs<ExtArgs>
    tags?: boolean | Product$tagsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
    category?: boolean | Product$categoryArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      exhibitor: Prisma.$ExhibitorPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs> | null
      assets: Prisma.$AssetOnProductPayload<ExtArgs>[]
      tags: Prisma.$TagOnProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      exhibitorId: string
      categoryId: string | null
      name: string
      title: string | null
      description: string | null
      shortDescription: string | null
      price: Prisma.Decimal | null
      imageUrl: string | null
      inStock: boolean
      featured: boolean
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exhibitor<T extends ExhibitorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExhibitorDefaultArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends Product$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assets<T extends Product$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Product$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Product$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Product$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly exhibitorId: FieldRef<"Product", 'String'>
    readonly categoryId: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly title: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly shortDescription: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Decimal'>
    readonly imageUrl: FieldRef<"Product", 'String'>
    readonly inStock: FieldRef<"Product", 'Boolean'>
    readonly featured: FieldRef<"Product", 'Boolean'>
    readonly metadata: FieldRef<"Product", 'Json'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly deletedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.category
   */
  export type Product$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Product.assets
   */
  export type Product$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    where?: AssetOnProductWhereInput
    orderBy?: AssetOnProductOrderByWithRelationInput | AssetOnProductOrderByWithRelationInput[]
    cursor?: AssetOnProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetOnProductScalarFieldEnum | AssetOnProductScalarFieldEnum[]
  }

  /**
   * Product.tags
   */
  export type Product$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    where?: TagOnProductWhereInput
    orderBy?: TagOnProductOrderByWithRelationInput | TagOnProductOrderByWithRelationInput[]
    cursor?: TagOnProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagOnProductScalarFieldEnum | TagOnProductScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Attendee
   */

  export type AggregateAttendee = {
    _count: AttendeeCountAggregateOutputType | null
    _min: AttendeeMinAggregateOutputType | null
    _max: AttendeeMaxAggregateOutputType | null
  }

  export type AttendeeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    name: string | null
    email: string | null
    ticketType: string | null
    checkedIn: boolean | null
    createdAt: Date | null
  }

  export type AttendeeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    name: string | null
    email: string | null
    ticketType: string | null
    checkedIn: boolean | null
    createdAt: Date | null
  }

  export type AttendeeCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    name: number
    email: number
    ticketType: number
    checkedIn: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type AttendeeMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    name?: true
    email?: true
    ticketType?: true
    checkedIn?: true
    createdAt?: true
  }

  export type AttendeeMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    name?: true
    email?: true
    ticketType?: true
    checkedIn?: true
    createdAt?: true
  }

  export type AttendeeCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    name?: true
    email?: true
    ticketType?: true
    checkedIn?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type AttendeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendee to aggregate.
     */
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     */
    orderBy?: AttendeeOrderByWithRelationInput | AttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendees
    **/
    _count?: true | AttendeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendeeMaxAggregateInputType
  }

  export type GetAttendeeAggregateType<T extends AttendeeAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendee[P]>
      : GetScalarType<T[P], AggregateAttendee[P]>
  }




  export type AttendeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendeeWhereInput
    orderBy?: AttendeeOrderByWithAggregationInput | AttendeeOrderByWithAggregationInput[]
    by: AttendeeScalarFieldEnum[] | AttendeeScalarFieldEnum
    having?: AttendeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendeeCountAggregateInputType | true
    _min?: AttendeeMinAggregateInputType
    _max?: AttendeeMaxAggregateInputType
  }

  export type AttendeeGroupByOutputType = {
    id: string
    userId: string | null
    eventId: string
    name: string
    email: string
    ticketType: string | null
    checkedIn: boolean
    metadata: JsonValue | null
    createdAt: Date
    _count: AttendeeCountAggregateOutputType | null
    _min: AttendeeMinAggregateOutputType | null
    _max: AttendeeMaxAggregateOutputType | null
  }

  type GetAttendeeGroupByPayload<T extends AttendeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendeeGroupByOutputType[P]>
            : GetScalarType<T[P], AttendeeGroupByOutputType[P]>
        }
      >
    >


  export type AttendeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    ticketType?: boolean
    checkedIn?: boolean
    metadata?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | Attendee$userArgs<ExtArgs>
  }, ExtArgs["result"]["attendee"]>

  export type AttendeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    ticketType?: boolean
    checkedIn?: boolean
    metadata?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | Attendee$userArgs<ExtArgs>
  }, ExtArgs["result"]["attendee"]>

  export type AttendeeSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    name?: boolean
    email?: boolean
    ticketType?: boolean
    checkedIn?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type AttendeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | Attendee$userArgs<ExtArgs>
  }
  export type AttendeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | Attendee$userArgs<ExtArgs>
  }

  export type $AttendeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendee"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      eventId: string
      name: string
      email: string
      ticketType: string | null
      checkedIn: boolean
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["attendee"]>
    composites: {}
  }

  type AttendeeGetPayload<S extends boolean | null | undefined | AttendeeDefaultArgs> = $Result.GetResult<Prisma.$AttendeePayload, S>

  type AttendeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendeeCountAggregateInputType | true
    }

  export interface AttendeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendee'], meta: { name: 'Attendee' } }
    /**
     * Find zero or one Attendee that matches the filter.
     * @param {AttendeeFindUniqueArgs} args - Arguments to find a Attendee
     * @example
     * // Get one Attendee
     * const attendee = await prisma.attendee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendeeFindUniqueArgs>(args: SelectSubset<T, AttendeeFindUniqueArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attendee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttendeeFindUniqueOrThrowArgs} args - Arguments to find a Attendee
     * @example
     * // Get one Attendee
     * const attendee = await prisma.attendee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendeeFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attendee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeFindFirstArgs} args - Arguments to find a Attendee
     * @example
     * // Get one Attendee
     * const attendee = await prisma.attendee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendeeFindFirstArgs>(args?: SelectSubset<T, AttendeeFindFirstArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attendee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeFindFirstOrThrowArgs} args - Arguments to find a Attendee
     * @example
     * // Get one Attendee
     * const attendee = await prisma.attendee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendeeFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendees
     * const attendees = await prisma.attendee.findMany()
     * 
     * // Get first 10 Attendees
     * const attendees = await prisma.attendee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendeeWithIdOnly = await prisma.attendee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendeeFindManyArgs>(args?: SelectSubset<T, AttendeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attendee.
     * @param {AttendeeCreateArgs} args - Arguments to create a Attendee.
     * @example
     * // Create one Attendee
     * const Attendee = await prisma.attendee.create({
     *   data: {
     *     // ... data to create a Attendee
     *   }
     * })
     * 
     */
    create<T extends AttendeeCreateArgs>(args: SelectSubset<T, AttendeeCreateArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attendees.
     * @param {AttendeeCreateManyArgs} args - Arguments to create many Attendees.
     * @example
     * // Create many Attendees
     * const attendee = await prisma.attendee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendeeCreateManyArgs>(args?: SelectSubset<T, AttendeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendees and returns the data saved in the database.
     * @param {AttendeeCreateManyAndReturnArgs} args - Arguments to create many Attendees.
     * @example
     * // Create many Attendees
     * const attendee = await prisma.attendee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendees and only return the `id`
     * const attendeeWithIdOnly = await prisma.attendee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendeeCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Attendee.
     * @param {AttendeeDeleteArgs} args - Arguments to delete one Attendee.
     * @example
     * // Delete one Attendee
     * const Attendee = await prisma.attendee.delete({
     *   where: {
     *     // ... filter to delete one Attendee
     *   }
     * })
     * 
     */
    delete<T extends AttendeeDeleteArgs>(args: SelectSubset<T, AttendeeDeleteArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attendee.
     * @param {AttendeeUpdateArgs} args - Arguments to update one Attendee.
     * @example
     * // Update one Attendee
     * const attendee = await prisma.attendee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendeeUpdateArgs>(args: SelectSubset<T, AttendeeUpdateArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attendees.
     * @param {AttendeeDeleteManyArgs} args - Arguments to filter Attendees to delete.
     * @example
     * // Delete a few Attendees
     * const { count } = await prisma.attendee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendeeDeleteManyArgs>(args?: SelectSubset<T, AttendeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendees
     * const attendee = await prisma.attendee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendeeUpdateManyArgs>(args: SelectSubset<T, AttendeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendee.
     * @param {AttendeeUpsertArgs} args - Arguments to update or create a Attendee.
     * @example
     * // Update or create a Attendee
     * const attendee = await prisma.attendee.upsert({
     *   create: {
     *     // ... data to create a Attendee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendee we want to update
     *   }
     * })
     */
    upsert<T extends AttendeeUpsertArgs>(args: SelectSubset<T, AttendeeUpsertArgs<ExtArgs>>): Prisma__AttendeeClient<$Result.GetResult<Prisma.$AttendeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeCountArgs} args - Arguments to filter Attendees to count.
     * @example
     * // Count the number of Attendees
     * const count = await prisma.attendee.count({
     *   where: {
     *     // ... the filter for the Attendees we want to count
     *   }
     * })
    **/
    count<T extends AttendeeCountArgs>(
      args?: Subset<T, AttendeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendeeAggregateArgs>(args: Subset<T, AttendeeAggregateArgs>): Prisma.PrismaPromise<GetAttendeeAggregateType<T>>

    /**
     * Group by Attendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendeeGroupByArgs['orderBy'] }
        : { orderBy?: AttendeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendee model
   */
  readonly fields: AttendeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Attendee$userArgs<ExtArgs> = {}>(args?: Subset<T, Attendee$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendee model
   */ 
  interface AttendeeFieldRefs {
    readonly id: FieldRef<"Attendee", 'String'>
    readonly userId: FieldRef<"Attendee", 'String'>
    readonly eventId: FieldRef<"Attendee", 'String'>
    readonly name: FieldRef<"Attendee", 'String'>
    readonly email: FieldRef<"Attendee", 'String'>
    readonly ticketType: FieldRef<"Attendee", 'String'>
    readonly checkedIn: FieldRef<"Attendee", 'Boolean'>
    readonly metadata: FieldRef<"Attendee", 'Json'>
    readonly createdAt: FieldRef<"Attendee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attendee findUnique
   */
  export type AttendeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * Filter, which Attendee to fetch.
     */
    where: AttendeeWhereUniqueInput
  }

  /**
   * Attendee findUniqueOrThrow
   */
  export type AttendeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * Filter, which Attendee to fetch.
     */
    where: AttendeeWhereUniqueInput
  }

  /**
   * Attendee findFirst
   */
  export type AttendeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * Filter, which Attendee to fetch.
     */
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     */
    orderBy?: AttendeeOrderByWithRelationInput | AttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendees.
     */
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendees.
     */
    distinct?: AttendeeScalarFieldEnum | AttendeeScalarFieldEnum[]
  }

  /**
   * Attendee findFirstOrThrow
   */
  export type AttendeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * Filter, which Attendee to fetch.
     */
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     */
    orderBy?: AttendeeOrderByWithRelationInput | AttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendees.
     */
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendees.
     */
    distinct?: AttendeeScalarFieldEnum | AttendeeScalarFieldEnum[]
  }

  /**
   * Attendee findMany
   */
  export type AttendeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * Filter, which Attendees to fetch.
     */
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     */
    orderBy?: AttendeeOrderByWithRelationInput | AttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendees.
     */
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     */
    skip?: number
    distinct?: AttendeeScalarFieldEnum | AttendeeScalarFieldEnum[]
  }

  /**
   * Attendee create
   */
  export type AttendeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendee.
     */
    data: XOR<AttendeeCreateInput, AttendeeUncheckedCreateInput>
  }

  /**
   * Attendee createMany
   */
  export type AttendeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendees.
     */
    data: AttendeeCreateManyInput | AttendeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendee createManyAndReturn
   */
  export type AttendeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Attendees.
     */
    data: AttendeeCreateManyInput | AttendeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendee update
   */
  export type AttendeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendee.
     */
    data: XOR<AttendeeUpdateInput, AttendeeUncheckedUpdateInput>
    /**
     * Choose, which Attendee to update.
     */
    where: AttendeeWhereUniqueInput
  }

  /**
   * Attendee updateMany
   */
  export type AttendeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendees.
     */
    data: XOR<AttendeeUpdateManyMutationInput, AttendeeUncheckedUpdateManyInput>
    /**
     * Filter which Attendees to update
     */
    where?: AttendeeWhereInput
  }

  /**
   * Attendee upsert
   */
  export type AttendeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendee to update in case it exists.
     */
    where: AttendeeWhereUniqueInput
    /**
     * In case the Attendee found by the `where` argument doesn't exist, create a new Attendee with this data.
     */
    create: XOR<AttendeeCreateInput, AttendeeUncheckedCreateInput>
    /**
     * In case the Attendee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendeeUpdateInput, AttendeeUncheckedUpdateInput>
  }

  /**
   * Attendee delete
   */
  export type AttendeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
    /**
     * Filter which Attendee to delete.
     */
    where: AttendeeWhereUniqueInput
  }

  /**
   * Attendee deleteMany
   */
  export type AttendeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendees to delete
     */
    where?: AttendeeWhereInput
  }

  /**
   * Attendee.user
   */
  export type Attendee$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Attendee without action
   */
  export type AttendeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendee
     */
    select?: AttendeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendeeInclude<ExtArgs> | null
  }


  /**
   * Model Favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    resourceType: $Enums.ResourceType | null
    resourceId: string | null
    createdAt: Date | null
  }

  export type FavoriteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    resourceType: $Enums.ResourceType | null
    resourceId: string | null
    createdAt: Date | null
  }

  export type FavoriteCountAggregateOutputType = {
    id: number
    userId: number
    resourceType: number
    resourceId: number
    createdAt: number
    _all: number
  }


  export type FavoriteMinAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    resourceId?: true
    createdAt?: true
  }

  export type FavoriteMaxAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    resourceId?: true
    createdAt?: true
  }

  export type FavoriteCountAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    resourceId?: true
    createdAt?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorite to aggregate.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type FavoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithAggregationInput | FavoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: FavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    id: string
    userId: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt: Date
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends FavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    resourceId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    resourceId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectScalar = {
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    resourceId?: boolean
    createdAt?: boolean
  }

  export type FavoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FavoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favorite"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      resourceType: $Enums.ResourceType
      resourceId: string
      createdAt: Date
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }

  type FavoriteGetPayload<S extends boolean | null | undefined | FavoriteDefaultArgs> = $Result.GetResult<Prisma.$FavoritePayload, S>

  type FavoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface FavoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorite'], meta: { name: 'Favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {FavoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteFindUniqueArgs>(args: SelectSubset<T, FavoriteFindUniqueArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Favorite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteFindFirstArgs>(args?: SelectSubset<T, FavoriteFindFirstArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWithIdOnly = await prisma.favorite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteFindManyArgs>(args?: SelectSubset<T, FavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Favorite.
     * @param {FavoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
     */
    create<T extends FavoriteCreateArgs>(args: SelectSubset<T, FavoriteCreateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Favorites.
     * @param {FavoriteCreateManyArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteCreateManyArgs>(args?: SelectSubset<T, FavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorites and returns the data saved in the database.
     * @param {FavoriteCreateManyAndReturnArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Favorite.
     * @param {FavoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
     */
    delete<T extends FavoriteDeleteArgs>(args: SelectSubset<T, FavoriteDeleteArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Favorite.
     * @param {FavoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteUpdateArgs>(args: SelectSubset<T, FavoriteUpdateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Favorites.
     * @param {FavoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteDeleteManyArgs>(args?: SelectSubset<T, FavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteUpdateManyArgs>(args: SelectSubset<T, FavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorite.
     * @param {FavoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteUpsertArgs>(args: SelectSubset<T, FavoriteUpsertArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoriteCountArgs>(
      args?: Subset<T, FavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorite model
   */
  readonly fields: FavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Favorite model
   */ 
  interface FavoriteFieldRefs {
    readonly id: FieldRef<"Favorite", 'String'>
    readonly userId: FieldRef<"Favorite", 'String'>
    readonly resourceType: FieldRef<"Favorite", 'ResourceType'>
    readonly resourceId: FieldRef<"Favorite", 'String'>
    readonly createdAt: FieldRef<"Favorite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Favorite findUnique
   */
  export type FavoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findUniqueOrThrow
   */
  export type FavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findFirst
   */
  export type FavoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findFirstOrThrow
   */
  export type FavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findMany
   */
  export type FavoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite create
   */
  export type FavoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorite.
     */
    data: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
  }

  /**
   * Favorite createMany
   */
  export type FavoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Favorite createManyAndReturn
   */
  export type FavoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite update
   */
  export type FavoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorite.
     */
    data: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
    /**
     * Choose, which Favorite to update.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite updateMany
   */
  export type FavoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
  }

  /**
   * Favorite upsert
   */
  export type FavoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorite to update in case it exists.
     */
    where: FavoriteWhereUniqueInput
    /**
     * In case the Favorite found by the `where` argument doesn't exist, create a new Favorite with this data.
     */
    create: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
    /**
     * In case the Favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
  }

  /**
   * Favorite delete
   */
  export type FavoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter which Favorite to delete.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite deleteMany
   */
  export type FavoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoriteWhereInput
  }

  /**
   * Favorite without action
   */
  export type FavoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    icon: string | null
    color: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    icon: string | null
    color: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    icon: number
    color: number
    message: number
    data: number
    read: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    icon?: true
    color?: true
    message?: true
    read?: true
    createdAt?: true
    expiresAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    icon?: true
    color?: true
    message?: true
    read?: true
    createdAt?: true
    expiresAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    icon?: true
    color?: true
    message?: true
    data?: true
    read?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string | null
    type: string | null
    icon: string | null
    color: string | null
    message: string
    data: JsonValue | null
    read: boolean
    createdAt: Date
    expiresAt: Date | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    icon?: boolean
    color?: boolean
    message?: boolean
    data?: boolean
    read?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    icon?: boolean
    color?: boolean
    message?: boolean
    data?: boolean
    read?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    icon?: boolean
    color?: boolean
    message?: boolean
    data?: boolean
    read?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      type: string | null
      icon: string | null
      color: string | null
      message: string
      data: Prisma.JsonValue | null
      read: boolean
      createdAt: Date
      expiresAt: Date | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Notification$userArgs<ExtArgs> = {}>(args?: Subset<T, Notification$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly icon: FieldRef<"Notification", 'String'>
    readonly color: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.user
   */
  export type Notification$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Asset
   */

  export type AggregateAsset = {
    _count: AssetCountAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  export type AssetMinAggregateOutputType = {
    id: string | null
    url: string | null
    type: string | null
    createdBy: string | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type AssetMaxAggregateOutputType = {
    id: string | null
    url: string | null
    type: string | null
    createdBy: string | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type AssetCountAggregateOutputType = {
    id: number
    url: number
    type: number
    meta: number
    createdBy: number
    createdAt: number
    deletedAt: number
    _all: number
  }


  export type AssetMinAggregateInputType = {
    id?: true
    url?: true
    type?: true
    createdBy?: true
    createdAt?: true
    deletedAt?: true
  }

  export type AssetMaxAggregateInputType = {
    id?: true
    url?: true
    type?: true
    createdBy?: true
    createdAt?: true
    deletedAt?: true
  }

  export type AssetCountAggregateInputType = {
    id?: true
    url?: true
    type?: true
    meta?: true
    createdBy?: true
    createdAt?: true
    deletedAt?: true
    _all?: true
  }

  export type AssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Asset to aggregate.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assets
    **/
    _count?: true | AssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetMaxAggregateInputType
  }

  export type GetAssetAggregateType<T extends AssetAggregateArgs> = {
        [P in keyof T & keyof AggregateAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAsset[P]>
      : GetScalarType<T[P], AggregateAsset[P]>
  }




  export type AssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetWhereInput
    orderBy?: AssetOrderByWithAggregationInput | AssetOrderByWithAggregationInput[]
    by: AssetScalarFieldEnum[] | AssetScalarFieldEnum
    having?: AssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetCountAggregateInputType | true
    _min?: AssetMinAggregateInputType
    _max?: AssetMaxAggregateInputType
  }

  export type AssetGroupByOutputType = {
    id: string
    url: string
    type: string | null
    meta: JsonValue | null
    createdBy: string | null
    createdAt: Date
    deletedAt: Date | null
    _count: AssetCountAggregateOutputType | null
    _min: AssetMinAggregateOutputType | null
    _max: AssetMaxAggregateOutputType | null
  }

  type GetAssetGroupByPayload<T extends AssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetGroupByOutputType[P]>
            : GetScalarType<T[P], AssetGroupByOutputType[P]>
        }
      >
    >


  export type AssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    meta?: boolean
    createdBy?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    productLinks?: boolean | Asset$productLinksArgs<ExtArgs>
    exhibitorLinks?: boolean | Asset$exhibitorLinksArgs<ExtArgs>
    eventLinks?: boolean | Asset$eventLinksArgs<ExtArgs>
    userAvatarLinks?: boolean | Asset$userAvatarLinksArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    meta?: boolean
    createdBy?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["asset"]>

  export type AssetSelectScalar = {
    id?: boolean
    url?: boolean
    type?: boolean
    meta?: boolean
    createdBy?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }

  export type AssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productLinks?: boolean | Asset$productLinksArgs<ExtArgs>
    exhibitorLinks?: boolean | Asset$exhibitorLinksArgs<ExtArgs>
    eventLinks?: boolean | Asset$eventLinksArgs<ExtArgs>
    userAvatarLinks?: boolean | Asset$userAvatarLinksArgs<ExtArgs>
    _count?: boolean | AssetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Asset"
    objects: {
      productLinks: Prisma.$AssetOnProductPayload<ExtArgs>[]
      exhibitorLinks: Prisma.$AssetOnExhibitorPayload<ExtArgs>[]
      eventLinks: Prisma.$AssetOnEventPayload<ExtArgs>[]
      userAvatarLinks: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      type: string | null
      meta: Prisma.JsonValue | null
      createdBy: string | null
      createdAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["asset"]>
    composites: {}
  }

  type AssetGetPayload<S extends boolean | null | undefined | AssetDefaultArgs> = $Result.GetResult<Prisma.$AssetPayload, S>

  type AssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetCountAggregateInputType | true
    }

  export interface AssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Asset'], meta: { name: 'Asset' } }
    /**
     * Find zero or one Asset that matches the filter.
     * @param {AssetFindUniqueArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetFindUniqueArgs>(args: SelectSubset<T, AssetFindUniqueArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Asset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetFindUniqueOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Asset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetFindFirstArgs>(args?: SelectSubset<T, AssetFindFirstArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Asset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindFirstOrThrowArgs} args - Arguments to find a Asset
     * @example
     * // Get one Asset
     * const asset = await prisma.asset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assets
     * const assets = await prisma.asset.findMany()
     * 
     * // Get first 10 Assets
     * const assets = await prisma.asset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetWithIdOnly = await prisma.asset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetFindManyArgs>(args?: SelectSubset<T, AssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Asset.
     * @param {AssetCreateArgs} args - Arguments to create a Asset.
     * @example
     * // Create one Asset
     * const Asset = await prisma.asset.create({
     *   data: {
     *     // ... data to create a Asset
     *   }
     * })
     * 
     */
    create<T extends AssetCreateArgs>(args: SelectSubset<T, AssetCreateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assets.
     * @param {AssetCreateManyArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetCreateManyArgs>(args?: SelectSubset<T, AssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assets and returns the data saved in the database.
     * @param {AssetCreateManyAndReturnArgs} args - Arguments to create many Assets.
     * @example
     * // Create many Assets
     * const asset = await prisma.asset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assets and only return the `id`
     * const assetWithIdOnly = await prisma.asset.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Asset.
     * @param {AssetDeleteArgs} args - Arguments to delete one Asset.
     * @example
     * // Delete one Asset
     * const Asset = await prisma.asset.delete({
     *   where: {
     *     // ... filter to delete one Asset
     *   }
     * })
     * 
     */
    delete<T extends AssetDeleteArgs>(args: SelectSubset<T, AssetDeleteArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Asset.
     * @param {AssetUpdateArgs} args - Arguments to update one Asset.
     * @example
     * // Update one Asset
     * const asset = await prisma.asset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetUpdateArgs>(args: SelectSubset<T, AssetUpdateArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assets.
     * @param {AssetDeleteManyArgs} args - Arguments to filter Assets to delete.
     * @example
     * // Delete a few Assets
     * const { count } = await prisma.asset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetDeleteManyArgs>(args?: SelectSubset<T, AssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assets
     * const asset = await prisma.asset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetUpdateManyArgs>(args: SelectSubset<T, AssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Asset.
     * @param {AssetUpsertArgs} args - Arguments to update or create a Asset.
     * @example
     * // Update or create a Asset
     * const asset = await prisma.asset.upsert({
     *   create: {
     *     // ... data to create a Asset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Asset we want to update
     *   }
     * })
     */
    upsert<T extends AssetUpsertArgs>(args: SelectSubset<T, AssetUpsertArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetCountArgs} args - Arguments to filter Assets to count.
     * @example
     * // Count the number of Assets
     * const count = await prisma.asset.count({
     *   where: {
     *     // ... the filter for the Assets we want to count
     *   }
     * })
    **/
    count<T extends AssetCountArgs>(
      args?: Subset<T, AssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetAggregateArgs>(args: Subset<T, AssetAggregateArgs>): Prisma.PrismaPromise<GetAssetAggregateType<T>>

    /**
     * Group by Asset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetGroupByArgs['orderBy'] }
        : { orderBy?: AssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Asset model
   */
  readonly fields: AssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Asset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productLinks<T extends Asset$productLinksArgs<ExtArgs> = {}>(args?: Subset<T, Asset$productLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findMany"> | Null>
    exhibitorLinks<T extends Asset$exhibitorLinksArgs<ExtArgs> = {}>(args?: Subset<T, Asset$exhibitorLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findMany"> | Null>
    eventLinks<T extends Asset$eventLinksArgs<ExtArgs> = {}>(args?: Subset<T, Asset$eventLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findMany"> | Null>
    userAvatarLinks<T extends Asset$userAvatarLinksArgs<ExtArgs> = {}>(args?: Subset<T, Asset$userAvatarLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Asset model
   */ 
  interface AssetFieldRefs {
    readonly id: FieldRef<"Asset", 'String'>
    readonly url: FieldRef<"Asset", 'String'>
    readonly type: FieldRef<"Asset", 'String'>
    readonly meta: FieldRef<"Asset", 'Json'>
    readonly createdBy: FieldRef<"Asset", 'String'>
    readonly createdAt: FieldRef<"Asset", 'DateTime'>
    readonly deletedAt: FieldRef<"Asset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Asset findUnique
   */
  export type AssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findUniqueOrThrow
   */
  export type AssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset findFirst
   */
  export type AssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findFirstOrThrow
   */
  export type AssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Asset to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assets.
     */
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset findMany
   */
  export type AssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter, which Assets to fetch.
     */
    where?: AssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assets to fetch.
     */
    orderBy?: AssetOrderByWithRelationInput | AssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assets.
     */
    cursor?: AssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assets.
     */
    skip?: number
    distinct?: AssetScalarFieldEnum | AssetScalarFieldEnum[]
  }

  /**
   * Asset create
   */
  export type AssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to create a Asset.
     */
    data: XOR<AssetCreateInput, AssetUncheckedCreateInput>
  }

  /**
   * Asset createMany
   */
  export type AssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset createManyAndReturn
   */
  export type AssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Assets.
     */
    data: AssetCreateManyInput | AssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Asset update
   */
  export type AssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The data needed to update a Asset.
     */
    data: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
    /**
     * Choose, which Asset to update.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset updateMany
   */
  export type AssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assets.
     */
    data: XOR<AssetUpdateManyMutationInput, AssetUncheckedUpdateManyInput>
    /**
     * Filter which Assets to update
     */
    where?: AssetWhereInput
  }

  /**
   * Asset upsert
   */
  export type AssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * The filter to search for the Asset to update in case it exists.
     */
    where: AssetWhereUniqueInput
    /**
     * In case the Asset found by the `where` argument doesn't exist, create a new Asset with this data.
     */
    create: XOR<AssetCreateInput, AssetUncheckedCreateInput>
    /**
     * In case the Asset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetUpdateInput, AssetUncheckedUpdateInput>
  }

  /**
   * Asset delete
   */
  export type AssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
    /**
     * Filter which Asset to delete.
     */
    where: AssetWhereUniqueInput
  }

  /**
   * Asset deleteMany
   */
  export type AssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assets to delete
     */
    where?: AssetWhereInput
  }

  /**
   * Asset.productLinks
   */
  export type Asset$productLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    where?: AssetOnProductWhereInput
    orderBy?: AssetOnProductOrderByWithRelationInput | AssetOnProductOrderByWithRelationInput[]
    cursor?: AssetOnProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetOnProductScalarFieldEnum | AssetOnProductScalarFieldEnum[]
  }

  /**
   * Asset.exhibitorLinks
   */
  export type Asset$exhibitorLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    where?: AssetOnExhibitorWhereInput
    orderBy?: AssetOnExhibitorOrderByWithRelationInput | AssetOnExhibitorOrderByWithRelationInput[]
    cursor?: AssetOnExhibitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetOnExhibitorScalarFieldEnum | AssetOnExhibitorScalarFieldEnum[]
  }

  /**
   * Asset.eventLinks
   */
  export type Asset$eventLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    where?: AssetOnEventWhereInput
    orderBy?: AssetOnEventOrderByWithRelationInput | AssetOnEventOrderByWithRelationInput[]
    cursor?: AssetOnEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssetOnEventScalarFieldEnum | AssetOnEventScalarFieldEnum[]
  }

  /**
   * Asset.userAvatarLinks
   */
  export type Asset$userAvatarLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Asset without action
   */
  export type AssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Asset
     */
    select?: AssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetInclude<ExtArgs> | null
  }


  /**
   * Model AssetOnProduct
   */

  export type AggregateAssetOnProduct = {
    _count: AssetOnProductCountAggregateOutputType | null
    _min: AssetOnProductMinAggregateOutputType | null
    _max: AssetOnProductMaxAggregateOutputType | null
  }

  export type AssetOnProductMinAggregateOutputType = {
    id: string | null
    assetId: string | null
    productId: string | null
    role: string | null
  }

  export type AssetOnProductMaxAggregateOutputType = {
    id: string | null
    assetId: string | null
    productId: string | null
    role: string | null
  }

  export type AssetOnProductCountAggregateOutputType = {
    id: number
    assetId: number
    productId: number
    role: number
    _all: number
  }


  export type AssetOnProductMinAggregateInputType = {
    id?: true
    assetId?: true
    productId?: true
    role?: true
  }

  export type AssetOnProductMaxAggregateInputType = {
    id?: true
    assetId?: true
    productId?: true
    role?: true
  }

  export type AssetOnProductCountAggregateInputType = {
    id?: true
    assetId?: true
    productId?: true
    role?: true
    _all?: true
  }

  export type AssetOnProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetOnProduct to aggregate.
     */
    where?: AssetOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnProducts to fetch.
     */
    orderBy?: AssetOnProductOrderByWithRelationInput | AssetOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetOnProducts
    **/
    _count?: true | AssetOnProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetOnProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetOnProductMaxAggregateInputType
  }

  export type GetAssetOnProductAggregateType<T extends AssetOnProductAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetOnProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetOnProduct[P]>
      : GetScalarType<T[P], AggregateAssetOnProduct[P]>
  }




  export type AssetOnProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnProductWhereInput
    orderBy?: AssetOnProductOrderByWithAggregationInput | AssetOnProductOrderByWithAggregationInput[]
    by: AssetOnProductScalarFieldEnum[] | AssetOnProductScalarFieldEnum
    having?: AssetOnProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetOnProductCountAggregateInputType | true
    _min?: AssetOnProductMinAggregateInputType
    _max?: AssetOnProductMaxAggregateInputType
  }

  export type AssetOnProductGroupByOutputType = {
    id: string
    assetId: string
    productId: string
    role: string | null
    _count: AssetOnProductCountAggregateOutputType | null
    _min: AssetOnProductMinAggregateOutputType | null
    _max: AssetOnProductMaxAggregateOutputType | null
  }

  type GetAssetOnProductGroupByPayload<T extends AssetOnProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetOnProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetOnProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetOnProductGroupByOutputType[P]>
            : GetScalarType<T[P], AssetOnProductGroupByOutputType[P]>
        }
      >
    >


  export type AssetOnProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    productId?: boolean
    role?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetOnProduct"]>

  export type AssetOnProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    productId?: boolean
    role?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetOnProduct"]>

  export type AssetOnProductSelectScalar = {
    id?: boolean
    assetId?: boolean
    productId?: boolean
    role?: boolean
  }

  export type AssetOnProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type AssetOnProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $AssetOnProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetOnProduct"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetId: string
      productId: string
      role: string | null
    }, ExtArgs["result"]["assetOnProduct"]>
    composites: {}
  }

  type AssetOnProductGetPayload<S extends boolean | null | undefined | AssetOnProductDefaultArgs> = $Result.GetResult<Prisma.$AssetOnProductPayload, S>

  type AssetOnProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetOnProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetOnProductCountAggregateInputType | true
    }

  export interface AssetOnProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetOnProduct'], meta: { name: 'AssetOnProduct' } }
    /**
     * Find zero or one AssetOnProduct that matches the filter.
     * @param {AssetOnProductFindUniqueArgs} args - Arguments to find a AssetOnProduct
     * @example
     * // Get one AssetOnProduct
     * const assetOnProduct = await prisma.assetOnProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetOnProductFindUniqueArgs>(args: SelectSubset<T, AssetOnProductFindUniqueArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssetOnProduct that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetOnProductFindUniqueOrThrowArgs} args - Arguments to find a AssetOnProduct
     * @example
     * // Get one AssetOnProduct
     * const assetOnProduct = await prisma.assetOnProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetOnProductFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetOnProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssetOnProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductFindFirstArgs} args - Arguments to find a AssetOnProduct
     * @example
     * // Get one AssetOnProduct
     * const assetOnProduct = await prisma.assetOnProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetOnProductFindFirstArgs>(args?: SelectSubset<T, AssetOnProductFindFirstArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssetOnProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductFindFirstOrThrowArgs} args - Arguments to find a AssetOnProduct
     * @example
     * // Get one AssetOnProduct
     * const assetOnProduct = await prisma.assetOnProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetOnProductFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetOnProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssetOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetOnProducts
     * const assetOnProducts = await prisma.assetOnProduct.findMany()
     * 
     * // Get first 10 AssetOnProducts
     * const assetOnProducts = await prisma.assetOnProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetOnProductWithIdOnly = await prisma.assetOnProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetOnProductFindManyArgs>(args?: SelectSubset<T, AssetOnProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssetOnProduct.
     * @param {AssetOnProductCreateArgs} args - Arguments to create a AssetOnProduct.
     * @example
     * // Create one AssetOnProduct
     * const AssetOnProduct = await prisma.assetOnProduct.create({
     *   data: {
     *     // ... data to create a AssetOnProduct
     *   }
     * })
     * 
     */
    create<T extends AssetOnProductCreateArgs>(args: SelectSubset<T, AssetOnProductCreateArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssetOnProducts.
     * @param {AssetOnProductCreateManyArgs} args - Arguments to create many AssetOnProducts.
     * @example
     * // Create many AssetOnProducts
     * const assetOnProduct = await prisma.assetOnProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetOnProductCreateManyArgs>(args?: SelectSubset<T, AssetOnProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetOnProducts and returns the data saved in the database.
     * @param {AssetOnProductCreateManyAndReturnArgs} args - Arguments to create many AssetOnProducts.
     * @example
     * // Create many AssetOnProducts
     * const assetOnProduct = await prisma.assetOnProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetOnProducts and only return the `id`
     * const assetOnProductWithIdOnly = await prisma.assetOnProduct.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetOnProductCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetOnProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssetOnProduct.
     * @param {AssetOnProductDeleteArgs} args - Arguments to delete one AssetOnProduct.
     * @example
     * // Delete one AssetOnProduct
     * const AssetOnProduct = await prisma.assetOnProduct.delete({
     *   where: {
     *     // ... filter to delete one AssetOnProduct
     *   }
     * })
     * 
     */
    delete<T extends AssetOnProductDeleteArgs>(args: SelectSubset<T, AssetOnProductDeleteArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssetOnProduct.
     * @param {AssetOnProductUpdateArgs} args - Arguments to update one AssetOnProduct.
     * @example
     * // Update one AssetOnProduct
     * const assetOnProduct = await prisma.assetOnProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetOnProductUpdateArgs>(args: SelectSubset<T, AssetOnProductUpdateArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssetOnProducts.
     * @param {AssetOnProductDeleteManyArgs} args - Arguments to filter AssetOnProducts to delete.
     * @example
     * // Delete a few AssetOnProducts
     * const { count } = await prisma.assetOnProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetOnProductDeleteManyArgs>(args?: SelectSubset<T, AssetOnProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetOnProducts
     * const assetOnProduct = await prisma.assetOnProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetOnProductUpdateManyArgs>(args: SelectSubset<T, AssetOnProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssetOnProduct.
     * @param {AssetOnProductUpsertArgs} args - Arguments to update or create a AssetOnProduct.
     * @example
     * // Update or create a AssetOnProduct
     * const assetOnProduct = await prisma.assetOnProduct.upsert({
     *   create: {
     *     // ... data to create a AssetOnProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetOnProduct we want to update
     *   }
     * })
     */
    upsert<T extends AssetOnProductUpsertArgs>(args: SelectSubset<T, AssetOnProductUpsertArgs<ExtArgs>>): Prisma__AssetOnProductClient<$Result.GetResult<Prisma.$AssetOnProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssetOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductCountArgs} args - Arguments to filter AssetOnProducts to count.
     * @example
     * // Count the number of AssetOnProducts
     * const count = await prisma.assetOnProduct.count({
     *   where: {
     *     // ... the filter for the AssetOnProducts we want to count
     *   }
     * })
    **/
    count<T extends AssetOnProductCountArgs>(
      args?: Subset<T, AssetOnProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetOnProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetOnProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetOnProductAggregateArgs>(args: Subset<T, AssetOnProductAggregateArgs>): Prisma.PrismaPromise<GetAssetOnProductAggregateType<T>>

    /**
     * Group by AssetOnProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetOnProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetOnProductGroupByArgs['orderBy'] }
        : { orderBy?: AssetOnProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetOnProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetOnProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetOnProduct model
   */
  readonly fields: AssetOnProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetOnProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetOnProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetOnProduct model
   */ 
  interface AssetOnProductFieldRefs {
    readonly id: FieldRef<"AssetOnProduct", 'String'>
    readonly assetId: FieldRef<"AssetOnProduct", 'String'>
    readonly productId: FieldRef<"AssetOnProduct", 'String'>
    readonly role: FieldRef<"AssetOnProduct", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AssetOnProduct findUnique
   */
  export type AssetOnProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnProduct to fetch.
     */
    where: AssetOnProductWhereUniqueInput
  }

  /**
   * AssetOnProduct findUniqueOrThrow
   */
  export type AssetOnProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnProduct to fetch.
     */
    where: AssetOnProductWhereUniqueInput
  }

  /**
   * AssetOnProduct findFirst
   */
  export type AssetOnProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnProduct to fetch.
     */
    where?: AssetOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnProducts to fetch.
     */
    orderBy?: AssetOnProductOrderByWithRelationInput | AssetOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetOnProducts.
     */
    cursor?: AssetOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetOnProducts.
     */
    distinct?: AssetOnProductScalarFieldEnum | AssetOnProductScalarFieldEnum[]
  }

  /**
   * AssetOnProduct findFirstOrThrow
   */
  export type AssetOnProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnProduct to fetch.
     */
    where?: AssetOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnProducts to fetch.
     */
    orderBy?: AssetOnProductOrderByWithRelationInput | AssetOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetOnProducts.
     */
    cursor?: AssetOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetOnProducts.
     */
    distinct?: AssetOnProductScalarFieldEnum | AssetOnProductScalarFieldEnum[]
  }

  /**
   * AssetOnProduct findMany
   */
  export type AssetOnProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnProducts to fetch.
     */
    where?: AssetOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnProducts to fetch.
     */
    orderBy?: AssetOnProductOrderByWithRelationInput | AssetOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetOnProducts.
     */
    cursor?: AssetOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnProducts.
     */
    skip?: number
    distinct?: AssetOnProductScalarFieldEnum | AssetOnProductScalarFieldEnum[]
  }

  /**
   * AssetOnProduct create
   */
  export type AssetOnProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetOnProduct.
     */
    data: XOR<AssetOnProductCreateInput, AssetOnProductUncheckedCreateInput>
  }

  /**
   * AssetOnProduct createMany
   */
  export type AssetOnProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetOnProducts.
     */
    data: AssetOnProductCreateManyInput | AssetOnProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetOnProduct createManyAndReturn
   */
  export type AssetOnProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssetOnProducts.
     */
    data: AssetOnProductCreateManyInput | AssetOnProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetOnProduct update
   */
  export type AssetOnProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetOnProduct.
     */
    data: XOR<AssetOnProductUpdateInput, AssetOnProductUncheckedUpdateInput>
    /**
     * Choose, which AssetOnProduct to update.
     */
    where: AssetOnProductWhereUniqueInput
  }

  /**
   * AssetOnProduct updateMany
   */
  export type AssetOnProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetOnProducts.
     */
    data: XOR<AssetOnProductUpdateManyMutationInput, AssetOnProductUncheckedUpdateManyInput>
    /**
     * Filter which AssetOnProducts to update
     */
    where?: AssetOnProductWhereInput
  }

  /**
   * AssetOnProduct upsert
   */
  export type AssetOnProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetOnProduct to update in case it exists.
     */
    where: AssetOnProductWhereUniqueInput
    /**
     * In case the AssetOnProduct found by the `where` argument doesn't exist, create a new AssetOnProduct with this data.
     */
    create: XOR<AssetOnProductCreateInput, AssetOnProductUncheckedCreateInput>
    /**
     * In case the AssetOnProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetOnProductUpdateInput, AssetOnProductUncheckedUpdateInput>
  }

  /**
   * AssetOnProduct delete
   */
  export type AssetOnProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
    /**
     * Filter which AssetOnProduct to delete.
     */
    where: AssetOnProductWhereUniqueInput
  }

  /**
   * AssetOnProduct deleteMany
   */
  export type AssetOnProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetOnProducts to delete
     */
    where?: AssetOnProductWhereInput
  }

  /**
   * AssetOnProduct without action
   */
  export type AssetOnProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnProduct
     */
    select?: AssetOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnProductInclude<ExtArgs> | null
  }


  /**
   * Model AssetOnExhibitor
   */

  export type AggregateAssetOnExhibitor = {
    _count: AssetOnExhibitorCountAggregateOutputType | null
    _min: AssetOnExhibitorMinAggregateOutputType | null
    _max: AssetOnExhibitorMaxAggregateOutputType | null
  }

  export type AssetOnExhibitorMinAggregateOutputType = {
    id: string | null
    assetId: string | null
    exhibitorId: string | null
    role: string | null
  }

  export type AssetOnExhibitorMaxAggregateOutputType = {
    id: string | null
    assetId: string | null
    exhibitorId: string | null
    role: string | null
  }

  export type AssetOnExhibitorCountAggregateOutputType = {
    id: number
    assetId: number
    exhibitorId: number
    role: number
    _all: number
  }


  export type AssetOnExhibitorMinAggregateInputType = {
    id?: true
    assetId?: true
    exhibitorId?: true
    role?: true
  }

  export type AssetOnExhibitorMaxAggregateInputType = {
    id?: true
    assetId?: true
    exhibitorId?: true
    role?: true
  }

  export type AssetOnExhibitorCountAggregateInputType = {
    id?: true
    assetId?: true
    exhibitorId?: true
    role?: true
    _all?: true
  }

  export type AssetOnExhibitorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetOnExhibitor to aggregate.
     */
    where?: AssetOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnExhibitors to fetch.
     */
    orderBy?: AssetOnExhibitorOrderByWithRelationInput | AssetOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnExhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetOnExhibitors
    **/
    _count?: true | AssetOnExhibitorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetOnExhibitorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetOnExhibitorMaxAggregateInputType
  }

  export type GetAssetOnExhibitorAggregateType<T extends AssetOnExhibitorAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetOnExhibitor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetOnExhibitor[P]>
      : GetScalarType<T[P], AggregateAssetOnExhibitor[P]>
  }




  export type AssetOnExhibitorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnExhibitorWhereInput
    orderBy?: AssetOnExhibitorOrderByWithAggregationInput | AssetOnExhibitorOrderByWithAggregationInput[]
    by: AssetOnExhibitorScalarFieldEnum[] | AssetOnExhibitorScalarFieldEnum
    having?: AssetOnExhibitorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetOnExhibitorCountAggregateInputType | true
    _min?: AssetOnExhibitorMinAggregateInputType
    _max?: AssetOnExhibitorMaxAggregateInputType
  }

  export type AssetOnExhibitorGroupByOutputType = {
    id: string
    assetId: string
    exhibitorId: string
    role: string | null
    _count: AssetOnExhibitorCountAggregateOutputType | null
    _min: AssetOnExhibitorMinAggregateOutputType | null
    _max: AssetOnExhibitorMaxAggregateOutputType | null
  }

  type GetAssetOnExhibitorGroupByPayload<T extends AssetOnExhibitorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetOnExhibitorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetOnExhibitorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetOnExhibitorGroupByOutputType[P]>
            : GetScalarType<T[P], AssetOnExhibitorGroupByOutputType[P]>
        }
      >
    >


  export type AssetOnExhibitorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    exhibitorId?: boolean
    role?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetOnExhibitor"]>

  export type AssetOnExhibitorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    exhibitorId?: boolean
    role?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetOnExhibitor"]>

  export type AssetOnExhibitorSelectScalar = {
    id?: boolean
    assetId?: boolean
    exhibitorId?: boolean
    role?: boolean
  }

  export type AssetOnExhibitorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }
  export type AssetOnExhibitorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }

  export type $AssetOnExhibitorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetOnExhibitor"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      exhibitor: Prisma.$ExhibitorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetId: string
      exhibitorId: string
      role: string | null
    }, ExtArgs["result"]["assetOnExhibitor"]>
    composites: {}
  }

  type AssetOnExhibitorGetPayload<S extends boolean | null | undefined | AssetOnExhibitorDefaultArgs> = $Result.GetResult<Prisma.$AssetOnExhibitorPayload, S>

  type AssetOnExhibitorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetOnExhibitorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetOnExhibitorCountAggregateInputType | true
    }

  export interface AssetOnExhibitorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetOnExhibitor'], meta: { name: 'AssetOnExhibitor' } }
    /**
     * Find zero or one AssetOnExhibitor that matches the filter.
     * @param {AssetOnExhibitorFindUniqueArgs} args - Arguments to find a AssetOnExhibitor
     * @example
     * // Get one AssetOnExhibitor
     * const assetOnExhibitor = await prisma.assetOnExhibitor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetOnExhibitorFindUniqueArgs>(args: SelectSubset<T, AssetOnExhibitorFindUniqueArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssetOnExhibitor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetOnExhibitorFindUniqueOrThrowArgs} args - Arguments to find a AssetOnExhibitor
     * @example
     * // Get one AssetOnExhibitor
     * const assetOnExhibitor = await prisma.assetOnExhibitor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetOnExhibitorFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetOnExhibitorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssetOnExhibitor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorFindFirstArgs} args - Arguments to find a AssetOnExhibitor
     * @example
     * // Get one AssetOnExhibitor
     * const assetOnExhibitor = await prisma.assetOnExhibitor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetOnExhibitorFindFirstArgs>(args?: SelectSubset<T, AssetOnExhibitorFindFirstArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssetOnExhibitor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorFindFirstOrThrowArgs} args - Arguments to find a AssetOnExhibitor
     * @example
     * // Get one AssetOnExhibitor
     * const assetOnExhibitor = await prisma.assetOnExhibitor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetOnExhibitorFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetOnExhibitorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssetOnExhibitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetOnExhibitors
     * const assetOnExhibitors = await prisma.assetOnExhibitor.findMany()
     * 
     * // Get first 10 AssetOnExhibitors
     * const assetOnExhibitors = await prisma.assetOnExhibitor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetOnExhibitorWithIdOnly = await prisma.assetOnExhibitor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetOnExhibitorFindManyArgs>(args?: SelectSubset<T, AssetOnExhibitorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssetOnExhibitor.
     * @param {AssetOnExhibitorCreateArgs} args - Arguments to create a AssetOnExhibitor.
     * @example
     * // Create one AssetOnExhibitor
     * const AssetOnExhibitor = await prisma.assetOnExhibitor.create({
     *   data: {
     *     // ... data to create a AssetOnExhibitor
     *   }
     * })
     * 
     */
    create<T extends AssetOnExhibitorCreateArgs>(args: SelectSubset<T, AssetOnExhibitorCreateArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssetOnExhibitors.
     * @param {AssetOnExhibitorCreateManyArgs} args - Arguments to create many AssetOnExhibitors.
     * @example
     * // Create many AssetOnExhibitors
     * const assetOnExhibitor = await prisma.assetOnExhibitor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetOnExhibitorCreateManyArgs>(args?: SelectSubset<T, AssetOnExhibitorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetOnExhibitors and returns the data saved in the database.
     * @param {AssetOnExhibitorCreateManyAndReturnArgs} args - Arguments to create many AssetOnExhibitors.
     * @example
     * // Create many AssetOnExhibitors
     * const assetOnExhibitor = await prisma.assetOnExhibitor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetOnExhibitors and only return the `id`
     * const assetOnExhibitorWithIdOnly = await prisma.assetOnExhibitor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetOnExhibitorCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetOnExhibitorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssetOnExhibitor.
     * @param {AssetOnExhibitorDeleteArgs} args - Arguments to delete one AssetOnExhibitor.
     * @example
     * // Delete one AssetOnExhibitor
     * const AssetOnExhibitor = await prisma.assetOnExhibitor.delete({
     *   where: {
     *     // ... filter to delete one AssetOnExhibitor
     *   }
     * })
     * 
     */
    delete<T extends AssetOnExhibitorDeleteArgs>(args: SelectSubset<T, AssetOnExhibitorDeleteArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssetOnExhibitor.
     * @param {AssetOnExhibitorUpdateArgs} args - Arguments to update one AssetOnExhibitor.
     * @example
     * // Update one AssetOnExhibitor
     * const assetOnExhibitor = await prisma.assetOnExhibitor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetOnExhibitorUpdateArgs>(args: SelectSubset<T, AssetOnExhibitorUpdateArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssetOnExhibitors.
     * @param {AssetOnExhibitorDeleteManyArgs} args - Arguments to filter AssetOnExhibitors to delete.
     * @example
     * // Delete a few AssetOnExhibitors
     * const { count } = await prisma.assetOnExhibitor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetOnExhibitorDeleteManyArgs>(args?: SelectSubset<T, AssetOnExhibitorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetOnExhibitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetOnExhibitors
     * const assetOnExhibitor = await prisma.assetOnExhibitor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetOnExhibitorUpdateManyArgs>(args: SelectSubset<T, AssetOnExhibitorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssetOnExhibitor.
     * @param {AssetOnExhibitorUpsertArgs} args - Arguments to update or create a AssetOnExhibitor.
     * @example
     * // Update or create a AssetOnExhibitor
     * const assetOnExhibitor = await prisma.assetOnExhibitor.upsert({
     *   create: {
     *     // ... data to create a AssetOnExhibitor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetOnExhibitor we want to update
     *   }
     * })
     */
    upsert<T extends AssetOnExhibitorUpsertArgs>(args: SelectSubset<T, AssetOnExhibitorUpsertArgs<ExtArgs>>): Prisma__AssetOnExhibitorClient<$Result.GetResult<Prisma.$AssetOnExhibitorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssetOnExhibitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorCountArgs} args - Arguments to filter AssetOnExhibitors to count.
     * @example
     * // Count the number of AssetOnExhibitors
     * const count = await prisma.assetOnExhibitor.count({
     *   where: {
     *     // ... the filter for the AssetOnExhibitors we want to count
     *   }
     * })
    **/
    count<T extends AssetOnExhibitorCountArgs>(
      args?: Subset<T, AssetOnExhibitorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetOnExhibitorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetOnExhibitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetOnExhibitorAggregateArgs>(args: Subset<T, AssetOnExhibitorAggregateArgs>): Prisma.PrismaPromise<GetAssetOnExhibitorAggregateType<T>>

    /**
     * Group by AssetOnExhibitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnExhibitorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetOnExhibitorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetOnExhibitorGroupByArgs['orderBy'] }
        : { orderBy?: AssetOnExhibitorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetOnExhibitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetOnExhibitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetOnExhibitor model
   */
  readonly fields: AssetOnExhibitorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetOnExhibitor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetOnExhibitorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    exhibitor<T extends ExhibitorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExhibitorDefaultArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetOnExhibitor model
   */ 
  interface AssetOnExhibitorFieldRefs {
    readonly id: FieldRef<"AssetOnExhibitor", 'String'>
    readonly assetId: FieldRef<"AssetOnExhibitor", 'String'>
    readonly exhibitorId: FieldRef<"AssetOnExhibitor", 'String'>
    readonly role: FieldRef<"AssetOnExhibitor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AssetOnExhibitor findUnique
   */
  export type AssetOnExhibitorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnExhibitor to fetch.
     */
    where: AssetOnExhibitorWhereUniqueInput
  }

  /**
   * AssetOnExhibitor findUniqueOrThrow
   */
  export type AssetOnExhibitorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnExhibitor to fetch.
     */
    where: AssetOnExhibitorWhereUniqueInput
  }

  /**
   * AssetOnExhibitor findFirst
   */
  export type AssetOnExhibitorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnExhibitor to fetch.
     */
    where?: AssetOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnExhibitors to fetch.
     */
    orderBy?: AssetOnExhibitorOrderByWithRelationInput | AssetOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetOnExhibitors.
     */
    cursor?: AssetOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnExhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetOnExhibitors.
     */
    distinct?: AssetOnExhibitorScalarFieldEnum | AssetOnExhibitorScalarFieldEnum[]
  }

  /**
   * AssetOnExhibitor findFirstOrThrow
   */
  export type AssetOnExhibitorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnExhibitor to fetch.
     */
    where?: AssetOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnExhibitors to fetch.
     */
    orderBy?: AssetOnExhibitorOrderByWithRelationInput | AssetOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetOnExhibitors.
     */
    cursor?: AssetOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnExhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetOnExhibitors.
     */
    distinct?: AssetOnExhibitorScalarFieldEnum | AssetOnExhibitorScalarFieldEnum[]
  }

  /**
   * AssetOnExhibitor findMany
   */
  export type AssetOnExhibitorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnExhibitors to fetch.
     */
    where?: AssetOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnExhibitors to fetch.
     */
    orderBy?: AssetOnExhibitorOrderByWithRelationInput | AssetOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetOnExhibitors.
     */
    cursor?: AssetOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnExhibitors.
     */
    skip?: number
    distinct?: AssetOnExhibitorScalarFieldEnum | AssetOnExhibitorScalarFieldEnum[]
  }

  /**
   * AssetOnExhibitor create
   */
  export type AssetOnExhibitorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetOnExhibitor.
     */
    data: XOR<AssetOnExhibitorCreateInput, AssetOnExhibitorUncheckedCreateInput>
  }

  /**
   * AssetOnExhibitor createMany
   */
  export type AssetOnExhibitorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetOnExhibitors.
     */
    data: AssetOnExhibitorCreateManyInput | AssetOnExhibitorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetOnExhibitor createManyAndReturn
   */
  export type AssetOnExhibitorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssetOnExhibitors.
     */
    data: AssetOnExhibitorCreateManyInput | AssetOnExhibitorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetOnExhibitor update
   */
  export type AssetOnExhibitorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetOnExhibitor.
     */
    data: XOR<AssetOnExhibitorUpdateInput, AssetOnExhibitorUncheckedUpdateInput>
    /**
     * Choose, which AssetOnExhibitor to update.
     */
    where: AssetOnExhibitorWhereUniqueInput
  }

  /**
   * AssetOnExhibitor updateMany
   */
  export type AssetOnExhibitorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetOnExhibitors.
     */
    data: XOR<AssetOnExhibitorUpdateManyMutationInput, AssetOnExhibitorUncheckedUpdateManyInput>
    /**
     * Filter which AssetOnExhibitors to update
     */
    where?: AssetOnExhibitorWhereInput
  }

  /**
   * AssetOnExhibitor upsert
   */
  export type AssetOnExhibitorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetOnExhibitor to update in case it exists.
     */
    where: AssetOnExhibitorWhereUniqueInput
    /**
     * In case the AssetOnExhibitor found by the `where` argument doesn't exist, create a new AssetOnExhibitor with this data.
     */
    create: XOR<AssetOnExhibitorCreateInput, AssetOnExhibitorUncheckedCreateInput>
    /**
     * In case the AssetOnExhibitor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetOnExhibitorUpdateInput, AssetOnExhibitorUncheckedUpdateInput>
  }

  /**
   * AssetOnExhibitor delete
   */
  export type AssetOnExhibitorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter which AssetOnExhibitor to delete.
     */
    where: AssetOnExhibitorWhereUniqueInput
  }

  /**
   * AssetOnExhibitor deleteMany
   */
  export type AssetOnExhibitorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetOnExhibitors to delete
     */
    where?: AssetOnExhibitorWhereInput
  }

  /**
   * AssetOnExhibitor without action
   */
  export type AssetOnExhibitorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnExhibitor
     */
    select?: AssetOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnExhibitorInclude<ExtArgs> | null
  }


  /**
   * Model AssetOnEvent
   */

  export type AggregateAssetOnEvent = {
    _count: AssetOnEventCountAggregateOutputType | null
    _min: AssetOnEventMinAggregateOutputType | null
    _max: AssetOnEventMaxAggregateOutputType | null
  }

  export type AssetOnEventMinAggregateOutputType = {
    id: string | null
    assetId: string | null
    eventId: string | null
    role: string | null
  }

  export type AssetOnEventMaxAggregateOutputType = {
    id: string | null
    assetId: string | null
    eventId: string | null
    role: string | null
  }

  export type AssetOnEventCountAggregateOutputType = {
    id: number
    assetId: number
    eventId: number
    role: number
    _all: number
  }


  export type AssetOnEventMinAggregateInputType = {
    id?: true
    assetId?: true
    eventId?: true
    role?: true
  }

  export type AssetOnEventMaxAggregateInputType = {
    id?: true
    assetId?: true
    eventId?: true
    role?: true
  }

  export type AssetOnEventCountAggregateInputType = {
    id?: true
    assetId?: true
    eventId?: true
    role?: true
    _all?: true
  }

  export type AssetOnEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetOnEvent to aggregate.
     */
    where?: AssetOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnEvents to fetch.
     */
    orderBy?: AssetOnEventOrderByWithRelationInput | AssetOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssetOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssetOnEvents
    **/
    _count?: true | AssetOnEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssetOnEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssetOnEventMaxAggregateInputType
  }

  export type GetAssetOnEventAggregateType<T extends AssetOnEventAggregateArgs> = {
        [P in keyof T & keyof AggregateAssetOnEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssetOnEvent[P]>
      : GetScalarType<T[P], AggregateAssetOnEvent[P]>
  }




  export type AssetOnEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssetOnEventWhereInput
    orderBy?: AssetOnEventOrderByWithAggregationInput | AssetOnEventOrderByWithAggregationInput[]
    by: AssetOnEventScalarFieldEnum[] | AssetOnEventScalarFieldEnum
    having?: AssetOnEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssetOnEventCountAggregateInputType | true
    _min?: AssetOnEventMinAggregateInputType
    _max?: AssetOnEventMaxAggregateInputType
  }

  export type AssetOnEventGroupByOutputType = {
    id: string
    assetId: string
    eventId: string
    role: string | null
    _count: AssetOnEventCountAggregateOutputType | null
    _min: AssetOnEventMinAggregateOutputType | null
    _max: AssetOnEventMaxAggregateOutputType | null
  }

  type GetAssetOnEventGroupByPayload<T extends AssetOnEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssetOnEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssetOnEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssetOnEventGroupByOutputType[P]>
            : GetScalarType<T[P], AssetOnEventGroupByOutputType[P]>
        }
      >
    >


  export type AssetOnEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    eventId?: boolean
    role?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetOnEvent"]>

  export type AssetOnEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetId?: boolean
    eventId?: boolean
    role?: boolean
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assetOnEvent"]>

  export type AssetOnEventSelectScalar = {
    id?: boolean
    assetId?: boolean
    eventId?: boolean
    role?: boolean
  }

  export type AssetOnEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type AssetOnEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asset?: boolean | AssetDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $AssetOnEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssetOnEvent"
    objects: {
      asset: Prisma.$AssetPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetId: string
      eventId: string
      role: string | null
    }, ExtArgs["result"]["assetOnEvent"]>
    composites: {}
  }

  type AssetOnEventGetPayload<S extends boolean | null | undefined | AssetOnEventDefaultArgs> = $Result.GetResult<Prisma.$AssetOnEventPayload, S>

  type AssetOnEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssetOnEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssetOnEventCountAggregateInputType | true
    }

  export interface AssetOnEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetOnEvent'], meta: { name: 'AssetOnEvent' } }
    /**
     * Find zero or one AssetOnEvent that matches the filter.
     * @param {AssetOnEventFindUniqueArgs} args - Arguments to find a AssetOnEvent
     * @example
     * // Get one AssetOnEvent
     * const assetOnEvent = await prisma.assetOnEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssetOnEventFindUniqueArgs>(args: SelectSubset<T, AssetOnEventFindUniqueArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssetOnEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssetOnEventFindUniqueOrThrowArgs} args - Arguments to find a AssetOnEvent
     * @example
     * // Get one AssetOnEvent
     * const assetOnEvent = await prisma.assetOnEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssetOnEventFindUniqueOrThrowArgs>(args: SelectSubset<T, AssetOnEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssetOnEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventFindFirstArgs} args - Arguments to find a AssetOnEvent
     * @example
     * // Get one AssetOnEvent
     * const assetOnEvent = await prisma.assetOnEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssetOnEventFindFirstArgs>(args?: SelectSubset<T, AssetOnEventFindFirstArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssetOnEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventFindFirstOrThrowArgs} args - Arguments to find a AssetOnEvent
     * @example
     * // Get one AssetOnEvent
     * const assetOnEvent = await prisma.assetOnEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssetOnEventFindFirstOrThrowArgs>(args?: SelectSubset<T, AssetOnEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssetOnEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssetOnEvents
     * const assetOnEvents = await prisma.assetOnEvent.findMany()
     * 
     * // Get first 10 AssetOnEvents
     * const assetOnEvents = await prisma.assetOnEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assetOnEventWithIdOnly = await prisma.assetOnEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssetOnEventFindManyArgs>(args?: SelectSubset<T, AssetOnEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssetOnEvent.
     * @param {AssetOnEventCreateArgs} args - Arguments to create a AssetOnEvent.
     * @example
     * // Create one AssetOnEvent
     * const AssetOnEvent = await prisma.assetOnEvent.create({
     *   data: {
     *     // ... data to create a AssetOnEvent
     *   }
     * })
     * 
     */
    create<T extends AssetOnEventCreateArgs>(args: SelectSubset<T, AssetOnEventCreateArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssetOnEvents.
     * @param {AssetOnEventCreateManyArgs} args - Arguments to create many AssetOnEvents.
     * @example
     * // Create many AssetOnEvents
     * const assetOnEvent = await prisma.assetOnEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssetOnEventCreateManyArgs>(args?: SelectSubset<T, AssetOnEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssetOnEvents and returns the data saved in the database.
     * @param {AssetOnEventCreateManyAndReturnArgs} args - Arguments to create many AssetOnEvents.
     * @example
     * // Create many AssetOnEvents
     * const assetOnEvent = await prisma.assetOnEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssetOnEvents and only return the `id`
     * const assetOnEventWithIdOnly = await prisma.assetOnEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssetOnEventCreateManyAndReturnArgs>(args?: SelectSubset<T, AssetOnEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssetOnEvent.
     * @param {AssetOnEventDeleteArgs} args - Arguments to delete one AssetOnEvent.
     * @example
     * // Delete one AssetOnEvent
     * const AssetOnEvent = await prisma.assetOnEvent.delete({
     *   where: {
     *     // ... filter to delete one AssetOnEvent
     *   }
     * })
     * 
     */
    delete<T extends AssetOnEventDeleteArgs>(args: SelectSubset<T, AssetOnEventDeleteArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssetOnEvent.
     * @param {AssetOnEventUpdateArgs} args - Arguments to update one AssetOnEvent.
     * @example
     * // Update one AssetOnEvent
     * const assetOnEvent = await prisma.assetOnEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssetOnEventUpdateArgs>(args: SelectSubset<T, AssetOnEventUpdateArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssetOnEvents.
     * @param {AssetOnEventDeleteManyArgs} args - Arguments to filter AssetOnEvents to delete.
     * @example
     * // Delete a few AssetOnEvents
     * const { count } = await prisma.assetOnEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssetOnEventDeleteManyArgs>(args?: SelectSubset<T, AssetOnEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssetOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssetOnEvents
     * const assetOnEvent = await prisma.assetOnEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssetOnEventUpdateManyArgs>(args: SelectSubset<T, AssetOnEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssetOnEvent.
     * @param {AssetOnEventUpsertArgs} args - Arguments to update or create a AssetOnEvent.
     * @example
     * // Update or create a AssetOnEvent
     * const assetOnEvent = await prisma.assetOnEvent.upsert({
     *   create: {
     *     // ... data to create a AssetOnEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssetOnEvent we want to update
     *   }
     * })
     */
    upsert<T extends AssetOnEventUpsertArgs>(args: SelectSubset<T, AssetOnEventUpsertArgs<ExtArgs>>): Prisma__AssetOnEventClient<$Result.GetResult<Prisma.$AssetOnEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssetOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventCountArgs} args - Arguments to filter AssetOnEvents to count.
     * @example
     * // Count the number of AssetOnEvents
     * const count = await prisma.assetOnEvent.count({
     *   where: {
     *     // ... the filter for the AssetOnEvents we want to count
     *   }
     * })
    **/
    count<T extends AssetOnEventCountArgs>(
      args?: Subset<T, AssetOnEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssetOnEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssetOnEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssetOnEventAggregateArgs>(args: Subset<T, AssetOnEventAggregateArgs>): Prisma.PrismaPromise<GetAssetOnEventAggregateType<T>>

    /**
     * Group by AssetOnEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssetOnEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssetOnEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssetOnEventGroupByArgs['orderBy'] }
        : { orderBy?: AssetOnEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssetOnEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetOnEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssetOnEvent model
   */
  readonly fields: AssetOnEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssetOnEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssetOnEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asset<T extends AssetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssetDefaultArgs<ExtArgs>>): Prisma__AssetClient<$Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssetOnEvent model
   */ 
  interface AssetOnEventFieldRefs {
    readonly id: FieldRef<"AssetOnEvent", 'String'>
    readonly assetId: FieldRef<"AssetOnEvent", 'String'>
    readonly eventId: FieldRef<"AssetOnEvent", 'String'>
    readonly role: FieldRef<"AssetOnEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AssetOnEvent findUnique
   */
  export type AssetOnEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnEvent to fetch.
     */
    where: AssetOnEventWhereUniqueInput
  }

  /**
   * AssetOnEvent findUniqueOrThrow
   */
  export type AssetOnEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnEvent to fetch.
     */
    where: AssetOnEventWhereUniqueInput
  }

  /**
   * AssetOnEvent findFirst
   */
  export type AssetOnEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnEvent to fetch.
     */
    where?: AssetOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnEvents to fetch.
     */
    orderBy?: AssetOnEventOrderByWithRelationInput | AssetOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetOnEvents.
     */
    cursor?: AssetOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetOnEvents.
     */
    distinct?: AssetOnEventScalarFieldEnum | AssetOnEventScalarFieldEnum[]
  }

  /**
   * AssetOnEvent findFirstOrThrow
   */
  export type AssetOnEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnEvent to fetch.
     */
    where?: AssetOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnEvents to fetch.
     */
    orderBy?: AssetOnEventOrderByWithRelationInput | AssetOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssetOnEvents.
     */
    cursor?: AssetOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssetOnEvents.
     */
    distinct?: AssetOnEventScalarFieldEnum | AssetOnEventScalarFieldEnum[]
  }

  /**
   * AssetOnEvent findMany
   */
  export type AssetOnEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * Filter, which AssetOnEvents to fetch.
     */
    where?: AssetOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssetOnEvents to fetch.
     */
    orderBy?: AssetOnEventOrderByWithRelationInput | AssetOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssetOnEvents.
     */
    cursor?: AssetOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssetOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssetOnEvents.
     */
    skip?: number
    distinct?: AssetOnEventScalarFieldEnum | AssetOnEventScalarFieldEnum[]
  }

  /**
   * AssetOnEvent create
   */
  export type AssetOnEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * The data needed to create a AssetOnEvent.
     */
    data: XOR<AssetOnEventCreateInput, AssetOnEventUncheckedCreateInput>
  }

  /**
   * AssetOnEvent createMany
   */
  export type AssetOnEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssetOnEvents.
     */
    data: AssetOnEventCreateManyInput | AssetOnEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssetOnEvent createManyAndReturn
   */
  export type AssetOnEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssetOnEvents.
     */
    data: AssetOnEventCreateManyInput | AssetOnEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssetOnEvent update
   */
  export type AssetOnEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * The data needed to update a AssetOnEvent.
     */
    data: XOR<AssetOnEventUpdateInput, AssetOnEventUncheckedUpdateInput>
    /**
     * Choose, which AssetOnEvent to update.
     */
    where: AssetOnEventWhereUniqueInput
  }

  /**
   * AssetOnEvent updateMany
   */
  export type AssetOnEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssetOnEvents.
     */
    data: XOR<AssetOnEventUpdateManyMutationInput, AssetOnEventUncheckedUpdateManyInput>
    /**
     * Filter which AssetOnEvents to update
     */
    where?: AssetOnEventWhereInput
  }

  /**
   * AssetOnEvent upsert
   */
  export type AssetOnEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * The filter to search for the AssetOnEvent to update in case it exists.
     */
    where: AssetOnEventWhereUniqueInput
    /**
     * In case the AssetOnEvent found by the `where` argument doesn't exist, create a new AssetOnEvent with this data.
     */
    create: XOR<AssetOnEventCreateInput, AssetOnEventUncheckedCreateInput>
    /**
     * In case the AssetOnEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssetOnEventUpdateInput, AssetOnEventUncheckedUpdateInput>
  }

  /**
   * AssetOnEvent delete
   */
  export type AssetOnEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
    /**
     * Filter which AssetOnEvent to delete.
     */
    where: AssetOnEventWhereUniqueInput
  }

  /**
   * AssetOnEvent deleteMany
   */
  export type AssetOnEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssetOnEvents to delete
     */
    where?: AssetOnEventWhereInput
  }

  /**
   * AssetOnEvent without action
   */
  export type AssetOnEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssetOnEvent
     */
    select?: AssetOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssetOnEventInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    color: string | null
    createdAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    color: string | null
    createdAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    title: number
    color: number
    meta: number
    createdAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    title?: true
    color?: true
    createdAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    title?: true
    color?: true
    createdAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    title?: true
    color?: true
    meta?: true
    createdAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    title: string | null
    color: string | null
    meta: JsonValue | null
    createdAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    color?: boolean
    meta?: boolean
    createdAt?: boolean
    events?: boolean | Tag$eventsArgs<ExtArgs>
    exhibitors?: boolean | Tag$exhibitorsArgs<ExtArgs>
    products?: boolean | Tag$productsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    color?: boolean
    meta?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    title?: boolean
    color?: boolean
    meta?: boolean
    createdAt?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Tag$eventsArgs<ExtArgs>
    exhibitors?: boolean | Tag$exhibitorsArgs<ExtArgs>
    products?: boolean | Tag$productsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      events: Prisma.$TagOnEventPayload<ExtArgs>[]
      exhibitors: Prisma.$TagOnExhibitorPayload<ExtArgs>[]
      products: Prisma.$TagOnProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      title: string | null
      color: string | null
      meta: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Tag$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findMany"> | Null>
    exhibitors<T extends Tag$exhibitorsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$exhibitorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findMany"> | Null>
    products<T extends Tag$productsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly title: FieldRef<"Tag", 'String'>
    readonly color: FieldRef<"Tag", 'String'>
    readonly meta: FieldRef<"Tag", 'Json'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.events
   */
  export type Tag$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    where?: TagOnEventWhereInput
    orderBy?: TagOnEventOrderByWithRelationInput | TagOnEventOrderByWithRelationInput[]
    cursor?: TagOnEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagOnEventScalarFieldEnum | TagOnEventScalarFieldEnum[]
  }

  /**
   * Tag.exhibitors
   */
  export type Tag$exhibitorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    where?: TagOnExhibitorWhereInput
    orderBy?: TagOnExhibitorOrderByWithRelationInput | TagOnExhibitorOrderByWithRelationInput[]
    cursor?: TagOnExhibitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagOnExhibitorScalarFieldEnum | TagOnExhibitorScalarFieldEnum[]
  }

  /**
   * Tag.products
   */
  export type Tag$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    where?: TagOnProductWhereInput
    orderBy?: TagOnProductOrderByWithRelationInput | TagOnProductOrderByWithRelationInput[]
    cursor?: TagOnProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagOnProductScalarFieldEnum | TagOnProductScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    color: string | null
    icon: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    title: string | null
    description: string | null
    color: string | null
    icon: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    title: number
    description: number
    color: number
    icon: number
    parentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    color?: true
    icon?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    color?: true
    icon?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    color?: true
    icon?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    title: string | null
    description: string | null
    color: string | null
    icon: string | null
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    color?: boolean
    icon?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    color?: boolean
    icon?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    color?: boolean
    icon?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      title: string | null
      description: string | null
      color: string | null
      icon: string | null
      parentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly title: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly color: FieldRef<"Category", 'String'>
    readonly icon: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model TagOnEvent
   */

  export type AggregateTagOnEvent = {
    _count: TagOnEventCountAggregateOutputType | null
    _min: TagOnEventMinAggregateOutputType | null
    _max: TagOnEventMaxAggregateOutputType | null
  }

  export type TagOnEventMinAggregateOutputType = {
    id: string | null
    tagId: string | null
    eventId: string | null
  }

  export type TagOnEventMaxAggregateOutputType = {
    id: string | null
    tagId: string | null
    eventId: string | null
  }

  export type TagOnEventCountAggregateOutputType = {
    id: number
    tagId: number
    eventId: number
    _all: number
  }


  export type TagOnEventMinAggregateInputType = {
    id?: true
    tagId?: true
    eventId?: true
  }

  export type TagOnEventMaxAggregateInputType = {
    id?: true
    tagId?: true
    eventId?: true
  }

  export type TagOnEventCountAggregateInputType = {
    id?: true
    tagId?: true
    eventId?: true
    _all?: true
  }

  export type TagOnEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagOnEvent to aggregate.
     */
    where?: TagOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnEvents to fetch.
     */
    orderBy?: TagOnEventOrderByWithRelationInput | TagOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagOnEvents
    **/
    _count?: true | TagOnEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagOnEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagOnEventMaxAggregateInputType
  }

  export type GetTagOnEventAggregateType<T extends TagOnEventAggregateArgs> = {
        [P in keyof T & keyof AggregateTagOnEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagOnEvent[P]>
      : GetScalarType<T[P], AggregateTagOnEvent[P]>
  }




  export type TagOnEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnEventWhereInput
    orderBy?: TagOnEventOrderByWithAggregationInput | TagOnEventOrderByWithAggregationInput[]
    by: TagOnEventScalarFieldEnum[] | TagOnEventScalarFieldEnum
    having?: TagOnEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagOnEventCountAggregateInputType | true
    _min?: TagOnEventMinAggregateInputType
    _max?: TagOnEventMaxAggregateInputType
  }

  export type TagOnEventGroupByOutputType = {
    id: string
    tagId: string
    eventId: string
    _count: TagOnEventCountAggregateOutputType | null
    _min: TagOnEventMinAggregateOutputType | null
    _max: TagOnEventMaxAggregateOutputType | null
  }

  type GetTagOnEventGroupByPayload<T extends TagOnEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagOnEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagOnEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagOnEventGroupByOutputType[P]>
            : GetScalarType<T[P], TagOnEventGroupByOutputType[P]>
        }
      >
    >


  export type TagOnEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    eventId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagOnEvent"]>

  export type TagOnEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    eventId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagOnEvent"]>

  export type TagOnEventSelectScalar = {
    id?: boolean
    tagId?: boolean
    eventId?: boolean
  }

  export type TagOnEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type TagOnEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $TagOnEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagOnEvent"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tagId: string
      eventId: string
    }, ExtArgs["result"]["tagOnEvent"]>
    composites: {}
  }

  type TagOnEventGetPayload<S extends boolean | null | undefined | TagOnEventDefaultArgs> = $Result.GetResult<Prisma.$TagOnEventPayload, S>

  type TagOnEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagOnEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagOnEventCountAggregateInputType | true
    }

  export interface TagOnEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagOnEvent'], meta: { name: 'TagOnEvent' } }
    /**
     * Find zero or one TagOnEvent that matches the filter.
     * @param {TagOnEventFindUniqueArgs} args - Arguments to find a TagOnEvent
     * @example
     * // Get one TagOnEvent
     * const tagOnEvent = await prisma.tagOnEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagOnEventFindUniqueArgs>(args: SelectSubset<T, TagOnEventFindUniqueArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagOnEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagOnEventFindUniqueOrThrowArgs} args - Arguments to find a TagOnEvent
     * @example
     * // Get one TagOnEvent
     * const tagOnEvent = await prisma.tagOnEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagOnEventFindUniqueOrThrowArgs>(args: SelectSubset<T, TagOnEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagOnEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventFindFirstArgs} args - Arguments to find a TagOnEvent
     * @example
     * // Get one TagOnEvent
     * const tagOnEvent = await prisma.tagOnEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagOnEventFindFirstArgs>(args?: SelectSubset<T, TagOnEventFindFirstArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagOnEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventFindFirstOrThrowArgs} args - Arguments to find a TagOnEvent
     * @example
     * // Get one TagOnEvent
     * const tagOnEvent = await prisma.tagOnEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagOnEventFindFirstOrThrowArgs>(args?: SelectSubset<T, TagOnEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagOnEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagOnEvents
     * const tagOnEvents = await prisma.tagOnEvent.findMany()
     * 
     * // Get first 10 TagOnEvents
     * const tagOnEvents = await prisma.tagOnEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagOnEventWithIdOnly = await prisma.tagOnEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagOnEventFindManyArgs>(args?: SelectSubset<T, TagOnEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagOnEvent.
     * @param {TagOnEventCreateArgs} args - Arguments to create a TagOnEvent.
     * @example
     * // Create one TagOnEvent
     * const TagOnEvent = await prisma.tagOnEvent.create({
     *   data: {
     *     // ... data to create a TagOnEvent
     *   }
     * })
     * 
     */
    create<T extends TagOnEventCreateArgs>(args: SelectSubset<T, TagOnEventCreateArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagOnEvents.
     * @param {TagOnEventCreateManyArgs} args - Arguments to create many TagOnEvents.
     * @example
     * // Create many TagOnEvents
     * const tagOnEvent = await prisma.tagOnEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagOnEventCreateManyArgs>(args?: SelectSubset<T, TagOnEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TagOnEvents and returns the data saved in the database.
     * @param {TagOnEventCreateManyAndReturnArgs} args - Arguments to create many TagOnEvents.
     * @example
     * // Create many TagOnEvents
     * const tagOnEvent = await prisma.tagOnEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TagOnEvents and only return the `id`
     * const tagOnEventWithIdOnly = await prisma.tagOnEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagOnEventCreateManyAndReturnArgs>(args?: SelectSubset<T, TagOnEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TagOnEvent.
     * @param {TagOnEventDeleteArgs} args - Arguments to delete one TagOnEvent.
     * @example
     * // Delete one TagOnEvent
     * const TagOnEvent = await prisma.tagOnEvent.delete({
     *   where: {
     *     // ... filter to delete one TagOnEvent
     *   }
     * })
     * 
     */
    delete<T extends TagOnEventDeleteArgs>(args: SelectSubset<T, TagOnEventDeleteArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagOnEvent.
     * @param {TagOnEventUpdateArgs} args - Arguments to update one TagOnEvent.
     * @example
     * // Update one TagOnEvent
     * const tagOnEvent = await prisma.tagOnEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagOnEventUpdateArgs>(args: SelectSubset<T, TagOnEventUpdateArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagOnEvents.
     * @param {TagOnEventDeleteManyArgs} args - Arguments to filter TagOnEvents to delete.
     * @example
     * // Delete a few TagOnEvents
     * const { count } = await prisma.tagOnEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagOnEventDeleteManyArgs>(args?: SelectSubset<T, TagOnEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagOnEvents
     * const tagOnEvent = await prisma.tagOnEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagOnEventUpdateManyArgs>(args: SelectSubset<T, TagOnEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagOnEvent.
     * @param {TagOnEventUpsertArgs} args - Arguments to update or create a TagOnEvent.
     * @example
     * // Update or create a TagOnEvent
     * const tagOnEvent = await prisma.tagOnEvent.upsert({
     *   create: {
     *     // ... data to create a TagOnEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagOnEvent we want to update
     *   }
     * })
     */
    upsert<T extends TagOnEventUpsertArgs>(args: SelectSubset<T, TagOnEventUpsertArgs<ExtArgs>>): Prisma__TagOnEventClient<$Result.GetResult<Prisma.$TagOnEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagOnEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventCountArgs} args - Arguments to filter TagOnEvents to count.
     * @example
     * // Count the number of TagOnEvents
     * const count = await prisma.tagOnEvent.count({
     *   where: {
     *     // ... the filter for the TagOnEvents we want to count
     *   }
     * })
    **/
    count<T extends TagOnEventCountArgs>(
      args?: Subset<T, TagOnEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagOnEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagOnEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagOnEventAggregateArgs>(args: Subset<T, TagOnEventAggregateArgs>): Prisma.PrismaPromise<GetTagOnEventAggregateType<T>>

    /**
     * Group by TagOnEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagOnEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagOnEventGroupByArgs['orderBy'] }
        : { orderBy?: TagOnEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagOnEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagOnEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagOnEvent model
   */
  readonly fields: TagOnEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagOnEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagOnEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagOnEvent model
   */ 
  interface TagOnEventFieldRefs {
    readonly id: FieldRef<"TagOnEvent", 'String'>
    readonly tagId: FieldRef<"TagOnEvent", 'String'>
    readonly eventId: FieldRef<"TagOnEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TagOnEvent findUnique
   */
  export type TagOnEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * Filter, which TagOnEvent to fetch.
     */
    where: TagOnEventWhereUniqueInput
  }

  /**
   * TagOnEvent findUniqueOrThrow
   */
  export type TagOnEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * Filter, which TagOnEvent to fetch.
     */
    where: TagOnEventWhereUniqueInput
  }

  /**
   * TagOnEvent findFirst
   */
  export type TagOnEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * Filter, which TagOnEvent to fetch.
     */
    where?: TagOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnEvents to fetch.
     */
    orderBy?: TagOnEventOrderByWithRelationInput | TagOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagOnEvents.
     */
    cursor?: TagOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagOnEvents.
     */
    distinct?: TagOnEventScalarFieldEnum | TagOnEventScalarFieldEnum[]
  }

  /**
   * TagOnEvent findFirstOrThrow
   */
  export type TagOnEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * Filter, which TagOnEvent to fetch.
     */
    where?: TagOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnEvents to fetch.
     */
    orderBy?: TagOnEventOrderByWithRelationInput | TagOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagOnEvents.
     */
    cursor?: TagOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagOnEvents.
     */
    distinct?: TagOnEventScalarFieldEnum | TagOnEventScalarFieldEnum[]
  }

  /**
   * TagOnEvent findMany
   */
  export type TagOnEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * Filter, which TagOnEvents to fetch.
     */
    where?: TagOnEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnEvents to fetch.
     */
    orderBy?: TagOnEventOrderByWithRelationInput | TagOnEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagOnEvents.
     */
    cursor?: TagOnEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnEvents.
     */
    skip?: number
    distinct?: TagOnEventScalarFieldEnum | TagOnEventScalarFieldEnum[]
  }

  /**
   * TagOnEvent create
   */
  export type TagOnEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * The data needed to create a TagOnEvent.
     */
    data: XOR<TagOnEventCreateInput, TagOnEventUncheckedCreateInput>
  }

  /**
   * TagOnEvent createMany
   */
  export type TagOnEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagOnEvents.
     */
    data: TagOnEventCreateManyInput | TagOnEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagOnEvent createManyAndReturn
   */
  export type TagOnEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TagOnEvents.
     */
    data: TagOnEventCreateManyInput | TagOnEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TagOnEvent update
   */
  export type TagOnEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * The data needed to update a TagOnEvent.
     */
    data: XOR<TagOnEventUpdateInput, TagOnEventUncheckedUpdateInput>
    /**
     * Choose, which TagOnEvent to update.
     */
    where: TagOnEventWhereUniqueInput
  }

  /**
   * TagOnEvent updateMany
   */
  export type TagOnEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagOnEvents.
     */
    data: XOR<TagOnEventUpdateManyMutationInput, TagOnEventUncheckedUpdateManyInput>
    /**
     * Filter which TagOnEvents to update
     */
    where?: TagOnEventWhereInput
  }

  /**
   * TagOnEvent upsert
   */
  export type TagOnEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * The filter to search for the TagOnEvent to update in case it exists.
     */
    where: TagOnEventWhereUniqueInput
    /**
     * In case the TagOnEvent found by the `where` argument doesn't exist, create a new TagOnEvent with this data.
     */
    create: XOR<TagOnEventCreateInput, TagOnEventUncheckedCreateInput>
    /**
     * In case the TagOnEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagOnEventUpdateInput, TagOnEventUncheckedUpdateInput>
  }

  /**
   * TagOnEvent delete
   */
  export type TagOnEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
    /**
     * Filter which TagOnEvent to delete.
     */
    where: TagOnEventWhereUniqueInput
  }

  /**
   * TagOnEvent deleteMany
   */
  export type TagOnEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagOnEvents to delete
     */
    where?: TagOnEventWhereInput
  }

  /**
   * TagOnEvent without action
   */
  export type TagOnEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnEvent
     */
    select?: TagOnEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnEventInclude<ExtArgs> | null
  }


  /**
   * Model TagOnExhibitor
   */

  export type AggregateTagOnExhibitor = {
    _count: TagOnExhibitorCountAggregateOutputType | null
    _min: TagOnExhibitorMinAggregateOutputType | null
    _max: TagOnExhibitorMaxAggregateOutputType | null
  }

  export type TagOnExhibitorMinAggregateOutputType = {
    id: string | null
    tagId: string | null
    exhibitorId: string | null
  }

  export type TagOnExhibitorMaxAggregateOutputType = {
    id: string | null
    tagId: string | null
    exhibitorId: string | null
  }

  export type TagOnExhibitorCountAggregateOutputType = {
    id: number
    tagId: number
    exhibitorId: number
    _all: number
  }


  export type TagOnExhibitorMinAggregateInputType = {
    id?: true
    tagId?: true
    exhibitorId?: true
  }

  export type TagOnExhibitorMaxAggregateInputType = {
    id?: true
    tagId?: true
    exhibitorId?: true
  }

  export type TagOnExhibitorCountAggregateInputType = {
    id?: true
    tagId?: true
    exhibitorId?: true
    _all?: true
  }

  export type TagOnExhibitorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagOnExhibitor to aggregate.
     */
    where?: TagOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnExhibitors to fetch.
     */
    orderBy?: TagOnExhibitorOrderByWithRelationInput | TagOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnExhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagOnExhibitors
    **/
    _count?: true | TagOnExhibitorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagOnExhibitorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagOnExhibitorMaxAggregateInputType
  }

  export type GetTagOnExhibitorAggregateType<T extends TagOnExhibitorAggregateArgs> = {
        [P in keyof T & keyof AggregateTagOnExhibitor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagOnExhibitor[P]>
      : GetScalarType<T[P], AggregateTagOnExhibitor[P]>
  }




  export type TagOnExhibitorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnExhibitorWhereInput
    orderBy?: TagOnExhibitorOrderByWithAggregationInput | TagOnExhibitorOrderByWithAggregationInput[]
    by: TagOnExhibitorScalarFieldEnum[] | TagOnExhibitorScalarFieldEnum
    having?: TagOnExhibitorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagOnExhibitorCountAggregateInputType | true
    _min?: TagOnExhibitorMinAggregateInputType
    _max?: TagOnExhibitorMaxAggregateInputType
  }

  export type TagOnExhibitorGroupByOutputType = {
    id: string
    tagId: string
    exhibitorId: string
    _count: TagOnExhibitorCountAggregateOutputType | null
    _min: TagOnExhibitorMinAggregateOutputType | null
    _max: TagOnExhibitorMaxAggregateOutputType | null
  }

  type GetTagOnExhibitorGroupByPayload<T extends TagOnExhibitorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagOnExhibitorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagOnExhibitorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagOnExhibitorGroupByOutputType[P]>
            : GetScalarType<T[P], TagOnExhibitorGroupByOutputType[P]>
        }
      >
    >


  export type TagOnExhibitorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    exhibitorId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagOnExhibitor"]>

  export type TagOnExhibitorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    exhibitorId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagOnExhibitor"]>

  export type TagOnExhibitorSelectScalar = {
    id?: boolean
    tagId?: boolean
    exhibitorId?: boolean
  }

  export type TagOnExhibitorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }
  export type TagOnExhibitorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    exhibitor?: boolean | ExhibitorDefaultArgs<ExtArgs>
  }

  export type $TagOnExhibitorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagOnExhibitor"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      exhibitor: Prisma.$ExhibitorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tagId: string
      exhibitorId: string
    }, ExtArgs["result"]["tagOnExhibitor"]>
    composites: {}
  }

  type TagOnExhibitorGetPayload<S extends boolean | null | undefined | TagOnExhibitorDefaultArgs> = $Result.GetResult<Prisma.$TagOnExhibitorPayload, S>

  type TagOnExhibitorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagOnExhibitorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagOnExhibitorCountAggregateInputType | true
    }

  export interface TagOnExhibitorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagOnExhibitor'], meta: { name: 'TagOnExhibitor' } }
    /**
     * Find zero or one TagOnExhibitor that matches the filter.
     * @param {TagOnExhibitorFindUniqueArgs} args - Arguments to find a TagOnExhibitor
     * @example
     * // Get one TagOnExhibitor
     * const tagOnExhibitor = await prisma.tagOnExhibitor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagOnExhibitorFindUniqueArgs>(args: SelectSubset<T, TagOnExhibitorFindUniqueArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagOnExhibitor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagOnExhibitorFindUniqueOrThrowArgs} args - Arguments to find a TagOnExhibitor
     * @example
     * // Get one TagOnExhibitor
     * const tagOnExhibitor = await prisma.tagOnExhibitor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagOnExhibitorFindUniqueOrThrowArgs>(args: SelectSubset<T, TagOnExhibitorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagOnExhibitor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorFindFirstArgs} args - Arguments to find a TagOnExhibitor
     * @example
     * // Get one TagOnExhibitor
     * const tagOnExhibitor = await prisma.tagOnExhibitor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagOnExhibitorFindFirstArgs>(args?: SelectSubset<T, TagOnExhibitorFindFirstArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagOnExhibitor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorFindFirstOrThrowArgs} args - Arguments to find a TagOnExhibitor
     * @example
     * // Get one TagOnExhibitor
     * const tagOnExhibitor = await prisma.tagOnExhibitor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagOnExhibitorFindFirstOrThrowArgs>(args?: SelectSubset<T, TagOnExhibitorFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagOnExhibitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagOnExhibitors
     * const tagOnExhibitors = await prisma.tagOnExhibitor.findMany()
     * 
     * // Get first 10 TagOnExhibitors
     * const tagOnExhibitors = await prisma.tagOnExhibitor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagOnExhibitorWithIdOnly = await prisma.tagOnExhibitor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagOnExhibitorFindManyArgs>(args?: SelectSubset<T, TagOnExhibitorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagOnExhibitor.
     * @param {TagOnExhibitorCreateArgs} args - Arguments to create a TagOnExhibitor.
     * @example
     * // Create one TagOnExhibitor
     * const TagOnExhibitor = await prisma.tagOnExhibitor.create({
     *   data: {
     *     // ... data to create a TagOnExhibitor
     *   }
     * })
     * 
     */
    create<T extends TagOnExhibitorCreateArgs>(args: SelectSubset<T, TagOnExhibitorCreateArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagOnExhibitors.
     * @param {TagOnExhibitorCreateManyArgs} args - Arguments to create many TagOnExhibitors.
     * @example
     * // Create many TagOnExhibitors
     * const tagOnExhibitor = await prisma.tagOnExhibitor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagOnExhibitorCreateManyArgs>(args?: SelectSubset<T, TagOnExhibitorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TagOnExhibitors and returns the data saved in the database.
     * @param {TagOnExhibitorCreateManyAndReturnArgs} args - Arguments to create many TagOnExhibitors.
     * @example
     * // Create many TagOnExhibitors
     * const tagOnExhibitor = await prisma.tagOnExhibitor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TagOnExhibitors and only return the `id`
     * const tagOnExhibitorWithIdOnly = await prisma.tagOnExhibitor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagOnExhibitorCreateManyAndReturnArgs>(args?: SelectSubset<T, TagOnExhibitorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TagOnExhibitor.
     * @param {TagOnExhibitorDeleteArgs} args - Arguments to delete one TagOnExhibitor.
     * @example
     * // Delete one TagOnExhibitor
     * const TagOnExhibitor = await prisma.tagOnExhibitor.delete({
     *   where: {
     *     // ... filter to delete one TagOnExhibitor
     *   }
     * })
     * 
     */
    delete<T extends TagOnExhibitorDeleteArgs>(args: SelectSubset<T, TagOnExhibitorDeleteArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagOnExhibitor.
     * @param {TagOnExhibitorUpdateArgs} args - Arguments to update one TagOnExhibitor.
     * @example
     * // Update one TagOnExhibitor
     * const tagOnExhibitor = await prisma.tagOnExhibitor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagOnExhibitorUpdateArgs>(args: SelectSubset<T, TagOnExhibitorUpdateArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagOnExhibitors.
     * @param {TagOnExhibitorDeleteManyArgs} args - Arguments to filter TagOnExhibitors to delete.
     * @example
     * // Delete a few TagOnExhibitors
     * const { count } = await prisma.tagOnExhibitor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagOnExhibitorDeleteManyArgs>(args?: SelectSubset<T, TagOnExhibitorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagOnExhibitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagOnExhibitors
     * const tagOnExhibitor = await prisma.tagOnExhibitor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagOnExhibitorUpdateManyArgs>(args: SelectSubset<T, TagOnExhibitorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagOnExhibitor.
     * @param {TagOnExhibitorUpsertArgs} args - Arguments to update or create a TagOnExhibitor.
     * @example
     * // Update or create a TagOnExhibitor
     * const tagOnExhibitor = await prisma.tagOnExhibitor.upsert({
     *   create: {
     *     // ... data to create a TagOnExhibitor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagOnExhibitor we want to update
     *   }
     * })
     */
    upsert<T extends TagOnExhibitorUpsertArgs>(args: SelectSubset<T, TagOnExhibitorUpsertArgs<ExtArgs>>): Prisma__TagOnExhibitorClient<$Result.GetResult<Prisma.$TagOnExhibitorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagOnExhibitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorCountArgs} args - Arguments to filter TagOnExhibitors to count.
     * @example
     * // Count the number of TagOnExhibitors
     * const count = await prisma.tagOnExhibitor.count({
     *   where: {
     *     // ... the filter for the TagOnExhibitors we want to count
     *   }
     * })
    **/
    count<T extends TagOnExhibitorCountArgs>(
      args?: Subset<T, TagOnExhibitorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagOnExhibitorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagOnExhibitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagOnExhibitorAggregateArgs>(args: Subset<T, TagOnExhibitorAggregateArgs>): Prisma.PrismaPromise<GetTagOnExhibitorAggregateType<T>>

    /**
     * Group by TagOnExhibitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnExhibitorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagOnExhibitorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagOnExhibitorGroupByArgs['orderBy'] }
        : { orderBy?: TagOnExhibitorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagOnExhibitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagOnExhibitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagOnExhibitor model
   */
  readonly fields: TagOnExhibitorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagOnExhibitor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagOnExhibitorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    exhibitor<T extends ExhibitorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExhibitorDefaultArgs<ExtArgs>>): Prisma__ExhibitorClient<$Result.GetResult<Prisma.$ExhibitorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagOnExhibitor model
   */ 
  interface TagOnExhibitorFieldRefs {
    readonly id: FieldRef<"TagOnExhibitor", 'String'>
    readonly tagId: FieldRef<"TagOnExhibitor", 'String'>
    readonly exhibitorId: FieldRef<"TagOnExhibitor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TagOnExhibitor findUnique
   */
  export type TagOnExhibitorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which TagOnExhibitor to fetch.
     */
    where: TagOnExhibitorWhereUniqueInput
  }

  /**
   * TagOnExhibitor findUniqueOrThrow
   */
  export type TagOnExhibitorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which TagOnExhibitor to fetch.
     */
    where: TagOnExhibitorWhereUniqueInput
  }

  /**
   * TagOnExhibitor findFirst
   */
  export type TagOnExhibitorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which TagOnExhibitor to fetch.
     */
    where?: TagOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnExhibitors to fetch.
     */
    orderBy?: TagOnExhibitorOrderByWithRelationInput | TagOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagOnExhibitors.
     */
    cursor?: TagOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnExhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagOnExhibitors.
     */
    distinct?: TagOnExhibitorScalarFieldEnum | TagOnExhibitorScalarFieldEnum[]
  }

  /**
   * TagOnExhibitor findFirstOrThrow
   */
  export type TagOnExhibitorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which TagOnExhibitor to fetch.
     */
    where?: TagOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnExhibitors to fetch.
     */
    orderBy?: TagOnExhibitorOrderByWithRelationInput | TagOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagOnExhibitors.
     */
    cursor?: TagOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnExhibitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagOnExhibitors.
     */
    distinct?: TagOnExhibitorScalarFieldEnum | TagOnExhibitorScalarFieldEnum[]
  }

  /**
   * TagOnExhibitor findMany
   */
  export type TagOnExhibitorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter, which TagOnExhibitors to fetch.
     */
    where?: TagOnExhibitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnExhibitors to fetch.
     */
    orderBy?: TagOnExhibitorOrderByWithRelationInput | TagOnExhibitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagOnExhibitors.
     */
    cursor?: TagOnExhibitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnExhibitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnExhibitors.
     */
    skip?: number
    distinct?: TagOnExhibitorScalarFieldEnum | TagOnExhibitorScalarFieldEnum[]
  }

  /**
   * TagOnExhibitor create
   */
  export type TagOnExhibitorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * The data needed to create a TagOnExhibitor.
     */
    data: XOR<TagOnExhibitorCreateInput, TagOnExhibitorUncheckedCreateInput>
  }

  /**
   * TagOnExhibitor createMany
   */
  export type TagOnExhibitorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagOnExhibitors.
     */
    data: TagOnExhibitorCreateManyInput | TagOnExhibitorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagOnExhibitor createManyAndReturn
   */
  export type TagOnExhibitorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TagOnExhibitors.
     */
    data: TagOnExhibitorCreateManyInput | TagOnExhibitorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TagOnExhibitor update
   */
  export type TagOnExhibitorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * The data needed to update a TagOnExhibitor.
     */
    data: XOR<TagOnExhibitorUpdateInput, TagOnExhibitorUncheckedUpdateInput>
    /**
     * Choose, which TagOnExhibitor to update.
     */
    where: TagOnExhibitorWhereUniqueInput
  }

  /**
   * TagOnExhibitor updateMany
   */
  export type TagOnExhibitorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagOnExhibitors.
     */
    data: XOR<TagOnExhibitorUpdateManyMutationInput, TagOnExhibitorUncheckedUpdateManyInput>
    /**
     * Filter which TagOnExhibitors to update
     */
    where?: TagOnExhibitorWhereInput
  }

  /**
   * TagOnExhibitor upsert
   */
  export type TagOnExhibitorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * The filter to search for the TagOnExhibitor to update in case it exists.
     */
    where: TagOnExhibitorWhereUniqueInput
    /**
     * In case the TagOnExhibitor found by the `where` argument doesn't exist, create a new TagOnExhibitor with this data.
     */
    create: XOR<TagOnExhibitorCreateInput, TagOnExhibitorUncheckedCreateInput>
    /**
     * In case the TagOnExhibitor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagOnExhibitorUpdateInput, TagOnExhibitorUncheckedUpdateInput>
  }

  /**
   * TagOnExhibitor delete
   */
  export type TagOnExhibitorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
    /**
     * Filter which TagOnExhibitor to delete.
     */
    where: TagOnExhibitorWhereUniqueInput
  }

  /**
   * TagOnExhibitor deleteMany
   */
  export type TagOnExhibitorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagOnExhibitors to delete
     */
    where?: TagOnExhibitorWhereInput
  }

  /**
   * TagOnExhibitor without action
   */
  export type TagOnExhibitorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnExhibitor
     */
    select?: TagOnExhibitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnExhibitorInclude<ExtArgs> | null
  }


  /**
   * Model TagOnProduct
   */

  export type AggregateTagOnProduct = {
    _count: TagOnProductCountAggregateOutputType | null
    _min: TagOnProductMinAggregateOutputType | null
    _max: TagOnProductMaxAggregateOutputType | null
  }

  export type TagOnProductMinAggregateOutputType = {
    id: string | null
    tagId: string | null
    productId: string | null
  }

  export type TagOnProductMaxAggregateOutputType = {
    id: string | null
    tagId: string | null
    productId: string | null
  }

  export type TagOnProductCountAggregateOutputType = {
    id: number
    tagId: number
    productId: number
    _all: number
  }


  export type TagOnProductMinAggregateInputType = {
    id?: true
    tagId?: true
    productId?: true
  }

  export type TagOnProductMaxAggregateInputType = {
    id?: true
    tagId?: true
    productId?: true
  }

  export type TagOnProductCountAggregateInputType = {
    id?: true
    tagId?: true
    productId?: true
    _all?: true
  }

  export type TagOnProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagOnProduct to aggregate.
     */
    where?: TagOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnProducts to fetch.
     */
    orderBy?: TagOnProductOrderByWithRelationInput | TagOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagOnProducts
    **/
    _count?: true | TagOnProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagOnProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagOnProductMaxAggregateInputType
  }

  export type GetTagOnProductAggregateType<T extends TagOnProductAggregateArgs> = {
        [P in keyof T & keyof AggregateTagOnProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagOnProduct[P]>
      : GetScalarType<T[P], AggregateTagOnProduct[P]>
  }




  export type TagOnProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagOnProductWhereInput
    orderBy?: TagOnProductOrderByWithAggregationInput | TagOnProductOrderByWithAggregationInput[]
    by: TagOnProductScalarFieldEnum[] | TagOnProductScalarFieldEnum
    having?: TagOnProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagOnProductCountAggregateInputType | true
    _min?: TagOnProductMinAggregateInputType
    _max?: TagOnProductMaxAggregateInputType
  }

  export type TagOnProductGroupByOutputType = {
    id: string
    tagId: string
    productId: string
    _count: TagOnProductCountAggregateOutputType | null
    _min: TagOnProductMinAggregateOutputType | null
    _max: TagOnProductMaxAggregateOutputType | null
  }

  type GetTagOnProductGroupByPayload<T extends TagOnProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagOnProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagOnProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagOnProductGroupByOutputType[P]>
            : GetScalarType<T[P], TagOnProductGroupByOutputType[P]>
        }
      >
    >


  export type TagOnProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    productId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagOnProduct"]>

  export type TagOnProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagId?: boolean
    productId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tagOnProduct"]>

  export type TagOnProductSelectScalar = {
    id?: boolean
    tagId?: boolean
    productId?: boolean
  }

  export type TagOnProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type TagOnProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $TagOnProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TagOnProduct"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tagId: string
      productId: string
    }, ExtArgs["result"]["tagOnProduct"]>
    composites: {}
  }

  type TagOnProductGetPayload<S extends boolean | null | undefined | TagOnProductDefaultArgs> = $Result.GetResult<Prisma.$TagOnProductPayload, S>

  type TagOnProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagOnProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagOnProductCountAggregateInputType | true
    }

  export interface TagOnProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TagOnProduct'], meta: { name: 'TagOnProduct' } }
    /**
     * Find zero or one TagOnProduct that matches the filter.
     * @param {TagOnProductFindUniqueArgs} args - Arguments to find a TagOnProduct
     * @example
     * // Get one TagOnProduct
     * const tagOnProduct = await prisma.tagOnProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagOnProductFindUniqueArgs>(args: SelectSubset<T, TagOnProductFindUniqueArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TagOnProduct that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagOnProductFindUniqueOrThrowArgs} args - Arguments to find a TagOnProduct
     * @example
     * // Get one TagOnProduct
     * const tagOnProduct = await prisma.tagOnProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagOnProductFindUniqueOrThrowArgs>(args: SelectSubset<T, TagOnProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TagOnProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductFindFirstArgs} args - Arguments to find a TagOnProduct
     * @example
     * // Get one TagOnProduct
     * const tagOnProduct = await prisma.tagOnProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagOnProductFindFirstArgs>(args?: SelectSubset<T, TagOnProductFindFirstArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TagOnProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductFindFirstOrThrowArgs} args - Arguments to find a TagOnProduct
     * @example
     * // Get one TagOnProduct
     * const tagOnProduct = await prisma.tagOnProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagOnProductFindFirstOrThrowArgs>(args?: SelectSubset<T, TagOnProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TagOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagOnProducts
     * const tagOnProducts = await prisma.tagOnProduct.findMany()
     * 
     * // Get first 10 TagOnProducts
     * const tagOnProducts = await prisma.tagOnProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagOnProductWithIdOnly = await prisma.tagOnProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagOnProductFindManyArgs>(args?: SelectSubset<T, TagOnProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TagOnProduct.
     * @param {TagOnProductCreateArgs} args - Arguments to create a TagOnProduct.
     * @example
     * // Create one TagOnProduct
     * const TagOnProduct = await prisma.tagOnProduct.create({
     *   data: {
     *     // ... data to create a TagOnProduct
     *   }
     * })
     * 
     */
    create<T extends TagOnProductCreateArgs>(args: SelectSubset<T, TagOnProductCreateArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TagOnProducts.
     * @param {TagOnProductCreateManyArgs} args - Arguments to create many TagOnProducts.
     * @example
     * // Create many TagOnProducts
     * const tagOnProduct = await prisma.tagOnProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagOnProductCreateManyArgs>(args?: SelectSubset<T, TagOnProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TagOnProducts and returns the data saved in the database.
     * @param {TagOnProductCreateManyAndReturnArgs} args - Arguments to create many TagOnProducts.
     * @example
     * // Create many TagOnProducts
     * const tagOnProduct = await prisma.tagOnProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TagOnProducts and only return the `id`
     * const tagOnProductWithIdOnly = await prisma.tagOnProduct.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagOnProductCreateManyAndReturnArgs>(args?: SelectSubset<T, TagOnProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TagOnProduct.
     * @param {TagOnProductDeleteArgs} args - Arguments to delete one TagOnProduct.
     * @example
     * // Delete one TagOnProduct
     * const TagOnProduct = await prisma.tagOnProduct.delete({
     *   where: {
     *     // ... filter to delete one TagOnProduct
     *   }
     * })
     * 
     */
    delete<T extends TagOnProductDeleteArgs>(args: SelectSubset<T, TagOnProductDeleteArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TagOnProduct.
     * @param {TagOnProductUpdateArgs} args - Arguments to update one TagOnProduct.
     * @example
     * // Update one TagOnProduct
     * const tagOnProduct = await prisma.tagOnProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagOnProductUpdateArgs>(args: SelectSubset<T, TagOnProductUpdateArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TagOnProducts.
     * @param {TagOnProductDeleteManyArgs} args - Arguments to filter TagOnProducts to delete.
     * @example
     * // Delete a few TagOnProducts
     * const { count } = await prisma.tagOnProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagOnProductDeleteManyArgs>(args?: SelectSubset<T, TagOnProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagOnProducts
     * const tagOnProduct = await prisma.tagOnProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagOnProductUpdateManyArgs>(args: SelectSubset<T, TagOnProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TagOnProduct.
     * @param {TagOnProductUpsertArgs} args - Arguments to update or create a TagOnProduct.
     * @example
     * // Update or create a TagOnProduct
     * const tagOnProduct = await prisma.tagOnProduct.upsert({
     *   create: {
     *     // ... data to create a TagOnProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagOnProduct we want to update
     *   }
     * })
     */
    upsert<T extends TagOnProductUpsertArgs>(args: SelectSubset<T, TagOnProductUpsertArgs<ExtArgs>>): Prisma__TagOnProductClient<$Result.GetResult<Prisma.$TagOnProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TagOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductCountArgs} args - Arguments to filter TagOnProducts to count.
     * @example
     * // Count the number of TagOnProducts
     * const count = await prisma.tagOnProduct.count({
     *   where: {
     *     // ... the filter for the TagOnProducts we want to count
     *   }
     * })
    **/
    count<T extends TagOnProductCountArgs>(
      args?: Subset<T, TagOnProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagOnProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagOnProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagOnProductAggregateArgs>(args: Subset<T, TagOnProductAggregateArgs>): Prisma.PrismaPromise<GetTagOnProductAggregateType<T>>

    /**
     * Group by TagOnProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagOnProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagOnProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagOnProductGroupByArgs['orderBy'] }
        : { orderBy?: TagOnProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagOnProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagOnProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagOnProduct model
   */
  readonly fields: TagOnProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagOnProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagOnProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TagOnProduct model
   */ 
  interface TagOnProductFieldRefs {
    readonly id: FieldRef<"TagOnProduct", 'String'>
    readonly tagId: FieldRef<"TagOnProduct", 'String'>
    readonly productId: FieldRef<"TagOnProduct", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TagOnProduct findUnique
   */
  export type TagOnProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * Filter, which TagOnProduct to fetch.
     */
    where: TagOnProductWhereUniqueInput
  }

  /**
   * TagOnProduct findUniqueOrThrow
   */
  export type TagOnProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * Filter, which TagOnProduct to fetch.
     */
    where: TagOnProductWhereUniqueInput
  }

  /**
   * TagOnProduct findFirst
   */
  export type TagOnProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * Filter, which TagOnProduct to fetch.
     */
    where?: TagOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnProducts to fetch.
     */
    orderBy?: TagOnProductOrderByWithRelationInput | TagOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagOnProducts.
     */
    cursor?: TagOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagOnProducts.
     */
    distinct?: TagOnProductScalarFieldEnum | TagOnProductScalarFieldEnum[]
  }

  /**
   * TagOnProduct findFirstOrThrow
   */
  export type TagOnProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * Filter, which TagOnProduct to fetch.
     */
    where?: TagOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnProducts to fetch.
     */
    orderBy?: TagOnProductOrderByWithRelationInput | TagOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagOnProducts.
     */
    cursor?: TagOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagOnProducts.
     */
    distinct?: TagOnProductScalarFieldEnum | TagOnProductScalarFieldEnum[]
  }

  /**
   * TagOnProduct findMany
   */
  export type TagOnProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * Filter, which TagOnProducts to fetch.
     */
    where?: TagOnProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagOnProducts to fetch.
     */
    orderBy?: TagOnProductOrderByWithRelationInput | TagOnProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagOnProducts.
     */
    cursor?: TagOnProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagOnProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagOnProducts.
     */
    skip?: number
    distinct?: TagOnProductScalarFieldEnum | TagOnProductScalarFieldEnum[]
  }

  /**
   * TagOnProduct create
   */
  export type TagOnProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * The data needed to create a TagOnProduct.
     */
    data: XOR<TagOnProductCreateInput, TagOnProductUncheckedCreateInput>
  }

  /**
   * TagOnProduct createMany
   */
  export type TagOnProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TagOnProducts.
     */
    data: TagOnProductCreateManyInput | TagOnProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TagOnProduct createManyAndReturn
   */
  export type TagOnProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TagOnProducts.
     */
    data: TagOnProductCreateManyInput | TagOnProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TagOnProduct update
   */
  export type TagOnProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * The data needed to update a TagOnProduct.
     */
    data: XOR<TagOnProductUpdateInput, TagOnProductUncheckedUpdateInput>
    /**
     * Choose, which TagOnProduct to update.
     */
    where: TagOnProductWhereUniqueInput
  }

  /**
   * TagOnProduct updateMany
   */
  export type TagOnProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TagOnProducts.
     */
    data: XOR<TagOnProductUpdateManyMutationInput, TagOnProductUncheckedUpdateManyInput>
    /**
     * Filter which TagOnProducts to update
     */
    where?: TagOnProductWhereInput
  }

  /**
   * TagOnProduct upsert
   */
  export type TagOnProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * The filter to search for the TagOnProduct to update in case it exists.
     */
    where: TagOnProductWhereUniqueInput
    /**
     * In case the TagOnProduct found by the `where` argument doesn't exist, create a new TagOnProduct with this data.
     */
    create: XOR<TagOnProductCreateInput, TagOnProductUncheckedCreateInput>
    /**
     * In case the TagOnProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagOnProductUpdateInput, TagOnProductUncheckedUpdateInput>
  }

  /**
   * TagOnProduct delete
   */
  export type TagOnProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
    /**
     * Filter which TagOnProduct to delete.
     */
    where: TagOnProductWhereUniqueInput
  }

  /**
   * TagOnProduct deleteMany
   */
  export type TagOnProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TagOnProducts to delete
     */
    where?: TagOnProductWhereInput
  }

  /**
   * TagOnProduct without action
   */
  export type TagOnProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagOnProduct
     */
    select?: TagOnProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagOnProductInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenHash: string | null
    expiresAt: Date | null
    revoked: boolean | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenHash: string | null
    expiresAt: Date | null
    revoked: boolean | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    userId: number
    tokenHash: number
    expiresAt: number
    revoked: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    revoked?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    revoked?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    userId?: true
    tokenHash?: true
    expiresAt?: true
    revoked?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    userId: string
    tokenHash: string
    expiresAt: Date
    revoked: boolean
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    revoked?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    revoked?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    tokenHash?: boolean
    expiresAt?: boolean
    revoked?: boolean
    createdAt?: boolean
  }

  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tokenHash: string
      expiresAt: Date
      revoked: boolean
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly tokenHash: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly revoked: FieldRef<"RefreshToken", 'Boolean'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    data: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    data?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: string
    entity: string
    entityId: string | null
    data: JsonValue | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    data?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    data?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    data?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: string
      entity: string
      entityId: string | null
      data: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly data: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Recent
   */

  export type AggregateRecent = {
    _count: RecentCountAggregateOutputType | null
    _min: RecentMinAggregateOutputType | null
    _max: RecentMaxAggregateOutputType | null
  }

  export type RecentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    resourceType: $Enums.ResourceType | null
    resourceId: string | null
    createdAt: Date | null
  }

  export type RecentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    resourceType: $Enums.ResourceType | null
    resourceId: string | null
    createdAt: Date | null
  }

  export type RecentCountAggregateOutputType = {
    id: number
    userId: number
    resourceType: number
    resourceId: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type RecentMinAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    resourceId?: true
    createdAt?: true
  }

  export type RecentMaxAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    resourceId?: true
    createdAt?: true
  }

  export type RecentCountAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    resourceId?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type RecentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recent to aggregate.
     */
    where?: RecentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recents to fetch.
     */
    orderBy?: RecentOrderByWithRelationInput | RecentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recents
    **/
    _count?: true | RecentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecentMaxAggregateInputType
  }

  export type GetRecentAggregateType<T extends RecentAggregateArgs> = {
        [P in keyof T & keyof AggregateRecent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecent[P]>
      : GetScalarType<T[P], AggregateRecent[P]>
  }




  export type RecentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecentWhereInput
    orderBy?: RecentOrderByWithAggregationInput | RecentOrderByWithAggregationInput[]
    by: RecentScalarFieldEnum[] | RecentScalarFieldEnum
    having?: RecentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecentCountAggregateInputType | true
    _min?: RecentMinAggregateInputType
    _max?: RecentMaxAggregateInputType
  }

  export type RecentGroupByOutputType = {
    id: string
    userId: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata: JsonValue | null
    createdAt: Date
    _count: RecentCountAggregateOutputType | null
    _min: RecentMinAggregateOutputType | null
    _max: RecentMaxAggregateOutputType | null
  }

  type GetRecentGroupByPayload<T extends RecentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecentGroupByOutputType[P]>
            : GetScalarType<T[P], RecentGroupByOutputType[P]>
        }
      >
    >


  export type RecentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    resourceId?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recent"]>

  export type RecentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    resourceId?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recent"]>

  export type RecentSelectScalar = {
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    resourceId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type RecentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      resourceType: $Enums.ResourceType
      resourceId: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["recent"]>
    composites: {}
  }

  type RecentGetPayload<S extends boolean | null | undefined | RecentDefaultArgs> = $Result.GetResult<Prisma.$RecentPayload, S>

  type RecentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecentCountAggregateInputType | true
    }

  export interface RecentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recent'], meta: { name: 'Recent' } }
    /**
     * Find zero or one Recent that matches the filter.
     * @param {RecentFindUniqueArgs} args - Arguments to find a Recent
     * @example
     * // Get one Recent
     * const recent = await prisma.recent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecentFindUniqueArgs>(args: SelectSubset<T, RecentFindUniqueArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecentFindUniqueOrThrowArgs} args - Arguments to find a Recent
     * @example
     * // Get one Recent
     * const recent = await prisma.recent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecentFindUniqueOrThrowArgs>(args: SelectSubset<T, RecentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentFindFirstArgs} args - Arguments to find a Recent
     * @example
     * // Get one Recent
     * const recent = await prisma.recent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecentFindFirstArgs>(args?: SelectSubset<T, RecentFindFirstArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentFindFirstOrThrowArgs} args - Arguments to find a Recent
     * @example
     * // Get one Recent
     * const recent = await prisma.recent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecentFindFirstOrThrowArgs>(args?: SelectSubset<T, RecentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recents
     * const recents = await prisma.recent.findMany()
     * 
     * // Get first 10 Recents
     * const recents = await prisma.recent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recentWithIdOnly = await prisma.recent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecentFindManyArgs>(args?: SelectSubset<T, RecentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recent.
     * @param {RecentCreateArgs} args - Arguments to create a Recent.
     * @example
     * // Create one Recent
     * const Recent = await prisma.recent.create({
     *   data: {
     *     // ... data to create a Recent
     *   }
     * })
     * 
     */
    create<T extends RecentCreateArgs>(args: SelectSubset<T, RecentCreateArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recents.
     * @param {RecentCreateManyArgs} args - Arguments to create many Recents.
     * @example
     * // Create many Recents
     * const recent = await prisma.recent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecentCreateManyArgs>(args?: SelectSubset<T, RecentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recents and returns the data saved in the database.
     * @param {RecentCreateManyAndReturnArgs} args - Arguments to create many Recents.
     * @example
     * // Create many Recents
     * const recent = await prisma.recent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recents and only return the `id`
     * const recentWithIdOnly = await prisma.recent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecentCreateManyAndReturnArgs>(args?: SelectSubset<T, RecentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recent.
     * @param {RecentDeleteArgs} args - Arguments to delete one Recent.
     * @example
     * // Delete one Recent
     * const Recent = await prisma.recent.delete({
     *   where: {
     *     // ... filter to delete one Recent
     *   }
     * })
     * 
     */
    delete<T extends RecentDeleteArgs>(args: SelectSubset<T, RecentDeleteArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recent.
     * @param {RecentUpdateArgs} args - Arguments to update one Recent.
     * @example
     * // Update one Recent
     * const recent = await prisma.recent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecentUpdateArgs>(args: SelectSubset<T, RecentUpdateArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recents.
     * @param {RecentDeleteManyArgs} args - Arguments to filter Recents to delete.
     * @example
     * // Delete a few Recents
     * const { count } = await prisma.recent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecentDeleteManyArgs>(args?: SelectSubset<T, RecentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recents
     * const recent = await prisma.recent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecentUpdateManyArgs>(args: SelectSubset<T, RecentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recent.
     * @param {RecentUpsertArgs} args - Arguments to update or create a Recent.
     * @example
     * // Update or create a Recent
     * const recent = await prisma.recent.upsert({
     *   create: {
     *     // ... data to create a Recent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recent we want to update
     *   }
     * })
     */
    upsert<T extends RecentUpsertArgs>(args: SelectSubset<T, RecentUpsertArgs<ExtArgs>>): Prisma__RecentClient<$Result.GetResult<Prisma.$RecentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentCountArgs} args - Arguments to filter Recents to count.
     * @example
     * // Count the number of Recents
     * const count = await prisma.recent.count({
     *   where: {
     *     // ... the filter for the Recents we want to count
     *   }
     * })
    **/
    count<T extends RecentCountArgs>(
      args?: Subset<T, RecentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecentAggregateArgs>(args: Subset<T, RecentAggregateArgs>): Prisma.PrismaPromise<GetRecentAggregateType<T>>

    /**
     * Group by Recent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecentGroupByArgs['orderBy'] }
        : { orderBy?: RecentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recent model
   */
  readonly fields: RecentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recent model
   */ 
  interface RecentFieldRefs {
    readonly id: FieldRef<"Recent", 'String'>
    readonly userId: FieldRef<"Recent", 'String'>
    readonly resourceType: FieldRef<"Recent", 'ResourceType'>
    readonly resourceId: FieldRef<"Recent", 'String'>
    readonly metadata: FieldRef<"Recent", 'Json'>
    readonly createdAt: FieldRef<"Recent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recent findUnique
   */
  export type RecentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * Filter, which Recent to fetch.
     */
    where: RecentWhereUniqueInput
  }

  /**
   * Recent findUniqueOrThrow
   */
  export type RecentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * Filter, which Recent to fetch.
     */
    where: RecentWhereUniqueInput
  }

  /**
   * Recent findFirst
   */
  export type RecentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * Filter, which Recent to fetch.
     */
    where?: RecentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recents to fetch.
     */
    orderBy?: RecentOrderByWithRelationInput | RecentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recents.
     */
    cursor?: RecentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recents.
     */
    distinct?: RecentScalarFieldEnum | RecentScalarFieldEnum[]
  }

  /**
   * Recent findFirstOrThrow
   */
  export type RecentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * Filter, which Recent to fetch.
     */
    where?: RecentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recents to fetch.
     */
    orderBy?: RecentOrderByWithRelationInput | RecentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recents.
     */
    cursor?: RecentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recents.
     */
    distinct?: RecentScalarFieldEnum | RecentScalarFieldEnum[]
  }

  /**
   * Recent findMany
   */
  export type RecentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * Filter, which Recents to fetch.
     */
    where?: RecentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recents to fetch.
     */
    orderBy?: RecentOrderByWithRelationInput | RecentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recents.
     */
    cursor?: RecentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recents.
     */
    skip?: number
    distinct?: RecentScalarFieldEnum | RecentScalarFieldEnum[]
  }

  /**
   * Recent create
   */
  export type RecentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * The data needed to create a Recent.
     */
    data: XOR<RecentCreateInput, RecentUncheckedCreateInput>
  }

  /**
   * Recent createMany
   */
  export type RecentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recents.
     */
    data: RecentCreateManyInput | RecentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recent createManyAndReturn
   */
  export type RecentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recents.
     */
    data: RecentCreateManyInput | RecentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recent update
   */
  export type RecentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * The data needed to update a Recent.
     */
    data: XOR<RecentUpdateInput, RecentUncheckedUpdateInput>
    /**
     * Choose, which Recent to update.
     */
    where: RecentWhereUniqueInput
  }

  /**
   * Recent updateMany
   */
  export type RecentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recents.
     */
    data: XOR<RecentUpdateManyMutationInput, RecentUncheckedUpdateManyInput>
    /**
     * Filter which Recents to update
     */
    where?: RecentWhereInput
  }

  /**
   * Recent upsert
   */
  export type RecentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * The filter to search for the Recent to update in case it exists.
     */
    where: RecentWhereUniqueInput
    /**
     * In case the Recent found by the `where` argument doesn't exist, create a new Recent with this data.
     */
    create: XOR<RecentCreateInput, RecentUncheckedCreateInput>
    /**
     * In case the Recent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecentUpdateInput, RecentUncheckedUpdateInput>
  }

  /**
   * Recent delete
   */
  export type RecentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
    /**
     * Filter which Recent to delete.
     */
    where: RecentWhereUniqueInput
  }

  /**
   * Recent deleteMany
   */
  export type RecentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recents to delete
     */
    where?: RecentWhereInput
  }

  /**
   * Recent without action
   */
  export type RecentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recent
     */
    select?: RecentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    avatarAssetId: 'avatarAssetId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    title: 'title',
    description: 'description',
    color: 'color',
    start: 'start',
    end: 'end',
    timed: 'timed',
    location: 'location',
    exhibitorId: 'exhibitorId',
    timezone: 'timezone',
    published: 'published',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventSpeakerScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userId: 'userId',
    role: 'role',
    order: 'order'
  };

  export type EventSpeakerScalarFieldEnum = (typeof EventSpeakerScalarFieldEnum)[keyof typeof EventSpeakerScalarFieldEnum]


  export const ExhibitorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    title: 'title',
    description: 'description',
    website: 'website',
    location: 'location',
    sponsor: 'sponsor',
    favoriteCount: 'favoriteCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    createdById: 'createdById'
  };

  export type ExhibitorScalarFieldEnum = (typeof ExhibitorScalarFieldEnum)[keyof typeof ExhibitorScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    exhibitorId: 'exhibitorId',
    categoryId: 'categoryId',
    name: 'name',
    title: 'title',
    description: 'description',
    shortDescription: 'shortDescription',
    price: 'price',
    imageUrl: 'imageUrl',
    inStock: 'inStock',
    featured: 'featured',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const AttendeeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    name: 'name',
    email: 'email',
    ticketType: 'ticketType',
    checkedIn: 'checkedIn',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type AttendeeScalarFieldEnum = (typeof AttendeeScalarFieldEnum)[keyof typeof AttendeeScalarFieldEnum]


  export const FavoriteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    resourceType: 'resourceType',
    resourceId: 'resourceId',
    createdAt: 'createdAt'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    icon: 'icon',
    color: 'color',
    message: 'message',
    data: 'data',
    read: 'read',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AssetScalarFieldEnum: {
    id: 'id',
    url: 'url',
    type: 'type',
    meta: 'meta',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt'
  };

  export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


  export const AssetOnProductScalarFieldEnum: {
    id: 'id',
    assetId: 'assetId',
    productId: 'productId',
    role: 'role'
  };

  export type AssetOnProductScalarFieldEnum = (typeof AssetOnProductScalarFieldEnum)[keyof typeof AssetOnProductScalarFieldEnum]


  export const AssetOnExhibitorScalarFieldEnum: {
    id: 'id',
    assetId: 'assetId',
    exhibitorId: 'exhibitorId',
    role: 'role'
  };

  export type AssetOnExhibitorScalarFieldEnum = (typeof AssetOnExhibitorScalarFieldEnum)[keyof typeof AssetOnExhibitorScalarFieldEnum]


  export const AssetOnEventScalarFieldEnum: {
    id: 'id',
    assetId: 'assetId',
    eventId: 'eventId',
    role: 'role'
  };

  export type AssetOnEventScalarFieldEnum = (typeof AssetOnEventScalarFieldEnum)[keyof typeof AssetOnEventScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    title: 'title',
    color: 'color',
    meta: 'meta',
    createdAt: 'createdAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    title: 'title',
    description: 'description',
    color: 'color',
    icon: 'icon',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TagOnEventScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    eventId: 'eventId'
  };

  export type TagOnEventScalarFieldEnum = (typeof TagOnEventScalarFieldEnum)[keyof typeof TagOnEventScalarFieldEnum]


  export const TagOnExhibitorScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    exhibitorId: 'exhibitorId'
  };

  export type TagOnExhibitorScalarFieldEnum = (typeof TagOnExhibitorScalarFieldEnum)[keyof typeof TagOnExhibitorScalarFieldEnum]


  export const TagOnProductScalarFieldEnum: {
    id: 'id',
    tagId: 'tagId',
    productId: 'productId'
  };

  export type TagOnProductScalarFieldEnum = (typeof TagOnProductScalarFieldEnum)[keyof typeof TagOnProductScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tokenHash: 'tokenHash',
    expiresAt: 'expiresAt',
    revoked: 'revoked',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    data: 'data',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const RecentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    resourceType: 'resourceType',
    resourceId: 'resourceId',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type RecentScalarFieldEnum = (typeof RecentScalarFieldEnum)[keyof typeof RecentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ResourceType'
   */
  export type EnumResourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResourceType'>
    


  /**
   * Reference to a field of type 'ResourceType[]'
   */
  export type ListEnumResourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResourceType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatarAssetId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    avatarAsset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    eventsCreated?: EventListRelationFilter
    speakersFor?: EventSpeakerListRelationFilter
    attendees?: AttendeeListRelationFilter
    favorites?: FavoriteListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    notifications?: NotificationListRelationFilter
    AuditLog?: AuditLogListRelationFilter
    Exhibitor?: ExhibitorListRelationFilter
    recents?: RecentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    avatarAssetId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    avatarAsset?: AssetOrderByWithRelationInput
    eventsCreated?: EventOrderByRelationAggregateInput
    speakersFor?: EventSpeakerOrderByRelationAggregateInput
    attendees?: AttendeeOrderByRelationAggregateInput
    favorites?: FavoriteOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    AuditLog?: AuditLogOrderByRelationAggregateInput
    Exhibitor?: ExhibitorOrderByRelationAggregateInput
    recents?: RecentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatarAssetId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    avatarAsset?: XOR<AssetNullableRelationFilter, AssetWhereInput> | null
    eventsCreated?: EventListRelationFilter
    speakersFor?: EventSpeakerListRelationFilter
    attendees?: AttendeeListRelationFilter
    favorites?: FavoriteListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    notifications?: NotificationListRelationFilter
    AuditLog?: AuditLogListRelationFilter
    Exhibitor?: ExhibitorListRelationFilter
    recents?: RecentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    avatarAssetId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    avatarAssetId?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    color?: StringNullableFilter<"Event"> | string | null
    start?: DateTimeFilter<"Event"> | Date | string
    end?: DateTimeFilter<"Event"> | Date | string
    timed?: BoolFilter<"Event"> | boolean
    location?: StringNullableFilter<"Event"> | string | null
    exhibitorId?: StringNullableFilter<"Event"> | string | null
    timezone?: StringNullableFilter<"Event"> | string | null
    published?: BoolFilter<"Event"> | boolean
    createdById?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    exhibitor?: XOR<ExhibitorNullableRelationFilter, ExhibitorWhereInput> | null
    speakers?: EventSpeakerListRelationFilter
    attendees?: AttendeeListRelationFilter
    tags?: TagOnEventListRelationFilter
    assets?: AssetOnEventListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    start?: SortOrder
    end?: SortOrder
    timed?: SortOrder
    location?: SortOrderInput | SortOrder
    exhibitorId?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    published?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    exhibitor?: ExhibitorOrderByWithRelationInput
    speakers?: EventSpeakerOrderByRelationAggregateInput
    attendees?: AttendeeOrderByRelationAggregateInput
    tags?: TagOnEventOrderByRelationAggregateInput
    assets?: AssetOnEventOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    color?: StringNullableFilter<"Event"> | string | null
    start?: DateTimeFilter<"Event"> | Date | string
    end?: DateTimeFilter<"Event"> | Date | string
    timed?: BoolFilter<"Event"> | boolean
    location?: StringNullableFilter<"Event"> | string | null
    exhibitorId?: StringNullableFilter<"Event"> | string | null
    timezone?: StringNullableFilter<"Event"> | string | null
    published?: BoolFilter<"Event"> | boolean
    createdById?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    exhibitor?: XOR<ExhibitorNullableRelationFilter, ExhibitorWhereInput> | null
    speakers?: EventSpeakerListRelationFilter
    attendees?: AttendeeListRelationFilter
    tags?: TagOnEventListRelationFilter
    assets?: AssetOnEventListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    start?: SortOrder
    end?: SortOrder
    timed?: SortOrder
    location?: SortOrderInput | SortOrder
    exhibitorId?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    published?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    name?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    color?: StringNullableWithAggregatesFilter<"Event"> | string | null
    start?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    end?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    timed?: BoolWithAggregatesFilter<"Event"> | boolean
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    exhibitorId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"Event"> | string | null
    published?: BoolWithAggregatesFilter<"Event"> | boolean
    createdById?: StringNullableWithAggregatesFilter<"Event"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
  }

  export type EventSpeakerWhereInput = {
    AND?: EventSpeakerWhereInput | EventSpeakerWhereInput[]
    OR?: EventSpeakerWhereInput[]
    NOT?: EventSpeakerWhereInput | EventSpeakerWhereInput[]
    id?: StringFilter<"EventSpeaker"> | string
    eventId?: StringFilter<"EventSpeaker"> | string
    userId?: StringFilter<"EventSpeaker"> | string
    role?: StringNullableFilter<"EventSpeaker"> | string | null
    order?: IntNullableFilter<"EventSpeaker"> | number | null
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EventSpeakerOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    role?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EventSpeakerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_userId?: EventSpeakerEventIdUserIdCompoundUniqueInput
    AND?: EventSpeakerWhereInput | EventSpeakerWhereInput[]
    OR?: EventSpeakerWhereInput[]
    NOT?: EventSpeakerWhereInput | EventSpeakerWhereInput[]
    eventId?: StringFilter<"EventSpeaker"> | string
    userId?: StringFilter<"EventSpeaker"> | string
    role?: StringNullableFilter<"EventSpeaker"> | string | null
    order?: IntNullableFilter<"EventSpeaker"> | number | null
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "eventId_userId">

  export type EventSpeakerOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    role?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    _count?: EventSpeakerCountOrderByAggregateInput
    _avg?: EventSpeakerAvgOrderByAggregateInput
    _max?: EventSpeakerMaxOrderByAggregateInput
    _min?: EventSpeakerMinOrderByAggregateInput
    _sum?: EventSpeakerSumOrderByAggregateInput
  }

  export type EventSpeakerScalarWhereWithAggregatesInput = {
    AND?: EventSpeakerScalarWhereWithAggregatesInput | EventSpeakerScalarWhereWithAggregatesInput[]
    OR?: EventSpeakerScalarWhereWithAggregatesInput[]
    NOT?: EventSpeakerScalarWhereWithAggregatesInput | EventSpeakerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventSpeaker"> | string
    eventId?: StringWithAggregatesFilter<"EventSpeaker"> | string
    userId?: StringWithAggregatesFilter<"EventSpeaker"> | string
    role?: StringNullableWithAggregatesFilter<"EventSpeaker"> | string | null
    order?: IntNullableWithAggregatesFilter<"EventSpeaker"> | number | null
  }

  export type ExhibitorWhereInput = {
    AND?: ExhibitorWhereInput | ExhibitorWhereInput[]
    OR?: ExhibitorWhereInput[]
    NOT?: ExhibitorWhereInput | ExhibitorWhereInput[]
    id?: StringFilter<"Exhibitor"> | string
    name?: StringFilter<"Exhibitor"> | string
    title?: StringNullableFilter<"Exhibitor"> | string | null
    description?: StringNullableFilter<"Exhibitor"> | string | null
    website?: StringNullableFilter<"Exhibitor"> | string | null
    location?: StringNullableFilter<"Exhibitor"> | string | null
    sponsor?: BoolFilter<"Exhibitor"> | boolean
    favoriteCount?: IntFilter<"Exhibitor"> | number
    createdAt?: DateTimeFilter<"Exhibitor"> | Date | string
    updatedAt?: DateTimeFilter<"Exhibitor"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Exhibitor"> | Date | string | null
    createdById?: StringNullableFilter<"Exhibitor"> | string | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    products?: ProductListRelationFilter
    assets?: AssetOnExhibitorListRelationFilter
    tags?: TagOnExhibitorListRelationFilter
    events?: EventListRelationFilter
  }

  export type ExhibitorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    sponsor?: SortOrder
    favoriteCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    products?: ProductOrderByRelationAggregateInput
    assets?: AssetOnExhibitorOrderByRelationAggregateInput
    tags?: TagOnExhibitorOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
  }

  export type ExhibitorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExhibitorWhereInput | ExhibitorWhereInput[]
    OR?: ExhibitorWhereInput[]
    NOT?: ExhibitorWhereInput | ExhibitorWhereInput[]
    name?: StringFilter<"Exhibitor"> | string
    title?: StringNullableFilter<"Exhibitor"> | string | null
    description?: StringNullableFilter<"Exhibitor"> | string | null
    website?: StringNullableFilter<"Exhibitor"> | string | null
    location?: StringNullableFilter<"Exhibitor"> | string | null
    sponsor?: BoolFilter<"Exhibitor"> | boolean
    favoriteCount?: IntFilter<"Exhibitor"> | number
    createdAt?: DateTimeFilter<"Exhibitor"> | Date | string
    updatedAt?: DateTimeFilter<"Exhibitor"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Exhibitor"> | Date | string | null
    createdById?: StringNullableFilter<"Exhibitor"> | string | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    products?: ProductListRelationFilter
    assets?: AssetOnExhibitorListRelationFilter
    tags?: TagOnExhibitorListRelationFilter
    events?: EventListRelationFilter
  }, "id">

  export type ExhibitorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    sponsor?: SortOrder
    favoriteCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: ExhibitorCountOrderByAggregateInput
    _avg?: ExhibitorAvgOrderByAggregateInput
    _max?: ExhibitorMaxOrderByAggregateInput
    _min?: ExhibitorMinOrderByAggregateInput
    _sum?: ExhibitorSumOrderByAggregateInput
  }

  export type ExhibitorScalarWhereWithAggregatesInput = {
    AND?: ExhibitorScalarWhereWithAggregatesInput | ExhibitorScalarWhereWithAggregatesInput[]
    OR?: ExhibitorScalarWhereWithAggregatesInput[]
    NOT?: ExhibitorScalarWhereWithAggregatesInput | ExhibitorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exhibitor"> | string
    name?: StringWithAggregatesFilter<"Exhibitor"> | string
    title?: StringNullableWithAggregatesFilter<"Exhibitor"> | string | null
    description?: StringNullableWithAggregatesFilter<"Exhibitor"> | string | null
    website?: StringNullableWithAggregatesFilter<"Exhibitor"> | string | null
    location?: StringNullableWithAggregatesFilter<"Exhibitor"> | string | null
    sponsor?: BoolWithAggregatesFilter<"Exhibitor"> | boolean
    favoriteCount?: IntWithAggregatesFilter<"Exhibitor"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Exhibitor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exhibitor"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Exhibitor"> | Date | string | null
    createdById?: StringNullableWithAggregatesFilter<"Exhibitor"> | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    exhibitorId?: StringFilter<"Product"> | string
    categoryId?: StringNullableFilter<"Product"> | string | null
    name?: StringFilter<"Product"> | string
    title?: StringNullableFilter<"Product"> | string | null
    description?: StringNullableFilter<"Product"> | string | null
    shortDescription?: StringNullableFilter<"Product"> | string | null
    price?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    imageUrl?: StringNullableFilter<"Product"> | string | null
    inStock?: BoolFilter<"Product"> | boolean
    featured?: BoolFilter<"Product"> | boolean
    metadata?: JsonNullableFilter<"Product">
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    exhibitor?: XOR<ExhibitorRelationFilter, ExhibitorWhereInput>
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    assets?: AssetOnProductListRelationFilter
    tags?: TagOnProductListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    exhibitorId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    shortDescription?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    exhibitor?: ExhibitorOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    assets?: AssetOnProductOrderByRelationAggregateInput
    tags?: TagOnProductOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    exhibitorId?: StringFilter<"Product"> | string
    categoryId?: StringNullableFilter<"Product"> | string | null
    name?: StringFilter<"Product"> | string
    title?: StringNullableFilter<"Product"> | string | null
    description?: StringNullableFilter<"Product"> | string | null
    shortDescription?: StringNullableFilter<"Product"> | string | null
    price?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    imageUrl?: StringNullableFilter<"Product"> | string | null
    inStock?: BoolFilter<"Product"> | boolean
    featured?: BoolFilter<"Product"> | boolean
    metadata?: JsonNullableFilter<"Product">
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    exhibitor?: XOR<ExhibitorRelationFilter, ExhibitorWhereInput>
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    assets?: AssetOnProductListRelationFilter
    tags?: TagOnProductListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    exhibitorId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    shortDescription?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    exhibitorId?: StringWithAggregatesFilter<"Product"> | string
    categoryId?: StringNullableWithAggregatesFilter<"Product"> | string | null
    name?: StringWithAggregatesFilter<"Product"> | string
    title?: StringNullableWithAggregatesFilter<"Product"> | string | null
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    shortDescription?: StringNullableWithAggregatesFilter<"Product"> | string | null
    price?: DecimalNullableWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Product"> | string | null
    inStock?: BoolWithAggregatesFilter<"Product"> | boolean
    featured?: BoolWithAggregatesFilter<"Product"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"Product">
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
  }

  export type AttendeeWhereInput = {
    AND?: AttendeeWhereInput | AttendeeWhereInput[]
    OR?: AttendeeWhereInput[]
    NOT?: AttendeeWhereInput | AttendeeWhereInput[]
    id?: StringFilter<"Attendee"> | string
    userId?: StringNullableFilter<"Attendee"> | string | null
    eventId?: StringFilter<"Attendee"> | string
    name?: StringFilter<"Attendee"> | string
    email?: StringFilter<"Attendee"> | string
    ticketType?: StringNullableFilter<"Attendee"> | string | null
    checkedIn?: BoolFilter<"Attendee"> | boolean
    metadata?: JsonNullableFilter<"Attendee">
    createdAt?: DateTimeFilter<"Attendee"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AttendeeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ticketType?: SortOrderInput | SortOrder
    checkedIn?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AttendeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttendeeWhereInput | AttendeeWhereInput[]
    OR?: AttendeeWhereInput[]
    NOT?: AttendeeWhereInput | AttendeeWhereInput[]
    userId?: StringNullableFilter<"Attendee"> | string | null
    eventId?: StringFilter<"Attendee"> | string
    name?: StringFilter<"Attendee"> | string
    email?: StringFilter<"Attendee"> | string
    ticketType?: StringNullableFilter<"Attendee"> | string | null
    checkedIn?: BoolFilter<"Attendee"> | boolean
    metadata?: JsonNullableFilter<"Attendee">
    createdAt?: DateTimeFilter<"Attendee"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AttendeeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ticketType?: SortOrderInput | SortOrder
    checkedIn?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AttendeeCountOrderByAggregateInput
    _max?: AttendeeMaxOrderByAggregateInput
    _min?: AttendeeMinOrderByAggregateInput
  }

  export type AttendeeScalarWhereWithAggregatesInput = {
    AND?: AttendeeScalarWhereWithAggregatesInput | AttendeeScalarWhereWithAggregatesInput[]
    OR?: AttendeeScalarWhereWithAggregatesInput[]
    NOT?: AttendeeScalarWhereWithAggregatesInput | AttendeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attendee"> | string
    userId?: StringNullableWithAggregatesFilter<"Attendee"> | string | null
    eventId?: StringWithAggregatesFilter<"Attendee"> | string
    name?: StringWithAggregatesFilter<"Attendee"> | string
    email?: StringWithAggregatesFilter<"Attendee"> | string
    ticketType?: StringNullableWithAggregatesFilter<"Attendee"> | string | null
    checkedIn?: BoolWithAggregatesFilter<"Attendee"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"Attendee">
    createdAt?: DateTimeWithAggregatesFilter<"Attendee"> | Date | string
  }

  export type FavoriteWhereInput = {
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    resourceType?: EnumResourceTypeFilter<"Favorite"> | $Enums.ResourceType
    resourceId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FavoriteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FavoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    userId?: StringFilter<"Favorite"> | string
    resourceType?: EnumResourceTypeFilter<"Favorite"> | $Enums.ResourceType
    resourceId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FavoriteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
    _count?: FavoriteCountOrderByAggregateInput
    _max?: FavoriteMaxOrderByAggregateInput
    _min?: FavoriteMinOrderByAggregateInput
  }

  export type FavoriteScalarWhereWithAggregatesInput = {
    AND?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    OR?: FavoriteScalarWhereWithAggregatesInput[]
    NOT?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Favorite"> | string
    userId?: StringWithAggregatesFilter<"Favorite"> | string
    resourceType?: EnumResourceTypeWithAggregatesFilter<"Favorite"> | $Enums.ResourceType
    resourceId?: StringWithAggregatesFilter<"Favorite"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Favorite"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringNullableFilter<"Notification"> | string | null
    icon?: StringNullableFilter<"Notification"> | string | null
    color?: StringNullableFilter<"Notification"> | string | null
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringNullableFilter<"Notification"> | string | null
    icon?: StringNullableFilter<"Notification"> | string | null
    color?: StringNullableFilter<"Notification"> | string | null
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    color?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    message?: StringWithAggregatesFilter<"Notification"> | string
    data?: JsonNullableWithAggregatesFilter<"Notification">
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
  }

  export type AssetWhereInput = {
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    id?: StringFilter<"Asset"> | string
    url?: StringFilter<"Asset"> | string
    type?: StringNullableFilter<"Asset"> | string | null
    meta?: JsonNullableFilter<"Asset">
    createdBy?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    productLinks?: AssetOnProductListRelationFilter
    exhibitorLinks?: AssetOnExhibitorListRelationFilter
    eventLinks?: AssetOnEventListRelationFilter
    userAvatarLinks?: UserListRelationFilter
  }

  export type AssetOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    productLinks?: AssetOnProductOrderByRelationAggregateInput
    exhibitorLinks?: AssetOnExhibitorOrderByRelationAggregateInput
    eventLinks?: AssetOnEventOrderByRelationAggregateInput
    userAvatarLinks?: UserOrderByRelationAggregateInput
  }

  export type AssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssetWhereInput | AssetWhereInput[]
    OR?: AssetWhereInput[]
    NOT?: AssetWhereInput | AssetWhereInput[]
    url?: StringFilter<"Asset"> | string
    type?: StringNullableFilter<"Asset"> | string | null
    meta?: JsonNullableFilter<"Asset">
    createdBy?: StringNullableFilter<"Asset"> | string | null
    createdAt?: DateTimeFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Asset"> | Date | string | null
    productLinks?: AssetOnProductListRelationFilter
    exhibitorLinks?: AssetOnExhibitorListRelationFilter
    eventLinks?: AssetOnEventListRelationFilter
    userAvatarLinks?: UserListRelationFilter
  }, "id">

  export type AssetOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: AssetCountOrderByAggregateInput
    _max?: AssetMaxOrderByAggregateInput
    _min?: AssetMinOrderByAggregateInput
  }

  export type AssetScalarWhereWithAggregatesInput = {
    AND?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    OR?: AssetScalarWhereWithAggregatesInput[]
    NOT?: AssetScalarWhereWithAggregatesInput | AssetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Asset"> | string
    url?: StringWithAggregatesFilter<"Asset"> | string
    type?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    meta?: JsonNullableWithAggregatesFilter<"Asset">
    createdBy?: StringNullableWithAggregatesFilter<"Asset"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Asset"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Asset"> | Date | string | null
  }

  export type AssetOnProductWhereInput = {
    AND?: AssetOnProductWhereInput | AssetOnProductWhereInput[]
    OR?: AssetOnProductWhereInput[]
    NOT?: AssetOnProductWhereInput | AssetOnProductWhereInput[]
    id?: StringFilter<"AssetOnProduct"> | string
    assetId?: StringFilter<"AssetOnProduct"> | string
    productId?: StringFilter<"AssetOnProduct"> | string
    role?: StringNullableFilter<"AssetOnProduct"> | string | null
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type AssetOnProductOrderByWithRelationInput = {
    id?: SortOrder
    assetId?: SortOrder
    productId?: SortOrder
    role?: SortOrderInput | SortOrder
    asset?: AssetOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type AssetOnProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssetOnProductWhereInput | AssetOnProductWhereInput[]
    OR?: AssetOnProductWhereInput[]
    NOT?: AssetOnProductWhereInput | AssetOnProductWhereInput[]
    assetId?: StringFilter<"AssetOnProduct"> | string
    productId?: StringFilter<"AssetOnProduct"> | string
    role?: StringNullableFilter<"AssetOnProduct"> | string | null
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type AssetOnProductOrderByWithAggregationInput = {
    id?: SortOrder
    assetId?: SortOrder
    productId?: SortOrder
    role?: SortOrderInput | SortOrder
    _count?: AssetOnProductCountOrderByAggregateInput
    _max?: AssetOnProductMaxOrderByAggregateInput
    _min?: AssetOnProductMinOrderByAggregateInput
  }

  export type AssetOnProductScalarWhereWithAggregatesInput = {
    AND?: AssetOnProductScalarWhereWithAggregatesInput | AssetOnProductScalarWhereWithAggregatesInput[]
    OR?: AssetOnProductScalarWhereWithAggregatesInput[]
    NOT?: AssetOnProductScalarWhereWithAggregatesInput | AssetOnProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssetOnProduct"> | string
    assetId?: StringWithAggregatesFilter<"AssetOnProduct"> | string
    productId?: StringWithAggregatesFilter<"AssetOnProduct"> | string
    role?: StringNullableWithAggregatesFilter<"AssetOnProduct"> | string | null
  }

  export type AssetOnExhibitorWhereInput = {
    AND?: AssetOnExhibitorWhereInput | AssetOnExhibitorWhereInput[]
    OR?: AssetOnExhibitorWhereInput[]
    NOT?: AssetOnExhibitorWhereInput | AssetOnExhibitorWhereInput[]
    id?: StringFilter<"AssetOnExhibitor"> | string
    assetId?: StringFilter<"AssetOnExhibitor"> | string
    exhibitorId?: StringFilter<"AssetOnExhibitor"> | string
    role?: StringNullableFilter<"AssetOnExhibitor"> | string | null
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    exhibitor?: XOR<ExhibitorRelationFilter, ExhibitorWhereInput>
  }

  export type AssetOnExhibitorOrderByWithRelationInput = {
    id?: SortOrder
    assetId?: SortOrder
    exhibitorId?: SortOrder
    role?: SortOrderInput | SortOrder
    asset?: AssetOrderByWithRelationInput
    exhibitor?: ExhibitorOrderByWithRelationInput
  }

  export type AssetOnExhibitorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssetOnExhibitorWhereInput | AssetOnExhibitorWhereInput[]
    OR?: AssetOnExhibitorWhereInput[]
    NOT?: AssetOnExhibitorWhereInput | AssetOnExhibitorWhereInput[]
    assetId?: StringFilter<"AssetOnExhibitor"> | string
    exhibitorId?: StringFilter<"AssetOnExhibitor"> | string
    role?: StringNullableFilter<"AssetOnExhibitor"> | string | null
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    exhibitor?: XOR<ExhibitorRelationFilter, ExhibitorWhereInput>
  }, "id">

  export type AssetOnExhibitorOrderByWithAggregationInput = {
    id?: SortOrder
    assetId?: SortOrder
    exhibitorId?: SortOrder
    role?: SortOrderInput | SortOrder
    _count?: AssetOnExhibitorCountOrderByAggregateInput
    _max?: AssetOnExhibitorMaxOrderByAggregateInput
    _min?: AssetOnExhibitorMinOrderByAggregateInput
  }

  export type AssetOnExhibitorScalarWhereWithAggregatesInput = {
    AND?: AssetOnExhibitorScalarWhereWithAggregatesInput | AssetOnExhibitorScalarWhereWithAggregatesInput[]
    OR?: AssetOnExhibitorScalarWhereWithAggregatesInput[]
    NOT?: AssetOnExhibitorScalarWhereWithAggregatesInput | AssetOnExhibitorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssetOnExhibitor"> | string
    assetId?: StringWithAggregatesFilter<"AssetOnExhibitor"> | string
    exhibitorId?: StringWithAggregatesFilter<"AssetOnExhibitor"> | string
    role?: StringNullableWithAggregatesFilter<"AssetOnExhibitor"> | string | null
  }

  export type AssetOnEventWhereInput = {
    AND?: AssetOnEventWhereInput | AssetOnEventWhereInput[]
    OR?: AssetOnEventWhereInput[]
    NOT?: AssetOnEventWhereInput | AssetOnEventWhereInput[]
    id?: StringFilter<"AssetOnEvent"> | string
    assetId?: StringFilter<"AssetOnEvent"> | string
    eventId?: StringFilter<"AssetOnEvent"> | string
    role?: StringNullableFilter<"AssetOnEvent"> | string | null
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type AssetOnEventOrderByWithRelationInput = {
    id?: SortOrder
    assetId?: SortOrder
    eventId?: SortOrder
    role?: SortOrderInput | SortOrder
    asset?: AssetOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type AssetOnEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssetOnEventWhereInput | AssetOnEventWhereInput[]
    OR?: AssetOnEventWhereInput[]
    NOT?: AssetOnEventWhereInput | AssetOnEventWhereInput[]
    assetId?: StringFilter<"AssetOnEvent"> | string
    eventId?: StringFilter<"AssetOnEvent"> | string
    role?: StringNullableFilter<"AssetOnEvent"> | string | null
    asset?: XOR<AssetRelationFilter, AssetWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id">

  export type AssetOnEventOrderByWithAggregationInput = {
    id?: SortOrder
    assetId?: SortOrder
    eventId?: SortOrder
    role?: SortOrderInput | SortOrder
    _count?: AssetOnEventCountOrderByAggregateInput
    _max?: AssetOnEventMaxOrderByAggregateInput
    _min?: AssetOnEventMinOrderByAggregateInput
  }

  export type AssetOnEventScalarWhereWithAggregatesInput = {
    AND?: AssetOnEventScalarWhereWithAggregatesInput | AssetOnEventScalarWhereWithAggregatesInput[]
    OR?: AssetOnEventScalarWhereWithAggregatesInput[]
    NOT?: AssetOnEventScalarWhereWithAggregatesInput | AssetOnEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssetOnEvent"> | string
    assetId?: StringWithAggregatesFilter<"AssetOnEvent"> | string
    eventId?: StringWithAggregatesFilter<"AssetOnEvent"> | string
    role?: StringNullableWithAggregatesFilter<"AssetOnEvent"> | string | null
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    title?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    meta?: JsonNullableFilter<"Tag">
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    events?: TagOnEventListRelationFilter
    exhibitors?: TagOnExhibitorListRelationFilter
    products?: TagOnProductListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    events?: TagOnEventOrderByRelationAggregateInput
    exhibitors?: TagOnExhibitorOrderByRelationAggregateInput
    products?: TagOnProductOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    title?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    meta?: JsonNullableFilter<"Tag">
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    events?: TagOnEventListRelationFilter
    exhibitors?: TagOnExhibitorListRelationFilter
    products?: TagOnProductListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    title?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    color?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    meta?: JsonNullableWithAggregatesFilter<"Tag">
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    title?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    color?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    title?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    color?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    products?: ProductListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    title?: StringNullableWithAggregatesFilter<"Category"> | string | null
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    color?: StringNullableWithAggregatesFilter<"Category"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Category"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type TagOnEventWhereInput = {
    AND?: TagOnEventWhereInput | TagOnEventWhereInput[]
    OR?: TagOnEventWhereInput[]
    NOT?: TagOnEventWhereInput | TagOnEventWhereInput[]
    id?: StringFilter<"TagOnEvent"> | string
    tagId?: StringFilter<"TagOnEvent"> | string
    eventId?: StringFilter<"TagOnEvent"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type TagOnEventOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    eventId?: SortOrder
    tag?: TagOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type TagOnEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tagId_eventId?: TagOnEventTagIdEventIdCompoundUniqueInput
    AND?: TagOnEventWhereInput | TagOnEventWhereInput[]
    OR?: TagOnEventWhereInput[]
    NOT?: TagOnEventWhereInput | TagOnEventWhereInput[]
    tagId?: StringFilter<"TagOnEvent"> | string
    eventId?: StringFilter<"TagOnEvent"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id" | "tagId_eventId">

  export type TagOnEventOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    eventId?: SortOrder
    _count?: TagOnEventCountOrderByAggregateInput
    _max?: TagOnEventMaxOrderByAggregateInput
    _min?: TagOnEventMinOrderByAggregateInput
  }

  export type TagOnEventScalarWhereWithAggregatesInput = {
    AND?: TagOnEventScalarWhereWithAggregatesInput | TagOnEventScalarWhereWithAggregatesInput[]
    OR?: TagOnEventScalarWhereWithAggregatesInput[]
    NOT?: TagOnEventScalarWhereWithAggregatesInput | TagOnEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TagOnEvent"> | string
    tagId?: StringWithAggregatesFilter<"TagOnEvent"> | string
    eventId?: StringWithAggregatesFilter<"TagOnEvent"> | string
  }

  export type TagOnExhibitorWhereInput = {
    AND?: TagOnExhibitorWhereInput | TagOnExhibitorWhereInput[]
    OR?: TagOnExhibitorWhereInput[]
    NOT?: TagOnExhibitorWhereInput | TagOnExhibitorWhereInput[]
    id?: StringFilter<"TagOnExhibitor"> | string
    tagId?: StringFilter<"TagOnExhibitor"> | string
    exhibitorId?: StringFilter<"TagOnExhibitor"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    exhibitor?: XOR<ExhibitorRelationFilter, ExhibitorWhereInput>
  }

  export type TagOnExhibitorOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    exhibitorId?: SortOrder
    tag?: TagOrderByWithRelationInput
    exhibitor?: ExhibitorOrderByWithRelationInput
  }

  export type TagOnExhibitorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tagId_exhibitorId?: TagOnExhibitorTagIdExhibitorIdCompoundUniqueInput
    AND?: TagOnExhibitorWhereInput | TagOnExhibitorWhereInput[]
    OR?: TagOnExhibitorWhereInput[]
    NOT?: TagOnExhibitorWhereInput | TagOnExhibitorWhereInput[]
    tagId?: StringFilter<"TagOnExhibitor"> | string
    exhibitorId?: StringFilter<"TagOnExhibitor"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    exhibitor?: XOR<ExhibitorRelationFilter, ExhibitorWhereInput>
  }, "id" | "tagId_exhibitorId">

  export type TagOnExhibitorOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    exhibitorId?: SortOrder
    _count?: TagOnExhibitorCountOrderByAggregateInput
    _max?: TagOnExhibitorMaxOrderByAggregateInput
    _min?: TagOnExhibitorMinOrderByAggregateInput
  }

  export type TagOnExhibitorScalarWhereWithAggregatesInput = {
    AND?: TagOnExhibitorScalarWhereWithAggregatesInput | TagOnExhibitorScalarWhereWithAggregatesInput[]
    OR?: TagOnExhibitorScalarWhereWithAggregatesInput[]
    NOT?: TagOnExhibitorScalarWhereWithAggregatesInput | TagOnExhibitorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TagOnExhibitor"> | string
    tagId?: StringWithAggregatesFilter<"TagOnExhibitor"> | string
    exhibitorId?: StringWithAggregatesFilter<"TagOnExhibitor"> | string
  }

  export type TagOnProductWhereInput = {
    AND?: TagOnProductWhereInput | TagOnProductWhereInput[]
    OR?: TagOnProductWhereInput[]
    NOT?: TagOnProductWhereInput | TagOnProductWhereInput[]
    id?: StringFilter<"TagOnProduct"> | string
    tagId?: StringFilter<"TagOnProduct"> | string
    productId?: StringFilter<"TagOnProduct"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type TagOnProductOrderByWithRelationInput = {
    id?: SortOrder
    tagId?: SortOrder
    productId?: SortOrder
    tag?: TagOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type TagOnProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tagId_productId?: TagOnProductTagIdProductIdCompoundUniqueInput
    AND?: TagOnProductWhereInput | TagOnProductWhereInput[]
    OR?: TagOnProductWhereInput[]
    NOT?: TagOnProductWhereInput | TagOnProductWhereInput[]
    tagId?: StringFilter<"TagOnProduct"> | string
    productId?: StringFilter<"TagOnProduct"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id" | "tagId_productId">

  export type TagOnProductOrderByWithAggregationInput = {
    id?: SortOrder
    tagId?: SortOrder
    productId?: SortOrder
    _count?: TagOnProductCountOrderByAggregateInput
    _max?: TagOnProductMaxOrderByAggregateInput
    _min?: TagOnProductMinOrderByAggregateInput
  }

  export type TagOnProductScalarWhereWithAggregatesInput = {
    AND?: TagOnProductScalarWhereWithAggregatesInput | TagOnProductScalarWhereWithAggregatesInput[]
    OR?: TagOnProductScalarWhereWithAggregatesInput[]
    NOT?: TagOnProductScalarWhereWithAggregatesInput | TagOnProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TagOnProduct"> | string
    tagId?: StringWithAggregatesFilter<"TagOnProduct"> | string
    productId?: StringWithAggregatesFilter<"TagOnProduct"> | string
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    tokenHash?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    revoked?: BoolFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    tokenHash?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    revoked?: BoolFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    tokenHash?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    revoked?: BoolWithAggregatesFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    data?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    data?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    data?: JsonNullableWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type RecentWhereInput = {
    AND?: RecentWhereInput | RecentWhereInput[]
    OR?: RecentWhereInput[]
    NOT?: RecentWhereInput | RecentWhereInput[]
    id?: StringFilter<"Recent"> | string
    userId?: StringFilter<"Recent"> | string
    resourceType?: EnumResourceTypeFilter<"Recent"> | $Enums.ResourceType
    resourceId?: StringFilter<"Recent"> | string
    metadata?: JsonNullableFilter<"Recent">
    createdAt?: DateTimeFilter<"Recent"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RecentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RecentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecentWhereInput | RecentWhereInput[]
    OR?: RecentWhereInput[]
    NOT?: RecentWhereInput | RecentWhereInput[]
    userId?: StringFilter<"Recent"> | string
    resourceType?: EnumResourceTypeFilter<"Recent"> | $Enums.ResourceType
    resourceId?: StringFilter<"Recent"> | string
    metadata?: JsonNullableFilter<"Recent">
    createdAt?: DateTimeFilter<"Recent"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type RecentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RecentCountOrderByAggregateInput
    _max?: RecentMaxOrderByAggregateInput
    _min?: RecentMinOrderByAggregateInput
  }

  export type RecentScalarWhereWithAggregatesInput = {
    AND?: RecentScalarWhereWithAggregatesInput | RecentScalarWhereWithAggregatesInput[]
    OR?: RecentScalarWhereWithAggregatesInput[]
    NOT?: RecentScalarWhereWithAggregatesInput | RecentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recent"> | string
    userId?: StringWithAggregatesFilter<"Recent"> | string
    resourceType?: EnumResourceTypeWithAggregatesFilter<"Recent"> | $Enums.ResourceType
    resourceId?: StringWithAggregatesFilter<"Recent"> | string
    metadata?: JsonNullableWithAggregatesFilter<"Recent">
    createdAt?: DateTimeWithAggregatesFilter<"Recent"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventCreateInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutEventsCreatedInput
    exhibitor?: ExhibitorCreateNestedOneWithoutEventsInput
    speakers?: EventSpeakerCreateNestedManyWithoutEventInput
    attendees?: AttendeeCreateNestedManyWithoutEventInput
    tags?: TagOnEventCreateNestedManyWithoutEventInput
    assets?: AssetOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakers?: EventSpeakerUncheckedCreateNestedManyWithoutEventInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutEventInput
    tags?: TagOnEventUncheckedCreateNestedManyWithoutEventInput
    assets?: AssetOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutEventsCreatedNestedInput
    exhibitor?: ExhibitorUpdateOneWithoutEventsNestedInput
    speakers?: EventSpeakerUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakers?: EventSpeakerUncheckedUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUncheckedUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventSpeakerCreateInput = {
    id?: string
    role?: string | null
    order?: number | null
    event: EventCreateNestedOneWithoutSpeakersInput
    user: UserCreateNestedOneWithoutSpeakersForInput
  }

  export type EventSpeakerUncheckedCreateInput = {
    id?: string
    eventId: string
    userId: string
    role?: string | null
    order?: number | null
  }

  export type EventSpeakerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    event?: EventUpdateOneRequiredWithoutSpeakersNestedInput
    user?: UserUpdateOneRequiredWithoutSpeakersForNestedInput
  }

  export type EventSpeakerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventSpeakerCreateManyInput = {
    id?: string
    eventId: string
    userId: string
    role?: string | null
    order?: number | null
  }

  export type EventSpeakerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventSpeakerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExhibitorCreateInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutExhibitorInput
    products?: ProductCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorCreateNestedManyWithoutExhibitorInput
    events?: EventCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUncheckedCreateInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdById?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    events?: EventUncheckedCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutExhibitorNestedInput
    products?: ProductUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUpdateManyWithoutExhibitorNestedInput
    events?: EventUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    events?: EventUncheckedUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorCreateManyInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdById?: string | null
  }

  export type ExhibitorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExhibitorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    exhibitor: ExhibitorCreateNestedOneWithoutProductsInput
    category?: CategoryCreateNestedOneWithoutProductsInput
    assets?: AssetOnProductCreateNestedManyWithoutProductInput
    tags?: TagOnProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    exhibitorId: string
    categoryId?: string | null
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assets?: AssetOnProductUncheckedCreateNestedManyWithoutProductInput
    tags?: TagOnProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitor?: ExhibitorUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneWithoutProductsNestedInput
    assets?: AssetOnProductUpdateManyWithoutProductNestedInput
    tags?: TagOnProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assets?: AssetOnProductUncheckedUpdateManyWithoutProductNestedInput
    tags?: TagOnProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    exhibitorId: string
    categoryId?: string | null
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendeeCreateInput = {
    id?: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutAttendeesInput
    user?: UserCreateNestedOneWithoutAttendeesInput
  }

  export type AttendeeUncheckedCreateInput = {
    id?: string
    userId?: string | null
    eventId: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttendeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendeesNestedInput
    user?: UserUpdateOneWithoutAttendeesNestedInput
  }

  export type AttendeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendeeCreateManyInput = {
    id?: string
    userId?: string | null
    eventId: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttendeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteCreateInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateInput = {
    id?: string
    userId: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt?: Date | string
  }

  export type FavoriteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteCreateManyInput = {
    id?: string
    userId: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt?: Date | string
  }

  export type FavoriteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type?: string | null
    icon?: string | null
    color?: string | null
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    expiresAt?: Date | string | null
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId?: string | null
    type?: string | null
    icon?: string | null
    color?: string | null
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId?: string | null
    type?: string | null
    icon?: string | null
    color?: string | null
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetCreateInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductCreateNestedManyWithoutAssetInput
    exhibitorLinks?: AssetOnExhibitorCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetUncheckedCreateInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductUncheckedCreateNestedManyWithoutAssetInput
    exhibitorLinks?: AssetOnExhibitorUncheckedCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventUncheckedCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserUncheckedCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUpdateManyWithoutAssetNestedInput
    exhibitorLinks?: AssetOnExhibitorUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUpdateManyWithoutAvatarAssetNestedInput
  }

  export type AssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUncheckedUpdateManyWithoutAssetNestedInput
    exhibitorLinks?: AssetOnExhibitorUncheckedUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUncheckedUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUncheckedUpdateManyWithoutAvatarAssetNestedInput
  }

  export type AssetCreateManyInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetOnProductCreateInput = {
    id?: string
    role?: string | null
    asset: AssetCreateNestedOneWithoutProductLinksInput
    product: ProductCreateNestedOneWithoutAssetsInput
  }

  export type AssetOnProductUncheckedCreateInput = {
    id?: string
    assetId: string
    productId: string
    role?: string | null
  }

  export type AssetOnProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    asset?: AssetUpdateOneRequiredWithoutProductLinksNestedInput
    product?: ProductUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type AssetOnProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnProductCreateManyInput = {
    id?: string
    assetId: string
    productId: string
    role?: string | null
  }

  export type AssetOnProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnExhibitorCreateInput = {
    id?: string
    role?: string | null
    asset: AssetCreateNestedOneWithoutExhibitorLinksInput
    exhibitor: ExhibitorCreateNestedOneWithoutAssetsInput
  }

  export type AssetOnExhibitorUncheckedCreateInput = {
    id?: string
    assetId: string
    exhibitorId: string
    role?: string | null
  }

  export type AssetOnExhibitorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    asset?: AssetUpdateOneRequiredWithoutExhibitorLinksNestedInput
    exhibitor?: ExhibitorUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type AssetOnExhibitorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnExhibitorCreateManyInput = {
    id?: string
    assetId: string
    exhibitorId: string
    role?: string | null
  }

  export type AssetOnExhibitorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnExhibitorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnEventCreateInput = {
    id?: string
    role?: string | null
    asset: AssetCreateNestedOneWithoutEventLinksInput
    event: EventCreateNestedOneWithoutAssetsInput
  }

  export type AssetOnEventUncheckedCreateInput = {
    id?: string
    assetId: string
    eventId: string
    role?: string | null
  }

  export type AssetOnEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    asset?: AssetUpdateOneRequiredWithoutEventLinksNestedInput
    event?: EventUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type AssetOnEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnEventCreateManyInput = {
    id?: string
    assetId: string
    eventId: string
    role?: string | null
  }

  export type AssetOnEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    events?: TagOnEventCreateNestedManyWithoutTagInput
    exhibitors?: TagOnExhibitorCreateNestedManyWithoutTagInput
    products?: TagOnProductCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    events?: TagOnEventUncheckedCreateNestedManyWithoutTagInput
    exhibitors?: TagOnExhibitorUncheckedCreateNestedManyWithoutTagInput
    products?: TagOnProductUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: TagOnEventUpdateManyWithoutTagNestedInput
    exhibitors?: TagOnExhibitorUpdateManyWithoutTagNestedInput
    products?: TagOnProductUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: TagOnEventUncheckedUpdateManyWithoutTagNestedInput
    exhibitors?: TagOnExhibitorUncheckedUpdateManyWithoutTagNestedInput
    products?: TagOnProductUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagOnEventCreateInput = {
    id?: string
    tag: TagCreateNestedOneWithoutEventsInput
    event: EventCreateNestedOneWithoutTagsInput
  }

  export type TagOnEventUncheckedCreateInput = {
    id?: string
    tagId: string
    eventId: string
  }

  export type TagOnEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutEventsNestedInput
    event?: EventUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagOnEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnEventCreateManyInput = {
    id?: string
    tagId: string
    eventId: string
  }

  export type TagOnEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnExhibitorCreateInput = {
    id?: string
    tag: TagCreateNestedOneWithoutExhibitorsInput
    exhibitor: ExhibitorCreateNestedOneWithoutTagsInput
  }

  export type TagOnExhibitorUncheckedCreateInput = {
    id?: string
    tagId: string
    exhibitorId: string
  }

  export type TagOnExhibitorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutExhibitorsNestedInput
    exhibitor?: ExhibitorUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagOnExhibitorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnExhibitorCreateManyInput = {
    id?: string
    tagId: string
    exhibitorId: string
  }

  export type TagOnExhibitorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnExhibitorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnProductCreateInput = {
    id?: string
    tag: TagCreateNestedOneWithoutProductsInput
    product: ProductCreateNestedOneWithoutTagsInput
  }

  export type TagOnProductUncheckedCreateInput = {
    id?: string
    tagId: string
    productId: string
  }

  export type TagOnProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutProductsNestedInput
    product?: ProductUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagOnProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnProductCreateManyInput = {
    id?: string
    tagId: string
    productId: string
  }

  export type TagOnProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type RefreshTokenCreateInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    revoked?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    userId: string
    tokenHash: string
    expiresAt: Date | string
    revoked?: boolean
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    userId: string
    tokenHash: string
    expiresAt: Date | string
    revoked?: boolean
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentCreateInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRecentsInput
  }

  export type RecentUncheckedCreateInput = {
    id?: string
    userId: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecentsNestedInput
  }

  export type RecentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentCreateManyInput = {
    id?: string
    userId: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AssetNullableRelationFilter = {
    is?: AssetWhereInput | null
    isNot?: AssetWhereInput | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type EventSpeakerListRelationFilter = {
    every?: EventSpeakerWhereInput
    some?: EventSpeakerWhereInput
    none?: EventSpeakerWhereInput
  }

  export type AttendeeListRelationFilter = {
    every?: AttendeeWhereInput
    some?: AttendeeWhereInput
    none?: AttendeeWhereInput
  }

  export type FavoriteListRelationFilter = {
    every?: FavoriteWhereInput
    some?: FavoriteWhereInput
    none?: FavoriteWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type ExhibitorListRelationFilter = {
    every?: ExhibitorWhereInput
    some?: ExhibitorWhereInput
    none?: ExhibitorWhereInput
  }

  export type RecentListRelationFilter = {
    every?: RecentWhereInput
    some?: RecentWhereInput
    none?: RecentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventSpeakerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExhibitorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    avatarAssetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    avatarAssetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    avatarAssetId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ExhibitorNullableRelationFilter = {
    is?: ExhibitorWhereInput | null
    isNot?: ExhibitorWhereInput | null
  }

  export type TagOnEventListRelationFilter = {
    every?: TagOnEventWhereInput
    some?: TagOnEventWhereInput
    none?: TagOnEventWhereInput
  }

  export type AssetOnEventListRelationFilter = {
    every?: AssetOnEventWhereInput
    some?: AssetOnEventWhereInput
    none?: AssetOnEventWhereInput
  }

  export type TagOnEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetOnEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    color?: SortOrder
    start?: SortOrder
    end?: SortOrder
    timed?: SortOrder
    location?: SortOrder
    exhibitorId?: SortOrder
    timezone?: SortOrder
    published?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    color?: SortOrder
    start?: SortOrder
    end?: SortOrder
    timed?: SortOrder
    location?: SortOrder
    exhibitorId?: SortOrder
    timezone?: SortOrder
    published?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    color?: SortOrder
    start?: SortOrder
    end?: SortOrder
    timed?: SortOrder
    location?: SortOrder
    exhibitorId?: SortOrder
    timezone?: SortOrder
    published?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EventSpeakerEventIdUserIdCompoundUniqueInput = {
    eventId: string
    userId: string
  }

  export type EventSpeakerCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    order?: SortOrder
  }

  export type EventSpeakerAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EventSpeakerMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    order?: SortOrder
  }

  export type EventSpeakerMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    order?: SortOrder
  }

  export type EventSpeakerSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type AssetOnExhibitorListRelationFilter = {
    every?: AssetOnExhibitorWhereInput
    some?: AssetOnExhibitorWhereInput
    none?: AssetOnExhibitorWhereInput
  }

  export type TagOnExhibitorListRelationFilter = {
    every?: TagOnExhibitorWhereInput
    some?: TagOnExhibitorWhereInput
    none?: TagOnExhibitorWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetOnExhibitorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOnExhibitorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExhibitorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    website?: SortOrder
    location?: SortOrder
    sponsor?: SortOrder
    favoriteCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ExhibitorAvgOrderByAggregateInput = {
    favoriteCount?: SortOrder
  }

  export type ExhibitorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    website?: SortOrder
    location?: SortOrder
    sponsor?: SortOrder
    favoriteCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ExhibitorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    website?: SortOrder
    location?: SortOrder
    sponsor?: SortOrder
    favoriteCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ExhibitorSumOrderByAggregateInput = {
    favoriteCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ExhibitorRelationFilter = {
    is?: ExhibitorWhereInput
    isNot?: ExhibitorWhereInput
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type AssetOnProductListRelationFilter = {
    every?: AssetOnProductWhereInput
    some?: AssetOnProductWhereInput
    none?: AssetOnProductWhereInput
  }

  export type TagOnProductListRelationFilter = {
    every?: TagOnProductWhereInput
    some?: TagOnProductWhereInput
    none?: TagOnProductWhereInput
  }

  export type AssetOnProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOnProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    exhibitorId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    exhibitorId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    exhibitorId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    inStock?: SortOrder
    featured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type AttendeeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ticketType?: SortOrder
    checkedIn?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AttendeeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ticketType?: SortOrder
    checkedIn?: SortOrder
    createdAt?: SortOrder
  }

  export type AttendeeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ticketType?: SortOrder
    checkedIn?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumResourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResourceTypeFilter<$PrismaModel> | $Enums.ResourceType
  }

  export type FavoriteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumResourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResourceTypeFilter<$PrismaModel>
    _max?: NestedEnumResourceTypeFilter<$PrismaModel>
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    message?: SortOrder
    data?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    icon?: SortOrder
    color?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssetCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    meta?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AssetMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AssetMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AssetRelationFilter = {
    is?: AssetWhereInput
    isNot?: AssetWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type AssetOnProductCountOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    productId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnProductMaxOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    productId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnProductMinOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    productId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnExhibitorCountOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    exhibitorId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnExhibitorMaxOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    exhibitorId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnExhibitorMinOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    exhibitorId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnEventCountOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnEventMaxOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
  }

  export type AssetOnEventMinOrderByAggregateInput = {
    id?: SortOrder
    assetId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    color?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type TagOnEventTagIdEventIdCompoundUniqueInput = {
    tagId: string
    eventId: string
  }

  export type TagOnEventCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    eventId?: SortOrder
  }

  export type TagOnEventMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    eventId?: SortOrder
  }

  export type TagOnEventMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    eventId?: SortOrder
  }

  export type TagOnExhibitorTagIdExhibitorIdCompoundUniqueInput = {
    tagId: string
    exhibitorId: string
  }

  export type TagOnExhibitorCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    exhibitorId?: SortOrder
  }

  export type TagOnExhibitorMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    exhibitorId?: SortOrder
  }

  export type TagOnExhibitorMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    exhibitorId?: SortOrder
  }

  export type TagOnProductTagIdProductIdCompoundUniqueInput = {
    tagId: string
    productId: string
  }

  export type TagOnProductCountOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    productId?: SortOrder
  }

  export type TagOnProductMaxOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    productId?: SortOrder
  }

  export type TagOnProductMinOrderByAggregateInput = {
    id?: SortOrder
    tagId?: SortOrder
    productId?: SortOrder
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenHash?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type RecentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type RecentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type RecentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    resourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type AssetCreateNestedOneWithoutUserAvatarLinksInput = {
    create?: XOR<AssetCreateWithoutUserAvatarLinksInput, AssetUncheckedCreateWithoutUserAvatarLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutUserAvatarLinksInput
    connect?: AssetWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventSpeakerCreateNestedManyWithoutUserInput = {
    create?: XOR<EventSpeakerCreateWithoutUserInput, EventSpeakerUncheckedCreateWithoutUserInput> | EventSpeakerCreateWithoutUserInput[] | EventSpeakerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutUserInput | EventSpeakerCreateOrConnectWithoutUserInput[]
    createMany?: EventSpeakerCreateManyUserInputEnvelope
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
  }

  export type AttendeeCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendeeCreateWithoutUserInput, AttendeeUncheckedCreateWithoutUserInput> | AttendeeCreateWithoutUserInput[] | AttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutUserInput | AttendeeCreateOrConnectWithoutUserInput[]
    createMany?: AttendeeCreateManyUserInputEnvelope
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ExhibitorCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ExhibitorCreateWithoutCreatedByInput, ExhibitorUncheckedCreateWithoutCreatedByInput> | ExhibitorCreateWithoutCreatedByInput[] | ExhibitorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExhibitorCreateOrConnectWithoutCreatedByInput | ExhibitorCreateOrConnectWithoutCreatedByInput[]
    createMany?: ExhibitorCreateManyCreatedByInputEnvelope
    connect?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
  }

  export type RecentCreateNestedManyWithoutUserInput = {
    create?: XOR<RecentCreateWithoutUserInput, RecentUncheckedCreateWithoutUserInput> | RecentCreateWithoutUserInput[] | RecentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentCreateOrConnectWithoutUserInput | RecentCreateOrConnectWithoutUserInput[]
    createMany?: RecentCreateManyUserInputEnvelope
    connect?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventSpeakerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventSpeakerCreateWithoutUserInput, EventSpeakerUncheckedCreateWithoutUserInput> | EventSpeakerCreateWithoutUserInput[] | EventSpeakerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutUserInput | EventSpeakerCreateOrConnectWithoutUserInput[]
    createMany?: EventSpeakerCreateManyUserInputEnvelope
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
  }

  export type AttendeeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendeeCreateWithoutUserInput, AttendeeUncheckedCreateWithoutUserInput> | AttendeeCreateWithoutUserInput[] | AttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutUserInput | AttendeeCreateOrConnectWithoutUserInput[]
    createMany?: AttendeeCreateManyUserInputEnvelope
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ExhibitorCreateWithoutCreatedByInput, ExhibitorUncheckedCreateWithoutCreatedByInput> | ExhibitorCreateWithoutCreatedByInput[] | ExhibitorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExhibitorCreateOrConnectWithoutCreatedByInput | ExhibitorCreateOrConnectWithoutCreatedByInput[]
    createMany?: ExhibitorCreateManyCreatedByInputEnvelope
    connect?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
  }

  export type RecentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecentCreateWithoutUserInput, RecentUncheckedCreateWithoutUserInput> | RecentCreateWithoutUserInput[] | RecentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentCreateOrConnectWithoutUserInput | RecentCreateOrConnectWithoutUserInput[]
    createMany?: RecentCreateManyUserInputEnvelope
    connect?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AssetUpdateOneWithoutUserAvatarLinksNestedInput = {
    create?: XOR<AssetCreateWithoutUserAvatarLinksInput, AssetUncheckedCreateWithoutUserAvatarLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutUserAvatarLinksInput
    upsert?: AssetUpsertWithoutUserAvatarLinksInput
    disconnect?: AssetWhereInput | boolean
    delete?: AssetWhereInput | boolean
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutUserAvatarLinksInput, AssetUpdateWithoutUserAvatarLinksInput>, AssetUncheckedUpdateWithoutUserAvatarLinksInput>
  }

  export type EventUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatedByInput | EventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatedByInput | EventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatedByInput | EventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventSpeakerUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventSpeakerCreateWithoutUserInput, EventSpeakerUncheckedCreateWithoutUserInput> | EventSpeakerCreateWithoutUserInput[] | EventSpeakerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutUserInput | EventSpeakerCreateOrConnectWithoutUserInput[]
    upsert?: EventSpeakerUpsertWithWhereUniqueWithoutUserInput | EventSpeakerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventSpeakerCreateManyUserInputEnvelope
    set?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    disconnect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    delete?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    update?: EventSpeakerUpdateWithWhereUniqueWithoutUserInput | EventSpeakerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventSpeakerUpdateManyWithWhereWithoutUserInput | EventSpeakerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventSpeakerScalarWhereInput | EventSpeakerScalarWhereInput[]
  }

  export type AttendeeUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendeeCreateWithoutUserInput, AttendeeUncheckedCreateWithoutUserInput> | AttendeeCreateWithoutUserInput[] | AttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutUserInput | AttendeeCreateOrConnectWithoutUserInput[]
    upsert?: AttendeeUpsertWithWhereUniqueWithoutUserInput | AttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendeeCreateManyUserInputEnvelope
    set?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    disconnect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    delete?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    update?: AttendeeUpdateWithWhereUniqueWithoutUserInput | AttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendeeUpdateManyWithWhereWithoutUserInput | AttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendeeScalarWhereInput | AttendeeScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ExhibitorUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ExhibitorCreateWithoutCreatedByInput, ExhibitorUncheckedCreateWithoutCreatedByInput> | ExhibitorCreateWithoutCreatedByInput[] | ExhibitorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExhibitorCreateOrConnectWithoutCreatedByInput | ExhibitorCreateOrConnectWithoutCreatedByInput[]
    upsert?: ExhibitorUpsertWithWhereUniqueWithoutCreatedByInput | ExhibitorUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ExhibitorCreateManyCreatedByInputEnvelope
    set?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    disconnect?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    delete?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    connect?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    update?: ExhibitorUpdateWithWhereUniqueWithoutCreatedByInput | ExhibitorUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ExhibitorUpdateManyWithWhereWithoutCreatedByInput | ExhibitorUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ExhibitorScalarWhereInput | ExhibitorScalarWhereInput[]
  }

  export type RecentUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecentCreateWithoutUserInput, RecentUncheckedCreateWithoutUserInput> | RecentCreateWithoutUserInput[] | RecentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentCreateOrConnectWithoutUserInput | RecentCreateOrConnectWithoutUserInput[]
    upsert?: RecentUpsertWithWhereUniqueWithoutUserInput | RecentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecentCreateManyUserInputEnvelope
    set?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    disconnect?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    delete?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    connect?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    update?: RecentUpdateWithWhereUniqueWithoutUserInput | RecentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecentUpdateManyWithWhereWithoutUserInput | RecentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecentScalarWhereInput | RecentScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EventUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput> | EventCreateWithoutCreatedByInput[] | EventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EventCreateOrConnectWithoutCreatedByInput | EventCreateOrConnectWithoutCreatedByInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutCreatedByInput | EventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EventCreateManyCreatedByInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutCreatedByInput | EventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EventUpdateManyWithWhereWithoutCreatedByInput | EventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventSpeakerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventSpeakerCreateWithoutUserInput, EventSpeakerUncheckedCreateWithoutUserInput> | EventSpeakerCreateWithoutUserInput[] | EventSpeakerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutUserInput | EventSpeakerCreateOrConnectWithoutUserInput[]
    upsert?: EventSpeakerUpsertWithWhereUniqueWithoutUserInput | EventSpeakerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventSpeakerCreateManyUserInputEnvelope
    set?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    disconnect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    delete?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    update?: EventSpeakerUpdateWithWhereUniqueWithoutUserInput | EventSpeakerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventSpeakerUpdateManyWithWhereWithoutUserInput | EventSpeakerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventSpeakerScalarWhereInput | EventSpeakerScalarWhereInput[]
  }

  export type AttendeeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendeeCreateWithoutUserInput, AttendeeUncheckedCreateWithoutUserInput> | AttendeeCreateWithoutUserInput[] | AttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutUserInput | AttendeeCreateOrConnectWithoutUserInput[]
    upsert?: AttendeeUpsertWithWhereUniqueWithoutUserInput | AttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendeeCreateManyUserInputEnvelope
    set?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    disconnect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    delete?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    update?: AttendeeUpdateWithWhereUniqueWithoutUserInput | AttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendeeUpdateManyWithWhereWithoutUserInput | AttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendeeScalarWhereInput | AttendeeScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ExhibitorCreateWithoutCreatedByInput, ExhibitorUncheckedCreateWithoutCreatedByInput> | ExhibitorCreateWithoutCreatedByInput[] | ExhibitorUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExhibitorCreateOrConnectWithoutCreatedByInput | ExhibitorCreateOrConnectWithoutCreatedByInput[]
    upsert?: ExhibitorUpsertWithWhereUniqueWithoutCreatedByInput | ExhibitorUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ExhibitorCreateManyCreatedByInputEnvelope
    set?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    disconnect?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    delete?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    connect?: ExhibitorWhereUniqueInput | ExhibitorWhereUniqueInput[]
    update?: ExhibitorUpdateWithWhereUniqueWithoutCreatedByInput | ExhibitorUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ExhibitorUpdateManyWithWhereWithoutCreatedByInput | ExhibitorUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ExhibitorScalarWhereInput | ExhibitorScalarWhereInput[]
  }

  export type RecentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecentCreateWithoutUserInput, RecentUncheckedCreateWithoutUserInput> | RecentCreateWithoutUserInput[] | RecentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecentCreateOrConnectWithoutUserInput | RecentCreateOrConnectWithoutUserInput[]
    upsert?: RecentUpsertWithWhereUniqueWithoutUserInput | RecentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecentCreateManyUserInputEnvelope
    set?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    disconnect?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    delete?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    connect?: RecentWhereUniqueInput | RecentWhereUniqueInput[]
    update?: RecentUpdateWithWhereUniqueWithoutUserInput | RecentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecentUpdateManyWithWhereWithoutUserInput | RecentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecentScalarWhereInput | RecentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEventsCreatedInput = {
    create?: XOR<UserCreateWithoutEventsCreatedInput, UserUncheckedCreateWithoutEventsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ExhibitorCreateNestedOneWithoutEventsInput = {
    create?: XOR<ExhibitorCreateWithoutEventsInput, ExhibitorUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutEventsInput
    connect?: ExhibitorWhereUniqueInput
  }

  export type EventSpeakerCreateNestedManyWithoutEventInput = {
    create?: XOR<EventSpeakerCreateWithoutEventInput, EventSpeakerUncheckedCreateWithoutEventInput> | EventSpeakerCreateWithoutEventInput[] | EventSpeakerUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutEventInput | EventSpeakerCreateOrConnectWithoutEventInput[]
    createMany?: EventSpeakerCreateManyEventInputEnvelope
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
  }

  export type AttendeeCreateNestedManyWithoutEventInput = {
    create?: XOR<AttendeeCreateWithoutEventInput, AttendeeUncheckedCreateWithoutEventInput> | AttendeeCreateWithoutEventInput[] | AttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutEventInput | AttendeeCreateOrConnectWithoutEventInput[]
    createMany?: AttendeeCreateManyEventInputEnvelope
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
  }

  export type TagOnEventCreateNestedManyWithoutEventInput = {
    create?: XOR<TagOnEventCreateWithoutEventInput, TagOnEventUncheckedCreateWithoutEventInput> | TagOnEventCreateWithoutEventInput[] | TagOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutEventInput | TagOnEventCreateOrConnectWithoutEventInput[]
    createMany?: TagOnEventCreateManyEventInputEnvelope
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
  }

  export type AssetOnEventCreateNestedManyWithoutEventInput = {
    create?: XOR<AssetOnEventCreateWithoutEventInput, AssetOnEventUncheckedCreateWithoutEventInput> | AssetOnEventCreateWithoutEventInput[] | AssetOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutEventInput | AssetOnEventCreateOrConnectWithoutEventInput[]
    createMany?: AssetOnEventCreateManyEventInputEnvelope
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
  }

  export type EventSpeakerUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventSpeakerCreateWithoutEventInput, EventSpeakerUncheckedCreateWithoutEventInput> | EventSpeakerCreateWithoutEventInput[] | EventSpeakerUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutEventInput | EventSpeakerCreateOrConnectWithoutEventInput[]
    createMany?: EventSpeakerCreateManyEventInputEnvelope
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
  }

  export type AttendeeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AttendeeCreateWithoutEventInput, AttendeeUncheckedCreateWithoutEventInput> | AttendeeCreateWithoutEventInput[] | AttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutEventInput | AttendeeCreateOrConnectWithoutEventInput[]
    createMany?: AttendeeCreateManyEventInputEnvelope
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
  }

  export type TagOnEventUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<TagOnEventCreateWithoutEventInput, TagOnEventUncheckedCreateWithoutEventInput> | TagOnEventCreateWithoutEventInput[] | TagOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutEventInput | TagOnEventCreateOrConnectWithoutEventInput[]
    createMany?: TagOnEventCreateManyEventInputEnvelope
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
  }

  export type AssetOnEventUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AssetOnEventCreateWithoutEventInput, AssetOnEventUncheckedCreateWithoutEventInput> | AssetOnEventCreateWithoutEventInput[] | AssetOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutEventInput | AssetOnEventCreateOrConnectWithoutEventInput[]
    createMany?: AssetOnEventCreateManyEventInputEnvelope
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutEventsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutEventsCreatedInput, UserUncheckedCreateWithoutEventsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsCreatedInput
    upsert?: UserUpsertWithoutEventsCreatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsCreatedInput, UserUpdateWithoutEventsCreatedInput>, UserUncheckedUpdateWithoutEventsCreatedInput>
  }

  export type ExhibitorUpdateOneWithoutEventsNestedInput = {
    create?: XOR<ExhibitorCreateWithoutEventsInput, ExhibitorUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutEventsInput
    upsert?: ExhibitorUpsertWithoutEventsInput
    disconnect?: ExhibitorWhereInput | boolean
    delete?: ExhibitorWhereInput | boolean
    connect?: ExhibitorWhereUniqueInput
    update?: XOR<XOR<ExhibitorUpdateToOneWithWhereWithoutEventsInput, ExhibitorUpdateWithoutEventsInput>, ExhibitorUncheckedUpdateWithoutEventsInput>
  }

  export type EventSpeakerUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventSpeakerCreateWithoutEventInput, EventSpeakerUncheckedCreateWithoutEventInput> | EventSpeakerCreateWithoutEventInput[] | EventSpeakerUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutEventInput | EventSpeakerCreateOrConnectWithoutEventInput[]
    upsert?: EventSpeakerUpsertWithWhereUniqueWithoutEventInput | EventSpeakerUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventSpeakerCreateManyEventInputEnvelope
    set?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    disconnect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    delete?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    update?: EventSpeakerUpdateWithWhereUniqueWithoutEventInput | EventSpeakerUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventSpeakerUpdateManyWithWhereWithoutEventInput | EventSpeakerUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventSpeakerScalarWhereInput | EventSpeakerScalarWhereInput[]
  }

  export type AttendeeUpdateManyWithoutEventNestedInput = {
    create?: XOR<AttendeeCreateWithoutEventInput, AttendeeUncheckedCreateWithoutEventInput> | AttendeeCreateWithoutEventInput[] | AttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutEventInput | AttendeeCreateOrConnectWithoutEventInput[]
    upsert?: AttendeeUpsertWithWhereUniqueWithoutEventInput | AttendeeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AttendeeCreateManyEventInputEnvelope
    set?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    disconnect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    delete?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    update?: AttendeeUpdateWithWhereUniqueWithoutEventInput | AttendeeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AttendeeUpdateManyWithWhereWithoutEventInput | AttendeeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AttendeeScalarWhereInput | AttendeeScalarWhereInput[]
  }

  export type TagOnEventUpdateManyWithoutEventNestedInput = {
    create?: XOR<TagOnEventCreateWithoutEventInput, TagOnEventUncheckedCreateWithoutEventInput> | TagOnEventCreateWithoutEventInput[] | TagOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutEventInput | TagOnEventCreateOrConnectWithoutEventInput[]
    upsert?: TagOnEventUpsertWithWhereUniqueWithoutEventInput | TagOnEventUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TagOnEventCreateManyEventInputEnvelope
    set?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    disconnect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    delete?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    update?: TagOnEventUpdateWithWhereUniqueWithoutEventInput | TagOnEventUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TagOnEventUpdateManyWithWhereWithoutEventInput | TagOnEventUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TagOnEventScalarWhereInput | TagOnEventScalarWhereInput[]
  }

  export type AssetOnEventUpdateManyWithoutEventNestedInput = {
    create?: XOR<AssetOnEventCreateWithoutEventInput, AssetOnEventUncheckedCreateWithoutEventInput> | AssetOnEventCreateWithoutEventInput[] | AssetOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutEventInput | AssetOnEventCreateOrConnectWithoutEventInput[]
    upsert?: AssetOnEventUpsertWithWhereUniqueWithoutEventInput | AssetOnEventUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AssetOnEventCreateManyEventInputEnvelope
    set?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    disconnect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    delete?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    update?: AssetOnEventUpdateWithWhereUniqueWithoutEventInput | AssetOnEventUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AssetOnEventUpdateManyWithWhereWithoutEventInput | AssetOnEventUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AssetOnEventScalarWhereInput | AssetOnEventScalarWhereInput[]
  }

  export type EventSpeakerUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventSpeakerCreateWithoutEventInput, EventSpeakerUncheckedCreateWithoutEventInput> | EventSpeakerCreateWithoutEventInput[] | EventSpeakerUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSpeakerCreateOrConnectWithoutEventInput | EventSpeakerCreateOrConnectWithoutEventInput[]
    upsert?: EventSpeakerUpsertWithWhereUniqueWithoutEventInput | EventSpeakerUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventSpeakerCreateManyEventInputEnvelope
    set?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    disconnect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    delete?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    connect?: EventSpeakerWhereUniqueInput | EventSpeakerWhereUniqueInput[]
    update?: EventSpeakerUpdateWithWhereUniqueWithoutEventInput | EventSpeakerUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventSpeakerUpdateManyWithWhereWithoutEventInput | EventSpeakerUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventSpeakerScalarWhereInput | EventSpeakerScalarWhereInput[]
  }

  export type AttendeeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AttendeeCreateWithoutEventInput, AttendeeUncheckedCreateWithoutEventInput> | AttendeeCreateWithoutEventInput[] | AttendeeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AttendeeCreateOrConnectWithoutEventInput | AttendeeCreateOrConnectWithoutEventInput[]
    upsert?: AttendeeUpsertWithWhereUniqueWithoutEventInput | AttendeeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AttendeeCreateManyEventInputEnvelope
    set?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    disconnect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    delete?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    connect?: AttendeeWhereUniqueInput | AttendeeWhereUniqueInput[]
    update?: AttendeeUpdateWithWhereUniqueWithoutEventInput | AttendeeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AttendeeUpdateManyWithWhereWithoutEventInput | AttendeeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AttendeeScalarWhereInput | AttendeeScalarWhereInput[]
  }

  export type TagOnEventUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<TagOnEventCreateWithoutEventInput, TagOnEventUncheckedCreateWithoutEventInput> | TagOnEventCreateWithoutEventInput[] | TagOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutEventInput | TagOnEventCreateOrConnectWithoutEventInput[]
    upsert?: TagOnEventUpsertWithWhereUniqueWithoutEventInput | TagOnEventUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TagOnEventCreateManyEventInputEnvelope
    set?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    disconnect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    delete?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    update?: TagOnEventUpdateWithWhereUniqueWithoutEventInput | TagOnEventUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TagOnEventUpdateManyWithWhereWithoutEventInput | TagOnEventUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TagOnEventScalarWhereInput | TagOnEventScalarWhereInput[]
  }

  export type AssetOnEventUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AssetOnEventCreateWithoutEventInput, AssetOnEventUncheckedCreateWithoutEventInput> | AssetOnEventCreateWithoutEventInput[] | AssetOnEventUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutEventInput | AssetOnEventCreateOrConnectWithoutEventInput[]
    upsert?: AssetOnEventUpsertWithWhereUniqueWithoutEventInput | AssetOnEventUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AssetOnEventCreateManyEventInputEnvelope
    set?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    disconnect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    delete?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    update?: AssetOnEventUpdateWithWhereUniqueWithoutEventInput | AssetOnEventUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AssetOnEventUpdateManyWithWhereWithoutEventInput | AssetOnEventUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AssetOnEventScalarWhereInput | AssetOnEventScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutSpeakersInput = {
    create?: XOR<EventCreateWithoutSpeakersInput, EventUncheckedCreateWithoutSpeakersInput>
    connectOrCreate?: EventCreateOrConnectWithoutSpeakersInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSpeakersForInput = {
    create?: XOR<UserCreateWithoutSpeakersForInput, UserUncheckedCreateWithoutSpeakersForInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpeakersForInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateOneRequiredWithoutSpeakersNestedInput = {
    create?: XOR<EventCreateWithoutSpeakersInput, EventUncheckedCreateWithoutSpeakersInput>
    connectOrCreate?: EventCreateOrConnectWithoutSpeakersInput
    upsert?: EventUpsertWithoutSpeakersInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutSpeakersInput, EventUpdateWithoutSpeakersInput>, EventUncheckedUpdateWithoutSpeakersInput>
  }

  export type UserUpdateOneRequiredWithoutSpeakersForNestedInput = {
    create?: XOR<UserCreateWithoutSpeakersForInput, UserUncheckedCreateWithoutSpeakersForInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpeakersForInput
    upsert?: UserUpsertWithoutSpeakersForInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSpeakersForInput, UserUpdateWithoutSpeakersForInput>, UserUncheckedUpdateWithoutSpeakersForInput>
  }

  export type UserCreateNestedOneWithoutExhibitorInput = {
    create?: XOR<UserCreateWithoutExhibitorInput, UserUncheckedCreateWithoutExhibitorInput>
    connectOrCreate?: UserCreateOrConnectWithoutExhibitorInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<ProductCreateWithoutExhibitorInput, ProductUncheckedCreateWithoutExhibitorInput> | ProductCreateWithoutExhibitorInput[] | ProductUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutExhibitorInput | ProductCreateOrConnectWithoutExhibitorInput[]
    createMany?: ProductCreateManyExhibitorInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type AssetOnExhibitorCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutExhibitorInput, AssetOnExhibitorUncheckedCreateWithoutExhibitorInput> | AssetOnExhibitorCreateWithoutExhibitorInput[] | AssetOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutExhibitorInput | AssetOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    createMany?: AssetOnExhibitorCreateManyExhibitorInputEnvelope
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
  }

  export type TagOnExhibitorCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<TagOnExhibitorCreateWithoutExhibitorInput, TagOnExhibitorUncheckedCreateWithoutExhibitorInput> | TagOnExhibitorCreateWithoutExhibitorInput[] | TagOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutExhibitorInput | TagOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    createMany?: TagOnExhibitorCreateManyExhibitorInputEnvelope
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<EventCreateWithoutExhibitorInput, EventUncheckedCreateWithoutExhibitorInput> | EventCreateWithoutExhibitorInput[] | EventUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutExhibitorInput | EventCreateOrConnectWithoutExhibitorInput[]
    createMany?: EventCreateManyExhibitorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<ProductCreateWithoutExhibitorInput, ProductUncheckedCreateWithoutExhibitorInput> | ProductCreateWithoutExhibitorInput[] | ProductUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutExhibitorInput | ProductCreateOrConnectWithoutExhibitorInput[]
    createMany?: ProductCreateManyExhibitorInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type AssetOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutExhibitorInput, AssetOnExhibitorUncheckedCreateWithoutExhibitorInput> | AssetOnExhibitorCreateWithoutExhibitorInput[] | AssetOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutExhibitorInput | AssetOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    createMany?: AssetOnExhibitorCreateManyExhibitorInputEnvelope
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
  }

  export type TagOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<TagOnExhibitorCreateWithoutExhibitorInput, TagOnExhibitorUncheckedCreateWithoutExhibitorInput> | TagOnExhibitorCreateWithoutExhibitorInput[] | TagOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutExhibitorInput | TagOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    createMany?: TagOnExhibitorCreateManyExhibitorInputEnvelope
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutExhibitorInput = {
    create?: XOR<EventCreateWithoutExhibitorInput, EventUncheckedCreateWithoutExhibitorInput> | EventCreateWithoutExhibitorInput[] | EventUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutExhibitorInput | EventCreateOrConnectWithoutExhibitorInput[]
    createMany?: EventCreateManyExhibitorInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutExhibitorNestedInput = {
    create?: XOR<UserCreateWithoutExhibitorInput, UserUncheckedCreateWithoutExhibitorInput>
    connectOrCreate?: UserCreateOrConnectWithoutExhibitorInput
    upsert?: UserUpsertWithoutExhibitorInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExhibitorInput, UserUpdateWithoutExhibitorInput>, UserUncheckedUpdateWithoutExhibitorInput>
  }

  export type ProductUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<ProductCreateWithoutExhibitorInput, ProductUncheckedCreateWithoutExhibitorInput> | ProductCreateWithoutExhibitorInput[] | ProductUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutExhibitorInput | ProductCreateOrConnectWithoutExhibitorInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutExhibitorInput | ProductUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: ProductCreateManyExhibitorInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutExhibitorInput | ProductUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutExhibitorInput | ProductUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type AssetOnExhibitorUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutExhibitorInput, AssetOnExhibitorUncheckedCreateWithoutExhibitorInput> | AssetOnExhibitorCreateWithoutExhibitorInput[] | AssetOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutExhibitorInput | AssetOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    upsert?: AssetOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput | AssetOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: AssetOnExhibitorCreateManyExhibitorInputEnvelope
    set?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    disconnect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    delete?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    update?: AssetOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput | AssetOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: AssetOnExhibitorUpdateManyWithWhereWithoutExhibitorInput | AssetOnExhibitorUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: AssetOnExhibitorScalarWhereInput | AssetOnExhibitorScalarWhereInput[]
  }

  export type TagOnExhibitorUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<TagOnExhibitorCreateWithoutExhibitorInput, TagOnExhibitorUncheckedCreateWithoutExhibitorInput> | TagOnExhibitorCreateWithoutExhibitorInput[] | TagOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutExhibitorInput | TagOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    upsert?: TagOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput | TagOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: TagOnExhibitorCreateManyExhibitorInputEnvelope
    set?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    disconnect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    delete?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    update?: TagOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput | TagOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: TagOnExhibitorUpdateManyWithWhereWithoutExhibitorInput | TagOnExhibitorUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: TagOnExhibitorScalarWhereInput | TagOnExhibitorScalarWhereInput[]
  }

  export type EventUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<EventCreateWithoutExhibitorInput, EventUncheckedCreateWithoutExhibitorInput> | EventCreateWithoutExhibitorInput[] | EventUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutExhibitorInput | EventCreateOrConnectWithoutExhibitorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutExhibitorInput | EventUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: EventCreateManyExhibitorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutExhibitorInput | EventUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutExhibitorInput | EventUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<ProductCreateWithoutExhibitorInput, ProductUncheckedCreateWithoutExhibitorInput> | ProductCreateWithoutExhibitorInput[] | ProductUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutExhibitorInput | ProductCreateOrConnectWithoutExhibitorInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutExhibitorInput | ProductUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: ProductCreateManyExhibitorInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutExhibitorInput | ProductUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutExhibitorInput | ProductUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutExhibitorInput, AssetOnExhibitorUncheckedCreateWithoutExhibitorInput> | AssetOnExhibitorCreateWithoutExhibitorInput[] | AssetOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutExhibitorInput | AssetOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    upsert?: AssetOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput | AssetOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: AssetOnExhibitorCreateManyExhibitorInputEnvelope
    set?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    disconnect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    delete?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    update?: AssetOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput | AssetOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: AssetOnExhibitorUpdateManyWithWhereWithoutExhibitorInput | AssetOnExhibitorUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: AssetOnExhibitorScalarWhereInput | AssetOnExhibitorScalarWhereInput[]
  }

  export type TagOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<TagOnExhibitorCreateWithoutExhibitorInput, TagOnExhibitorUncheckedCreateWithoutExhibitorInput> | TagOnExhibitorCreateWithoutExhibitorInput[] | TagOnExhibitorUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutExhibitorInput | TagOnExhibitorCreateOrConnectWithoutExhibitorInput[]
    upsert?: TagOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput | TagOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: TagOnExhibitorCreateManyExhibitorInputEnvelope
    set?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    disconnect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    delete?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    update?: TagOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput | TagOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: TagOnExhibitorUpdateManyWithWhereWithoutExhibitorInput | TagOnExhibitorUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: TagOnExhibitorScalarWhereInput | TagOnExhibitorScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutExhibitorNestedInput = {
    create?: XOR<EventCreateWithoutExhibitorInput, EventUncheckedCreateWithoutExhibitorInput> | EventCreateWithoutExhibitorInput[] | EventUncheckedCreateWithoutExhibitorInput[]
    connectOrCreate?: EventCreateOrConnectWithoutExhibitorInput | EventCreateOrConnectWithoutExhibitorInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutExhibitorInput | EventUpsertWithWhereUniqueWithoutExhibitorInput[]
    createMany?: EventCreateManyExhibitorInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutExhibitorInput | EventUpdateWithWhereUniqueWithoutExhibitorInput[]
    updateMany?: EventUpdateManyWithWhereWithoutExhibitorInput | EventUpdateManyWithWhereWithoutExhibitorInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type ExhibitorCreateNestedOneWithoutProductsInput = {
    create?: XOR<ExhibitorCreateWithoutProductsInput, ExhibitorUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutProductsInput
    connect?: ExhibitorWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type AssetOnProductCreateNestedManyWithoutProductInput = {
    create?: XOR<AssetOnProductCreateWithoutProductInput, AssetOnProductUncheckedCreateWithoutProductInput> | AssetOnProductCreateWithoutProductInput[] | AssetOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutProductInput | AssetOnProductCreateOrConnectWithoutProductInput[]
    createMany?: AssetOnProductCreateManyProductInputEnvelope
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
  }

  export type TagOnProductCreateNestedManyWithoutProductInput = {
    create?: XOR<TagOnProductCreateWithoutProductInput, TagOnProductUncheckedCreateWithoutProductInput> | TagOnProductCreateWithoutProductInput[] | TagOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutProductInput | TagOnProductCreateOrConnectWithoutProductInput[]
    createMany?: TagOnProductCreateManyProductInputEnvelope
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
  }

  export type AssetOnProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<AssetOnProductCreateWithoutProductInput, AssetOnProductUncheckedCreateWithoutProductInput> | AssetOnProductCreateWithoutProductInput[] | AssetOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutProductInput | AssetOnProductCreateOrConnectWithoutProductInput[]
    createMany?: AssetOnProductCreateManyProductInputEnvelope
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
  }

  export type TagOnProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<TagOnProductCreateWithoutProductInput, TagOnProductUncheckedCreateWithoutProductInput> | TagOnProductCreateWithoutProductInput[] | TagOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutProductInput | TagOnProductCreateOrConnectWithoutProductInput[]
    createMany?: TagOnProductCreateManyProductInputEnvelope
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ExhibitorUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<ExhibitorCreateWithoutProductsInput, ExhibitorUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutProductsInput
    upsert?: ExhibitorUpsertWithoutProductsInput
    connect?: ExhibitorWhereUniqueInput
    update?: XOR<XOR<ExhibitorUpdateToOneWithWhereWithoutProductsInput, ExhibitorUpdateWithoutProductsInput>, ExhibitorUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type AssetOnProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<AssetOnProductCreateWithoutProductInput, AssetOnProductUncheckedCreateWithoutProductInput> | AssetOnProductCreateWithoutProductInput[] | AssetOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutProductInput | AssetOnProductCreateOrConnectWithoutProductInput[]
    upsert?: AssetOnProductUpsertWithWhereUniqueWithoutProductInput | AssetOnProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: AssetOnProductCreateManyProductInputEnvelope
    set?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    disconnect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    delete?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    update?: AssetOnProductUpdateWithWhereUniqueWithoutProductInput | AssetOnProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: AssetOnProductUpdateManyWithWhereWithoutProductInput | AssetOnProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: AssetOnProductScalarWhereInput | AssetOnProductScalarWhereInput[]
  }

  export type TagOnProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<TagOnProductCreateWithoutProductInput, TagOnProductUncheckedCreateWithoutProductInput> | TagOnProductCreateWithoutProductInput[] | TagOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutProductInput | TagOnProductCreateOrConnectWithoutProductInput[]
    upsert?: TagOnProductUpsertWithWhereUniqueWithoutProductInput | TagOnProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: TagOnProductCreateManyProductInputEnvelope
    set?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    disconnect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    delete?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    update?: TagOnProductUpdateWithWhereUniqueWithoutProductInput | TagOnProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: TagOnProductUpdateManyWithWhereWithoutProductInput | TagOnProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: TagOnProductScalarWhereInput | TagOnProductScalarWhereInput[]
  }

  export type AssetOnProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<AssetOnProductCreateWithoutProductInput, AssetOnProductUncheckedCreateWithoutProductInput> | AssetOnProductCreateWithoutProductInput[] | AssetOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutProductInput | AssetOnProductCreateOrConnectWithoutProductInput[]
    upsert?: AssetOnProductUpsertWithWhereUniqueWithoutProductInput | AssetOnProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: AssetOnProductCreateManyProductInputEnvelope
    set?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    disconnect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    delete?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    update?: AssetOnProductUpdateWithWhereUniqueWithoutProductInput | AssetOnProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: AssetOnProductUpdateManyWithWhereWithoutProductInput | AssetOnProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: AssetOnProductScalarWhereInput | AssetOnProductScalarWhereInput[]
  }

  export type TagOnProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<TagOnProductCreateWithoutProductInput, TagOnProductUncheckedCreateWithoutProductInput> | TagOnProductCreateWithoutProductInput[] | TagOnProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutProductInput | TagOnProductCreateOrConnectWithoutProductInput[]
    upsert?: TagOnProductUpsertWithWhereUniqueWithoutProductInput | TagOnProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: TagOnProductCreateManyProductInputEnvelope
    set?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    disconnect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    delete?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    update?: TagOnProductUpdateWithWhereUniqueWithoutProductInput | TagOnProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: TagOnProductUpdateManyWithWhereWithoutProductInput | TagOnProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: TagOnProductScalarWhereInput | TagOnProductScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutAttendeesInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttendeesInput = {
    create?: XOR<UserCreateWithoutAttendeesInput, UserUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendeesInput
    connect?: UserWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutAttendeesNestedInput = {
    create?: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAttendeesInput
    upsert?: EventUpsertWithoutAttendeesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAttendeesInput, EventUpdateWithoutAttendeesInput>, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type UserUpdateOneWithoutAttendeesNestedInput = {
    create?: XOR<UserCreateWithoutAttendeesInput, UserUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendeesInput
    upsert?: UserUpsertWithoutAttendeesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendeesInput, UserUpdateWithoutAttendeesInput>, UserUncheckedUpdateWithoutAttendeesInput>
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumResourceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ResourceType
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type AssetOnProductCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetOnProductCreateWithoutAssetInput, AssetOnProductUncheckedCreateWithoutAssetInput> | AssetOnProductCreateWithoutAssetInput[] | AssetOnProductUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutAssetInput | AssetOnProductCreateOrConnectWithoutAssetInput[]
    createMany?: AssetOnProductCreateManyAssetInputEnvelope
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
  }

  export type AssetOnExhibitorCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutAssetInput, AssetOnExhibitorUncheckedCreateWithoutAssetInput> | AssetOnExhibitorCreateWithoutAssetInput[] | AssetOnExhibitorUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutAssetInput | AssetOnExhibitorCreateOrConnectWithoutAssetInput[]
    createMany?: AssetOnExhibitorCreateManyAssetInputEnvelope
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
  }

  export type AssetOnEventCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetOnEventCreateWithoutAssetInput, AssetOnEventUncheckedCreateWithoutAssetInput> | AssetOnEventCreateWithoutAssetInput[] | AssetOnEventUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutAssetInput | AssetOnEventCreateOrConnectWithoutAssetInput[]
    createMany?: AssetOnEventCreateManyAssetInputEnvelope
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutAvatarAssetInput = {
    create?: XOR<UserCreateWithoutAvatarAssetInput, UserUncheckedCreateWithoutAvatarAssetInput> | UserCreateWithoutAvatarAssetInput[] | UserUncheckedCreateWithoutAvatarAssetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarAssetInput | UserCreateOrConnectWithoutAvatarAssetInput[]
    createMany?: UserCreateManyAvatarAssetInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssetOnProductUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetOnProductCreateWithoutAssetInput, AssetOnProductUncheckedCreateWithoutAssetInput> | AssetOnProductCreateWithoutAssetInput[] | AssetOnProductUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutAssetInput | AssetOnProductCreateOrConnectWithoutAssetInput[]
    createMany?: AssetOnProductCreateManyAssetInputEnvelope
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
  }

  export type AssetOnExhibitorUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutAssetInput, AssetOnExhibitorUncheckedCreateWithoutAssetInput> | AssetOnExhibitorCreateWithoutAssetInput[] | AssetOnExhibitorUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutAssetInput | AssetOnExhibitorCreateOrConnectWithoutAssetInput[]
    createMany?: AssetOnExhibitorCreateManyAssetInputEnvelope
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
  }

  export type AssetOnEventUncheckedCreateNestedManyWithoutAssetInput = {
    create?: XOR<AssetOnEventCreateWithoutAssetInput, AssetOnEventUncheckedCreateWithoutAssetInput> | AssetOnEventCreateWithoutAssetInput[] | AssetOnEventUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutAssetInput | AssetOnEventCreateOrConnectWithoutAssetInput[]
    createMany?: AssetOnEventCreateManyAssetInputEnvelope
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAvatarAssetInput = {
    create?: XOR<UserCreateWithoutAvatarAssetInput, UserUncheckedCreateWithoutAvatarAssetInput> | UserCreateWithoutAvatarAssetInput[] | UserUncheckedCreateWithoutAvatarAssetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarAssetInput | UserCreateOrConnectWithoutAvatarAssetInput[]
    createMany?: UserCreateManyAvatarAssetInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssetOnProductUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetOnProductCreateWithoutAssetInput, AssetOnProductUncheckedCreateWithoutAssetInput> | AssetOnProductCreateWithoutAssetInput[] | AssetOnProductUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutAssetInput | AssetOnProductCreateOrConnectWithoutAssetInput[]
    upsert?: AssetOnProductUpsertWithWhereUniqueWithoutAssetInput | AssetOnProductUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetOnProductCreateManyAssetInputEnvelope
    set?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    disconnect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    delete?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    update?: AssetOnProductUpdateWithWhereUniqueWithoutAssetInput | AssetOnProductUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetOnProductUpdateManyWithWhereWithoutAssetInput | AssetOnProductUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetOnProductScalarWhereInput | AssetOnProductScalarWhereInput[]
  }

  export type AssetOnExhibitorUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutAssetInput, AssetOnExhibitorUncheckedCreateWithoutAssetInput> | AssetOnExhibitorCreateWithoutAssetInput[] | AssetOnExhibitorUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutAssetInput | AssetOnExhibitorCreateOrConnectWithoutAssetInput[]
    upsert?: AssetOnExhibitorUpsertWithWhereUniqueWithoutAssetInput | AssetOnExhibitorUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetOnExhibitorCreateManyAssetInputEnvelope
    set?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    disconnect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    delete?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    update?: AssetOnExhibitorUpdateWithWhereUniqueWithoutAssetInput | AssetOnExhibitorUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetOnExhibitorUpdateManyWithWhereWithoutAssetInput | AssetOnExhibitorUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetOnExhibitorScalarWhereInput | AssetOnExhibitorScalarWhereInput[]
  }

  export type AssetOnEventUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetOnEventCreateWithoutAssetInput, AssetOnEventUncheckedCreateWithoutAssetInput> | AssetOnEventCreateWithoutAssetInput[] | AssetOnEventUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutAssetInput | AssetOnEventCreateOrConnectWithoutAssetInput[]
    upsert?: AssetOnEventUpsertWithWhereUniqueWithoutAssetInput | AssetOnEventUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetOnEventCreateManyAssetInputEnvelope
    set?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    disconnect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    delete?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    update?: AssetOnEventUpdateWithWhereUniqueWithoutAssetInput | AssetOnEventUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetOnEventUpdateManyWithWhereWithoutAssetInput | AssetOnEventUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetOnEventScalarWhereInput | AssetOnEventScalarWhereInput[]
  }

  export type UserUpdateManyWithoutAvatarAssetNestedInput = {
    create?: XOR<UserCreateWithoutAvatarAssetInput, UserUncheckedCreateWithoutAvatarAssetInput> | UserCreateWithoutAvatarAssetInput[] | UserUncheckedCreateWithoutAvatarAssetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarAssetInput | UserCreateOrConnectWithoutAvatarAssetInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarAssetInput | UserUpsertWithWhereUniqueWithoutAvatarAssetInput[]
    createMany?: UserCreateManyAvatarAssetInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarAssetInput | UserUpdateWithWhereUniqueWithoutAvatarAssetInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarAssetInput | UserUpdateManyWithWhereWithoutAvatarAssetInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssetOnProductUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetOnProductCreateWithoutAssetInput, AssetOnProductUncheckedCreateWithoutAssetInput> | AssetOnProductCreateWithoutAssetInput[] | AssetOnProductUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnProductCreateOrConnectWithoutAssetInput | AssetOnProductCreateOrConnectWithoutAssetInput[]
    upsert?: AssetOnProductUpsertWithWhereUniqueWithoutAssetInput | AssetOnProductUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetOnProductCreateManyAssetInputEnvelope
    set?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    disconnect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    delete?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    connect?: AssetOnProductWhereUniqueInput | AssetOnProductWhereUniqueInput[]
    update?: AssetOnProductUpdateWithWhereUniqueWithoutAssetInput | AssetOnProductUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetOnProductUpdateManyWithWhereWithoutAssetInput | AssetOnProductUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetOnProductScalarWhereInput | AssetOnProductScalarWhereInput[]
  }

  export type AssetOnExhibitorUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetOnExhibitorCreateWithoutAssetInput, AssetOnExhibitorUncheckedCreateWithoutAssetInput> | AssetOnExhibitorCreateWithoutAssetInput[] | AssetOnExhibitorUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnExhibitorCreateOrConnectWithoutAssetInput | AssetOnExhibitorCreateOrConnectWithoutAssetInput[]
    upsert?: AssetOnExhibitorUpsertWithWhereUniqueWithoutAssetInput | AssetOnExhibitorUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetOnExhibitorCreateManyAssetInputEnvelope
    set?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    disconnect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    delete?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    connect?: AssetOnExhibitorWhereUniqueInput | AssetOnExhibitorWhereUniqueInput[]
    update?: AssetOnExhibitorUpdateWithWhereUniqueWithoutAssetInput | AssetOnExhibitorUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetOnExhibitorUpdateManyWithWhereWithoutAssetInput | AssetOnExhibitorUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetOnExhibitorScalarWhereInput | AssetOnExhibitorScalarWhereInput[]
  }

  export type AssetOnEventUncheckedUpdateManyWithoutAssetNestedInput = {
    create?: XOR<AssetOnEventCreateWithoutAssetInput, AssetOnEventUncheckedCreateWithoutAssetInput> | AssetOnEventCreateWithoutAssetInput[] | AssetOnEventUncheckedCreateWithoutAssetInput[]
    connectOrCreate?: AssetOnEventCreateOrConnectWithoutAssetInput | AssetOnEventCreateOrConnectWithoutAssetInput[]
    upsert?: AssetOnEventUpsertWithWhereUniqueWithoutAssetInput | AssetOnEventUpsertWithWhereUniqueWithoutAssetInput[]
    createMany?: AssetOnEventCreateManyAssetInputEnvelope
    set?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    disconnect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    delete?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    connect?: AssetOnEventWhereUniqueInput | AssetOnEventWhereUniqueInput[]
    update?: AssetOnEventUpdateWithWhereUniqueWithoutAssetInput | AssetOnEventUpdateWithWhereUniqueWithoutAssetInput[]
    updateMany?: AssetOnEventUpdateManyWithWhereWithoutAssetInput | AssetOnEventUpdateManyWithWhereWithoutAssetInput[]
    deleteMany?: AssetOnEventScalarWhereInput | AssetOnEventScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAvatarAssetNestedInput = {
    create?: XOR<UserCreateWithoutAvatarAssetInput, UserUncheckedCreateWithoutAvatarAssetInput> | UserCreateWithoutAvatarAssetInput[] | UserUncheckedCreateWithoutAvatarAssetInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarAssetInput | UserCreateOrConnectWithoutAvatarAssetInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarAssetInput | UserUpsertWithWhereUniqueWithoutAvatarAssetInput[]
    createMany?: UserCreateManyAvatarAssetInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarAssetInput | UserUpdateWithWhereUniqueWithoutAvatarAssetInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarAssetInput | UserUpdateManyWithWhereWithoutAvatarAssetInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssetCreateNestedOneWithoutProductLinksInput = {
    create?: XOR<AssetCreateWithoutProductLinksInput, AssetUncheckedCreateWithoutProductLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutProductLinksInput
    connect?: AssetWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutAssetsInput = {
    create?: XOR<ProductCreateWithoutAssetsInput, ProductUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutAssetsInput
    connect?: ProductWhereUniqueInput
  }

  export type AssetUpdateOneRequiredWithoutProductLinksNestedInput = {
    create?: XOR<AssetCreateWithoutProductLinksInput, AssetUncheckedCreateWithoutProductLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutProductLinksInput
    upsert?: AssetUpsertWithoutProductLinksInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutProductLinksInput, AssetUpdateWithoutProductLinksInput>, AssetUncheckedUpdateWithoutProductLinksInput>
  }

  export type ProductUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<ProductCreateWithoutAssetsInput, ProductUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutAssetsInput
    upsert?: ProductUpsertWithoutAssetsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutAssetsInput, ProductUpdateWithoutAssetsInput>, ProductUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetCreateNestedOneWithoutExhibitorLinksInput = {
    create?: XOR<AssetCreateWithoutExhibitorLinksInput, AssetUncheckedCreateWithoutExhibitorLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutExhibitorLinksInput
    connect?: AssetWhereUniqueInput
  }

  export type ExhibitorCreateNestedOneWithoutAssetsInput = {
    create?: XOR<ExhibitorCreateWithoutAssetsInput, ExhibitorUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutAssetsInput
    connect?: ExhibitorWhereUniqueInput
  }

  export type AssetUpdateOneRequiredWithoutExhibitorLinksNestedInput = {
    create?: XOR<AssetCreateWithoutExhibitorLinksInput, AssetUncheckedCreateWithoutExhibitorLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutExhibitorLinksInput
    upsert?: AssetUpsertWithoutExhibitorLinksInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutExhibitorLinksInput, AssetUpdateWithoutExhibitorLinksInput>, AssetUncheckedUpdateWithoutExhibitorLinksInput>
  }

  export type ExhibitorUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<ExhibitorCreateWithoutAssetsInput, ExhibitorUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutAssetsInput
    upsert?: ExhibitorUpsertWithoutAssetsInput
    connect?: ExhibitorWhereUniqueInput
    update?: XOR<XOR<ExhibitorUpdateToOneWithWhereWithoutAssetsInput, ExhibitorUpdateWithoutAssetsInput>, ExhibitorUncheckedUpdateWithoutAssetsInput>
  }

  export type AssetCreateNestedOneWithoutEventLinksInput = {
    create?: XOR<AssetCreateWithoutEventLinksInput, AssetUncheckedCreateWithoutEventLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutEventLinksInput
    connect?: AssetWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutAssetsInput = {
    create?: XOR<EventCreateWithoutAssetsInput, EventUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: EventCreateOrConnectWithoutAssetsInput
    connect?: EventWhereUniqueInput
  }

  export type AssetUpdateOneRequiredWithoutEventLinksNestedInput = {
    create?: XOR<AssetCreateWithoutEventLinksInput, AssetUncheckedCreateWithoutEventLinksInput>
    connectOrCreate?: AssetCreateOrConnectWithoutEventLinksInput
    upsert?: AssetUpsertWithoutEventLinksInput
    connect?: AssetWhereUniqueInput
    update?: XOR<XOR<AssetUpdateToOneWithWhereWithoutEventLinksInput, AssetUpdateWithoutEventLinksInput>, AssetUncheckedUpdateWithoutEventLinksInput>
  }

  export type EventUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<EventCreateWithoutAssetsInput, EventUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: EventCreateOrConnectWithoutAssetsInput
    upsert?: EventUpsertWithoutAssetsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAssetsInput, EventUpdateWithoutAssetsInput>, EventUncheckedUpdateWithoutAssetsInput>
  }

  export type TagOnEventCreateNestedManyWithoutTagInput = {
    create?: XOR<TagOnEventCreateWithoutTagInput, TagOnEventUncheckedCreateWithoutTagInput> | TagOnEventCreateWithoutTagInput[] | TagOnEventUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutTagInput | TagOnEventCreateOrConnectWithoutTagInput[]
    createMany?: TagOnEventCreateManyTagInputEnvelope
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
  }

  export type TagOnExhibitorCreateNestedManyWithoutTagInput = {
    create?: XOR<TagOnExhibitorCreateWithoutTagInput, TagOnExhibitorUncheckedCreateWithoutTagInput> | TagOnExhibitorCreateWithoutTagInput[] | TagOnExhibitorUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutTagInput | TagOnExhibitorCreateOrConnectWithoutTagInput[]
    createMany?: TagOnExhibitorCreateManyTagInputEnvelope
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
  }

  export type TagOnProductCreateNestedManyWithoutTagInput = {
    create?: XOR<TagOnProductCreateWithoutTagInput, TagOnProductUncheckedCreateWithoutTagInput> | TagOnProductCreateWithoutTagInput[] | TagOnProductUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutTagInput | TagOnProductCreateOrConnectWithoutTagInput[]
    createMany?: TagOnProductCreateManyTagInputEnvelope
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
  }

  export type TagOnEventUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagOnEventCreateWithoutTagInput, TagOnEventUncheckedCreateWithoutTagInput> | TagOnEventCreateWithoutTagInput[] | TagOnEventUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutTagInput | TagOnEventCreateOrConnectWithoutTagInput[]
    createMany?: TagOnEventCreateManyTagInputEnvelope
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
  }

  export type TagOnExhibitorUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagOnExhibitorCreateWithoutTagInput, TagOnExhibitorUncheckedCreateWithoutTagInput> | TagOnExhibitorCreateWithoutTagInput[] | TagOnExhibitorUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutTagInput | TagOnExhibitorCreateOrConnectWithoutTagInput[]
    createMany?: TagOnExhibitorCreateManyTagInputEnvelope
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
  }

  export type TagOnProductUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<TagOnProductCreateWithoutTagInput, TagOnProductUncheckedCreateWithoutTagInput> | TagOnProductCreateWithoutTagInput[] | TagOnProductUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutTagInput | TagOnProductCreateOrConnectWithoutTagInput[]
    createMany?: TagOnProductCreateManyTagInputEnvelope
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
  }

  export type TagOnEventUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagOnEventCreateWithoutTagInput, TagOnEventUncheckedCreateWithoutTagInput> | TagOnEventCreateWithoutTagInput[] | TagOnEventUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutTagInput | TagOnEventCreateOrConnectWithoutTagInput[]
    upsert?: TagOnEventUpsertWithWhereUniqueWithoutTagInput | TagOnEventUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagOnEventCreateManyTagInputEnvelope
    set?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    disconnect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    delete?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    update?: TagOnEventUpdateWithWhereUniqueWithoutTagInput | TagOnEventUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagOnEventUpdateManyWithWhereWithoutTagInput | TagOnEventUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagOnEventScalarWhereInput | TagOnEventScalarWhereInput[]
  }

  export type TagOnExhibitorUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagOnExhibitorCreateWithoutTagInput, TagOnExhibitorUncheckedCreateWithoutTagInput> | TagOnExhibitorCreateWithoutTagInput[] | TagOnExhibitorUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutTagInput | TagOnExhibitorCreateOrConnectWithoutTagInput[]
    upsert?: TagOnExhibitorUpsertWithWhereUniqueWithoutTagInput | TagOnExhibitorUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagOnExhibitorCreateManyTagInputEnvelope
    set?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    disconnect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    delete?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    update?: TagOnExhibitorUpdateWithWhereUniqueWithoutTagInput | TagOnExhibitorUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagOnExhibitorUpdateManyWithWhereWithoutTagInput | TagOnExhibitorUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagOnExhibitorScalarWhereInput | TagOnExhibitorScalarWhereInput[]
  }

  export type TagOnProductUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagOnProductCreateWithoutTagInput, TagOnProductUncheckedCreateWithoutTagInput> | TagOnProductCreateWithoutTagInput[] | TagOnProductUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutTagInput | TagOnProductCreateOrConnectWithoutTagInput[]
    upsert?: TagOnProductUpsertWithWhereUniqueWithoutTagInput | TagOnProductUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagOnProductCreateManyTagInputEnvelope
    set?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    disconnect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    delete?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    update?: TagOnProductUpdateWithWhereUniqueWithoutTagInput | TagOnProductUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagOnProductUpdateManyWithWhereWithoutTagInput | TagOnProductUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagOnProductScalarWhereInput | TagOnProductScalarWhereInput[]
  }

  export type TagOnEventUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagOnEventCreateWithoutTagInput, TagOnEventUncheckedCreateWithoutTagInput> | TagOnEventCreateWithoutTagInput[] | TagOnEventUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnEventCreateOrConnectWithoutTagInput | TagOnEventCreateOrConnectWithoutTagInput[]
    upsert?: TagOnEventUpsertWithWhereUniqueWithoutTagInput | TagOnEventUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagOnEventCreateManyTagInputEnvelope
    set?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    disconnect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    delete?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    connect?: TagOnEventWhereUniqueInput | TagOnEventWhereUniqueInput[]
    update?: TagOnEventUpdateWithWhereUniqueWithoutTagInput | TagOnEventUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagOnEventUpdateManyWithWhereWithoutTagInput | TagOnEventUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagOnEventScalarWhereInput | TagOnEventScalarWhereInput[]
  }

  export type TagOnExhibitorUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagOnExhibitorCreateWithoutTagInput, TagOnExhibitorUncheckedCreateWithoutTagInput> | TagOnExhibitorCreateWithoutTagInput[] | TagOnExhibitorUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnExhibitorCreateOrConnectWithoutTagInput | TagOnExhibitorCreateOrConnectWithoutTagInput[]
    upsert?: TagOnExhibitorUpsertWithWhereUniqueWithoutTagInput | TagOnExhibitorUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagOnExhibitorCreateManyTagInputEnvelope
    set?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    disconnect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    delete?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    connect?: TagOnExhibitorWhereUniqueInput | TagOnExhibitorWhereUniqueInput[]
    update?: TagOnExhibitorUpdateWithWhereUniqueWithoutTagInput | TagOnExhibitorUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagOnExhibitorUpdateManyWithWhereWithoutTagInput | TagOnExhibitorUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagOnExhibitorScalarWhereInput | TagOnExhibitorScalarWhereInput[]
  }

  export type TagOnProductUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<TagOnProductCreateWithoutTagInput, TagOnProductUncheckedCreateWithoutTagInput> | TagOnProductCreateWithoutTagInput[] | TagOnProductUncheckedCreateWithoutTagInput[]
    connectOrCreate?: TagOnProductCreateOrConnectWithoutTagInput | TagOnProductCreateOrConnectWithoutTagInput[]
    upsert?: TagOnProductUpsertWithWhereUniqueWithoutTagInput | TagOnProductUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: TagOnProductCreateManyTagInputEnvelope
    set?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    disconnect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    delete?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    connect?: TagOnProductWhereUniqueInput | TagOnProductWhereUniqueInput[]
    update?: TagOnProductUpdateWithWhereUniqueWithoutTagInput | TagOnProductUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: TagOnProductUpdateManyWithWhereWithoutTagInput | TagOnProductUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: TagOnProductScalarWhereInput | TagOnProductScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type TagCreateNestedOneWithoutEventsInput = {
    create?: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
    connectOrCreate?: TagCreateOrConnectWithoutEventsInput
    connect?: TagWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutTagsInput = {
    create?: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTagsInput
    connect?: EventWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
    connectOrCreate?: TagCreateOrConnectWithoutEventsInput
    upsert?: TagUpsertWithoutEventsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutEventsInput, TagUpdateWithoutEventsInput>, TagUncheckedUpdateWithoutEventsInput>
  }

  export type EventUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTagsInput
    upsert?: EventUpsertWithoutTagsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutTagsInput, EventUpdateWithoutTagsInput>, EventUncheckedUpdateWithoutTagsInput>
  }

  export type TagCreateNestedOneWithoutExhibitorsInput = {
    create?: XOR<TagCreateWithoutExhibitorsInput, TagUncheckedCreateWithoutExhibitorsInput>
    connectOrCreate?: TagCreateOrConnectWithoutExhibitorsInput
    connect?: TagWhereUniqueInput
  }

  export type ExhibitorCreateNestedOneWithoutTagsInput = {
    create?: XOR<ExhibitorCreateWithoutTagsInput, ExhibitorUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutTagsInput
    connect?: ExhibitorWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutExhibitorsNestedInput = {
    create?: XOR<TagCreateWithoutExhibitorsInput, TagUncheckedCreateWithoutExhibitorsInput>
    connectOrCreate?: TagCreateOrConnectWithoutExhibitorsInput
    upsert?: TagUpsertWithoutExhibitorsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutExhibitorsInput, TagUpdateWithoutExhibitorsInput>, TagUncheckedUpdateWithoutExhibitorsInput>
  }

  export type ExhibitorUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ExhibitorCreateWithoutTagsInput, ExhibitorUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ExhibitorCreateOrConnectWithoutTagsInput
    upsert?: ExhibitorUpsertWithoutTagsInput
    connect?: ExhibitorWhereUniqueInput
    update?: XOR<XOR<ExhibitorUpdateToOneWithWhereWithoutTagsInput, ExhibitorUpdateWithoutTagsInput>, ExhibitorUncheckedUpdateWithoutTagsInput>
  }

  export type TagCreateNestedOneWithoutProductsInput = {
    create?: XOR<TagCreateWithoutProductsInput, TagUncheckedCreateWithoutProductsInput>
    connectOrCreate?: TagCreateOrConnectWithoutProductsInput
    connect?: TagWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutTagsInput = {
    create?: XOR<ProductCreateWithoutTagsInput, ProductUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTagsInput
    connect?: ProductWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<TagCreateWithoutProductsInput, TagUncheckedCreateWithoutProductsInput>
    connectOrCreate?: TagCreateOrConnectWithoutProductsInput
    upsert?: TagUpsertWithoutProductsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutProductsInput, TagUpdateWithoutProductsInput>, TagUncheckedUpdateWithoutProductsInput>
  }

  export type ProductUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ProductCreateWithoutTagsInput, ProductUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTagsInput
    upsert?: ProductUpsertWithoutTagsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutTagsInput, ProductUpdateWithoutTagsInput>, ProductUncheckedUpdateWithoutTagsInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserCreateNestedOneWithoutAuditLogInput = {
    create?: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogInput
    upsert?: UserUpsertWithoutAuditLogInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogInput, UserUpdateWithoutAuditLogInput>, UserUncheckedUpdateWithoutAuditLogInput>
  }

  export type UserCreateNestedOneWithoutRecentsInput = {
    create?: XOR<UserCreateWithoutRecentsInput, UserUncheckedCreateWithoutRecentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRecentsNestedInput = {
    create?: XOR<UserCreateWithoutRecentsInput, UserUncheckedCreateWithoutRecentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecentsInput
    upsert?: UserUpsertWithoutRecentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecentsInput, UserUpdateWithoutRecentsInput>, UserUncheckedUpdateWithoutRecentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumResourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResourceTypeFilter<$PrismaModel> | $Enums.ResourceType
  }

  export type NestedEnumResourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResourceType | EnumResourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResourceType[] | ListEnumResourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResourceTypeFilter<$PrismaModel>
    _max?: NestedEnumResourceTypeFilter<$PrismaModel>
  }

  export type AssetCreateWithoutUserAvatarLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductCreateNestedManyWithoutAssetInput
    exhibitorLinks?: AssetOnExhibitorCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventCreateNestedManyWithoutAssetInput
  }

  export type AssetUncheckedCreateWithoutUserAvatarLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductUncheckedCreateNestedManyWithoutAssetInput
    exhibitorLinks?: AssetOnExhibitorUncheckedCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventUncheckedCreateNestedManyWithoutAssetInput
  }

  export type AssetCreateOrConnectWithoutUserAvatarLinksInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutUserAvatarLinksInput, AssetUncheckedCreateWithoutUserAvatarLinksInput>
  }

  export type EventCreateWithoutCreatedByInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    exhibitor?: ExhibitorCreateNestedOneWithoutEventsInput
    speakers?: EventSpeakerCreateNestedManyWithoutEventInput
    attendees?: AttendeeCreateNestedManyWithoutEventInput
    tags?: TagOnEventCreateNestedManyWithoutEventInput
    assets?: AssetOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakers?: EventSpeakerUncheckedCreateNestedManyWithoutEventInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutEventInput
    tags?: TagOnEventUncheckedCreateNestedManyWithoutEventInput
    assets?: AssetOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCreatedByInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput>
  }

  export type EventCreateManyCreatedByInputEnvelope = {
    data: EventCreateManyCreatedByInput | EventCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EventSpeakerCreateWithoutUserInput = {
    id?: string
    role?: string | null
    order?: number | null
    event: EventCreateNestedOneWithoutSpeakersInput
  }

  export type EventSpeakerUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    role?: string | null
    order?: number | null
  }

  export type EventSpeakerCreateOrConnectWithoutUserInput = {
    where: EventSpeakerWhereUniqueInput
    create: XOR<EventSpeakerCreateWithoutUserInput, EventSpeakerUncheckedCreateWithoutUserInput>
  }

  export type EventSpeakerCreateManyUserInputEnvelope = {
    data: EventSpeakerCreateManyUserInput | EventSpeakerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AttendeeCreateWithoutUserInput = {
    id?: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutAttendeesInput
  }

  export type AttendeeUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttendeeCreateOrConnectWithoutUserInput = {
    where: AttendeeWhereUniqueInput
    create: XOR<AttendeeCreateWithoutUserInput, AttendeeUncheckedCreateWithoutUserInput>
  }

  export type AttendeeCreateManyUserInputEnvelope = {
    data: AttendeeCreateManyUserInput | AttendeeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutUserInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt?: Date | string
  }

  export type FavoriteUncheckedCreateWithoutUserInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt?: Date | string
  }

  export type FavoriteCreateOrConnectWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteCreateManyUserInputEnvelope = {
    data: FavoriteCreateManyUserInput | FavoriteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    revoked?: boolean
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    revoked?: boolean
    createdAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type?: string | null
    icon?: string | null
    color?: string | null
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type?: string | null
    icon?: string | null
    color?: string | null
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ExhibitorCreateWithoutCreatedByInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    products?: ProductCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorCreateNestedManyWithoutExhibitorInput
    events?: EventCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    products?: ProductUncheckedCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    events?: EventUncheckedCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorCreateOrConnectWithoutCreatedByInput = {
    where: ExhibitorWhereUniqueInput
    create: XOR<ExhibitorCreateWithoutCreatedByInput, ExhibitorUncheckedCreateWithoutCreatedByInput>
  }

  export type ExhibitorCreateManyCreatedByInputEnvelope = {
    data: ExhibitorCreateManyCreatedByInput | ExhibitorCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type RecentCreateWithoutUserInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecentUncheckedCreateWithoutUserInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RecentCreateOrConnectWithoutUserInput = {
    where: RecentWhereUniqueInput
    create: XOR<RecentCreateWithoutUserInput, RecentUncheckedCreateWithoutUserInput>
  }

  export type RecentCreateManyUserInputEnvelope = {
    data: RecentCreateManyUserInput | RecentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AssetUpsertWithoutUserAvatarLinksInput = {
    update: XOR<AssetUpdateWithoutUserAvatarLinksInput, AssetUncheckedUpdateWithoutUserAvatarLinksInput>
    create: XOR<AssetCreateWithoutUserAvatarLinksInput, AssetUncheckedCreateWithoutUserAvatarLinksInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutUserAvatarLinksInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutUserAvatarLinksInput, AssetUncheckedUpdateWithoutUserAvatarLinksInput>
  }

  export type AssetUpdateWithoutUserAvatarLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUpdateManyWithoutAssetNestedInput
    exhibitorLinks?: AssetOnExhibitorUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUpdateManyWithoutAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutUserAvatarLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUncheckedUpdateManyWithoutAssetNestedInput
    exhibitorLinks?: AssetOnExhibitorUncheckedUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUncheckedUpdateManyWithoutAssetNestedInput
  }

  export type EventUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutCreatedByInput, EventUncheckedUpdateWithoutCreatedByInput>
    create: XOR<EventCreateWithoutCreatedByInput, EventUncheckedCreateWithoutCreatedByInput>
  }

  export type EventUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutCreatedByInput, EventUncheckedUpdateWithoutCreatedByInput>
  }

  export type EventUpdateManyWithWhereWithoutCreatedByInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    color?: StringNullableFilter<"Event"> | string | null
    start?: DateTimeFilter<"Event"> | Date | string
    end?: DateTimeFilter<"Event"> | Date | string
    timed?: BoolFilter<"Event"> | boolean
    location?: StringNullableFilter<"Event"> | string | null
    exhibitorId?: StringNullableFilter<"Event"> | string | null
    timezone?: StringNullableFilter<"Event"> | string | null
    published?: BoolFilter<"Event"> | boolean
    createdById?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
  }

  export type EventSpeakerUpsertWithWhereUniqueWithoutUserInput = {
    where: EventSpeakerWhereUniqueInput
    update: XOR<EventSpeakerUpdateWithoutUserInput, EventSpeakerUncheckedUpdateWithoutUserInput>
    create: XOR<EventSpeakerCreateWithoutUserInput, EventSpeakerUncheckedCreateWithoutUserInput>
  }

  export type EventSpeakerUpdateWithWhereUniqueWithoutUserInput = {
    where: EventSpeakerWhereUniqueInput
    data: XOR<EventSpeakerUpdateWithoutUserInput, EventSpeakerUncheckedUpdateWithoutUserInput>
  }

  export type EventSpeakerUpdateManyWithWhereWithoutUserInput = {
    where: EventSpeakerScalarWhereInput
    data: XOR<EventSpeakerUpdateManyMutationInput, EventSpeakerUncheckedUpdateManyWithoutUserInput>
  }

  export type EventSpeakerScalarWhereInput = {
    AND?: EventSpeakerScalarWhereInput | EventSpeakerScalarWhereInput[]
    OR?: EventSpeakerScalarWhereInput[]
    NOT?: EventSpeakerScalarWhereInput | EventSpeakerScalarWhereInput[]
    id?: StringFilter<"EventSpeaker"> | string
    eventId?: StringFilter<"EventSpeaker"> | string
    userId?: StringFilter<"EventSpeaker"> | string
    role?: StringNullableFilter<"EventSpeaker"> | string | null
    order?: IntNullableFilter<"EventSpeaker"> | number | null
  }

  export type AttendeeUpsertWithWhereUniqueWithoutUserInput = {
    where: AttendeeWhereUniqueInput
    update: XOR<AttendeeUpdateWithoutUserInput, AttendeeUncheckedUpdateWithoutUserInput>
    create: XOR<AttendeeCreateWithoutUserInput, AttendeeUncheckedCreateWithoutUserInput>
  }

  export type AttendeeUpdateWithWhereUniqueWithoutUserInput = {
    where: AttendeeWhereUniqueInput
    data: XOR<AttendeeUpdateWithoutUserInput, AttendeeUncheckedUpdateWithoutUserInput>
  }

  export type AttendeeUpdateManyWithWhereWithoutUserInput = {
    where: AttendeeScalarWhereInput
    data: XOR<AttendeeUpdateManyMutationInput, AttendeeUncheckedUpdateManyWithoutUserInput>
  }

  export type AttendeeScalarWhereInput = {
    AND?: AttendeeScalarWhereInput | AttendeeScalarWhereInput[]
    OR?: AttendeeScalarWhereInput[]
    NOT?: AttendeeScalarWhereInput | AttendeeScalarWhereInput[]
    id?: StringFilter<"Attendee"> | string
    userId?: StringNullableFilter<"Attendee"> | string | null
    eventId?: StringFilter<"Attendee"> | string
    name?: StringFilter<"Attendee"> | string
    email?: StringFilter<"Attendee"> | string
    ticketType?: StringNullableFilter<"Attendee"> | string | null
    checkedIn?: BoolFilter<"Attendee"> | boolean
    metadata?: JsonNullableFilter<"Attendee">
    createdAt?: DateTimeFilter<"Attendee"> | Date | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteScalarWhereInput = {
    AND?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    OR?: FavoriteScalarWhereInput[]
    NOT?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    resourceType?: EnumResourceTypeFilter<"Favorite"> | $Enums.ResourceType
    resourceId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    tokenHash?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    revoked?: BoolFilter<"RefreshToken"> | boolean
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: StringNullableFilter<"Notification"> | string | null
    icon?: StringNullableFilter<"Notification"> | string | null
    color?: StringNullableFilter<"Notification"> | string | null
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    data?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type ExhibitorUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ExhibitorWhereUniqueInput
    update: XOR<ExhibitorUpdateWithoutCreatedByInput, ExhibitorUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ExhibitorCreateWithoutCreatedByInput, ExhibitorUncheckedCreateWithoutCreatedByInput>
  }

  export type ExhibitorUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ExhibitorWhereUniqueInput
    data: XOR<ExhibitorUpdateWithoutCreatedByInput, ExhibitorUncheckedUpdateWithoutCreatedByInput>
  }

  export type ExhibitorUpdateManyWithWhereWithoutCreatedByInput = {
    where: ExhibitorScalarWhereInput
    data: XOR<ExhibitorUpdateManyMutationInput, ExhibitorUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ExhibitorScalarWhereInput = {
    AND?: ExhibitorScalarWhereInput | ExhibitorScalarWhereInput[]
    OR?: ExhibitorScalarWhereInput[]
    NOT?: ExhibitorScalarWhereInput | ExhibitorScalarWhereInput[]
    id?: StringFilter<"Exhibitor"> | string
    name?: StringFilter<"Exhibitor"> | string
    title?: StringNullableFilter<"Exhibitor"> | string | null
    description?: StringNullableFilter<"Exhibitor"> | string | null
    website?: StringNullableFilter<"Exhibitor"> | string | null
    location?: StringNullableFilter<"Exhibitor"> | string | null
    sponsor?: BoolFilter<"Exhibitor"> | boolean
    favoriteCount?: IntFilter<"Exhibitor"> | number
    createdAt?: DateTimeFilter<"Exhibitor"> | Date | string
    updatedAt?: DateTimeFilter<"Exhibitor"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Exhibitor"> | Date | string | null
    createdById?: StringNullableFilter<"Exhibitor"> | string | null
  }

  export type RecentUpsertWithWhereUniqueWithoutUserInput = {
    where: RecentWhereUniqueInput
    update: XOR<RecentUpdateWithoutUserInput, RecentUncheckedUpdateWithoutUserInput>
    create: XOR<RecentCreateWithoutUserInput, RecentUncheckedCreateWithoutUserInput>
  }

  export type RecentUpdateWithWhereUniqueWithoutUserInput = {
    where: RecentWhereUniqueInput
    data: XOR<RecentUpdateWithoutUserInput, RecentUncheckedUpdateWithoutUserInput>
  }

  export type RecentUpdateManyWithWhereWithoutUserInput = {
    where: RecentScalarWhereInput
    data: XOR<RecentUpdateManyMutationInput, RecentUncheckedUpdateManyWithoutUserInput>
  }

  export type RecentScalarWhereInput = {
    AND?: RecentScalarWhereInput | RecentScalarWhereInput[]
    OR?: RecentScalarWhereInput[]
    NOT?: RecentScalarWhereInput | RecentScalarWhereInput[]
    id?: StringFilter<"Recent"> | string
    userId?: StringFilter<"Recent"> | string
    resourceType?: EnumResourceTypeFilter<"Recent"> | $Enums.ResourceType
    resourceId?: StringFilter<"Recent"> | string
    metadata?: JsonNullableFilter<"Recent">
    createdAt?: DateTimeFilter<"Recent"> | Date | string
  }

  export type UserCreateWithoutEventsCreatedInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventsCreatedInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsCreatedInput, UserUncheckedCreateWithoutEventsCreatedInput>
  }

  export type ExhibitorCreateWithoutEventsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutExhibitorInput
    products?: ProductCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdById?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorCreateOrConnectWithoutEventsInput = {
    where: ExhibitorWhereUniqueInput
    create: XOR<ExhibitorCreateWithoutEventsInput, ExhibitorUncheckedCreateWithoutEventsInput>
  }

  export type EventSpeakerCreateWithoutEventInput = {
    id?: string
    role?: string | null
    order?: number | null
    user: UserCreateNestedOneWithoutSpeakersForInput
  }

  export type EventSpeakerUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    role?: string | null
    order?: number | null
  }

  export type EventSpeakerCreateOrConnectWithoutEventInput = {
    where: EventSpeakerWhereUniqueInput
    create: XOR<EventSpeakerCreateWithoutEventInput, EventSpeakerUncheckedCreateWithoutEventInput>
  }

  export type EventSpeakerCreateManyEventInputEnvelope = {
    data: EventSpeakerCreateManyEventInput | EventSpeakerCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type AttendeeCreateWithoutEventInput = {
    id?: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAttendeesInput
  }

  export type AttendeeUncheckedCreateWithoutEventInput = {
    id?: string
    userId?: string | null
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttendeeCreateOrConnectWithoutEventInput = {
    where: AttendeeWhereUniqueInput
    create: XOR<AttendeeCreateWithoutEventInput, AttendeeUncheckedCreateWithoutEventInput>
  }

  export type AttendeeCreateManyEventInputEnvelope = {
    data: AttendeeCreateManyEventInput | AttendeeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type TagOnEventCreateWithoutEventInput = {
    id?: string
    tag: TagCreateNestedOneWithoutEventsInput
  }

  export type TagOnEventUncheckedCreateWithoutEventInput = {
    id?: string
    tagId: string
  }

  export type TagOnEventCreateOrConnectWithoutEventInput = {
    where: TagOnEventWhereUniqueInput
    create: XOR<TagOnEventCreateWithoutEventInput, TagOnEventUncheckedCreateWithoutEventInput>
  }

  export type TagOnEventCreateManyEventInputEnvelope = {
    data: TagOnEventCreateManyEventInput | TagOnEventCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type AssetOnEventCreateWithoutEventInput = {
    id?: string
    role?: string | null
    asset: AssetCreateNestedOneWithoutEventLinksInput
  }

  export type AssetOnEventUncheckedCreateWithoutEventInput = {
    id?: string
    assetId: string
    role?: string | null
  }

  export type AssetOnEventCreateOrConnectWithoutEventInput = {
    where: AssetOnEventWhereUniqueInput
    create: XOR<AssetOnEventCreateWithoutEventInput, AssetOnEventUncheckedCreateWithoutEventInput>
  }

  export type AssetOnEventCreateManyEventInputEnvelope = {
    data: AssetOnEventCreateManyEventInput | AssetOnEventCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEventsCreatedInput = {
    update: XOR<UserUpdateWithoutEventsCreatedInput, UserUncheckedUpdateWithoutEventsCreatedInput>
    create: XOR<UserCreateWithoutEventsCreatedInput, UserUncheckedCreateWithoutEventsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsCreatedInput, UserUncheckedUpdateWithoutEventsCreatedInput>
  }

  export type UserUpdateWithoutEventsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ExhibitorUpsertWithoutEventsInput = {
    update: XOR<ExhibitorUpdateWithoutEventsInput, ExhibitorUncheckedUpdateWithoutEventsInput>
    create: XOR<ExhibitorCreateWithoutEventsInput, ExhibitorUncheckedCreateWithoutEventsInput>
    where?: ExhibitorWhereInput
  }

  export type ExhibitorUpdateToOneWithWhereWithoutEventsInput = {
    where?: ExhibitorWhereInput
    data: XOR<ExhibitorUpdateWithoutEventsInput, ExhibitorUncheckedUpdateWithoutEventsInput>
  }

  export type ExhibitorUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutExhibitorNestedInput
    products?: ProductUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
  }

  export type EventSpeakerUpsertWithWhereUniqueWithoutEventInput = {
    where: EventSpeakerWhereUniqueInput
    update: XOR<EventSpeakerUpdateWithoutEventInput, EventSpeakerUncheckedUpdateWithoutEventInput>
    create: XOR<EventSpeakerCreateWithoutEventInput, EventSpeakerUncheckedCreateWithoutEventInput>
  }

  export type EventSpeakerUpdateWithWhereUniqueWithoutEventInput = {
    where: EventSpeakerWhereUniqueInput
    data: XOR<EventSpeakerUpdateWithoutEventInput, EventSpeakerUncheckedUpdateWithoutEventInput>
  }

  export type EventSpeakerUpdateManyWithWhereWithoutEventInput = {
    where: EventSpeakerScalarWhereInput
    data: XOR<EventSpeakerUpdateManyMutationInput, EventSpeakerUncheckedUpdateManyWithoutEventInput>
  }

  export type AttendeeUpsertWithWhereUniqueWithoutEventInput = {
    where: AttendeeWhereUniqueInput
    update: XOR<AttendeeUpdateWithoutEventInput, AttendeeUncheckedUpdateWithoutEventInput>
    create: XOR<AttendeeCreateWithoutEventInput, AttendeeUncheckedCreateWithoutEventInput>
  }

  export type AttendeeUpdateWithWhereUniqueWithoutEventInput = {
    where: AttendeeWhereUniqueInput
    data: XOR<AttendeeUpdateWithoutEventInput, AttendeeUncheckedUpdateWithoutEventInput>
  }

  export type AttendeeUpdateManyWithWhereWithoutEventInput = {
    where: AttendeeScalarWhereInput
    data: XOR<AttendeeUpdateManyMutationInput, AttendeeUncheckedUpdateManyWithoutEventInput>
  }

  export type TagOnEventUpsertWithWhereUniqueWithoutEventInput = {
    where: TagOnEventWhereUniqueInput
    update: XOR<TagOnEventUpdateWithoutEventInput, TagOnEventUncheckedUpdateWithoutEventInput>
    create: XOR<TagOnEventCreateWithoutEventInput, TagOnEventUncheckedCreateWithoutEventInput>
  }

  export type TagOnEventUpdateWithWhereUniqueWithoutEventInput = {
    where: TagOnEventWhereUniqueInput
    data: XOR<TagOnEventUpdateWithoutEventInput, TagOnEventUncheckedUpdateWithoutEventInput>
  }

  export type TagOnEventUpdateManyWithWhereWithoutEventInput = {
    where: TagOnEventScalarWhereInput
    data: XOR<TagOnEventUpdateManyMutationInput, TagOnEventUncheckedUpdateManyWithoutEventInput>
  }

  export type TagOnEventScalarWhereInput = {
    AND?: TagOnEventScalarWhereInput | TagOnEventScalarWhereInput[]
    OR?: TagOnEventScalarWhereInput[]
    NOT?: TagOnEventScalarWhereInput | TagOnEventScalarWhereInput[]
    id?: StringFilter<"TagOnEvent"> | string
    tagId?: StringFilter<"TagOnEvent"> | string
    eventId?: StringFilter<"TagOnEvent"> | string
  }

  export type AssetOnEventUpsertWithWhereUniqueWithoutEventInput = {
    where: AssetOnEventWhereUniqueInput
    update: XOR<AssetOnEventUpdateWithoutEventInput, AssetOnEventUncheckedUpdateWithoutEventInput>
    create: XOR<AssetOnEventCreateWithoutEventInput, AssetOnEventUncheckedCreateWithoutEventInput>
  }

  export type AssetOnEventUpdateWithWhereUniqueWithoutEventInput = {
    where: AssetOnEventWhereUniqueInput
    data: XOR<AssetOnEventUpdateWithoutEventInput, AssetOnEventUncheckedUpdateWithoutEventInput>
  }

  export type AssetOnEventUpdateManyWithWhereWithoutEventInput = {
    where: AssetOnEventScalarWhereInput
    data: XOR<AssetOnEventUpdateManyMutationInput, AssetOnEventUncheckedUpdateManyWithoutEventInput>
  }

  export type AssetOnEventScalarWhereInput = {
    AND?: AssetOnEventScalarWhereInput | AssetOnEventScalarWhereInput[]
    OR?: AssetOnEventScalarWhereInput[]
    NOT?: AssetOnEventScalarWhereInput | AssetOnEventScalarWhereInput[]
    id?: StringFilter<"AssetOnEvent"> | string
    assetId?: StringFilter<"AssetOnEvent"> | string
    eventId?: StringFilter<"AssetOnEvent"> | string
    role?: StringNullableFilter<"AssetOnEvent"> | string | null
  }

  export type EventCreateWithoutSpeakersInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutEventsCreatedInput
    exhibitor?: ExhibitorCreateNestedOneWithoutEventsInput
    attendees?: AttendeeCreateNestedManyWithoutEventInput
    tags?: TagOnEventCreateNestedManyWithoutEventInput
    assets?: AssetOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutSpeakersInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    attendees?: AttendeeUncheckedCreateNestedManyWithoutEventInput
    tags?: TagOnEventUncheckedCreateNestedManyWithoutEventInput
    assets?: AssetOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutSpeakersInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSpeakersInput, EventUncheckedCreateWithoutSpeakersInput>
  }

  export type UserCreateWithoutSpeakersForInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSpeakersForInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSpeakersForInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpeakersForInput, UserUncheckedCreateWithoutSpeakersForInput>
  }

  export type EventUpsertWithoutSpeakersInput = {
    update: XOR<EventUpdateWithoutSpeakersInput, EventUncheckedUpdateWithoutSpeakersInput>
    create: XOR<EventCreateWithoutSpeakersInput, EventUncheckedCreateWithoutSpeakersInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutSpeakersInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutSpeakersInput, EventUncheckedUpdateWithoutSpeakersInput>
  }

  export type EventUpdateWithoutSpeakersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutEventsCreatedNestedInput
    exhibitor?: ExhibitorUpdateOneWithoutEventsNestedInput
    attendees?: AttendeeUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutSpeakersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attendees?: AttendeeUncheckedUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUncheckedUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutSpeakersForInput = {
    update: XOR<UserUpdateWithoutSpeakersForInput, UserUncheckedUpdateWithoutSpeakersForInput>
    create: XOR<UserCreateWithoutSpeakersForInput, UserUncheckedCreateWithoutSpeakersForInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSpeakersForInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSpeakersForInput, UserUncheckedUpdateWithoutSpeakersForInput>
  }

  export type UserUpdateWithoutSpeakersForInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSpeakersForInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutExhibitorInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExhibitorInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExhibitorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExhibitorInput, UserUncheckedCreateWithoutExhibitorInput>
  }

  export type ProductCreateWithoutExhibitorInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    category?: CategoryCreateNestedOneWithoutProductsInput
    assets?: AssetOnProductCreateNestedManyWithoutProductInput
    tags?: TagOnProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutExhibitorInput = {
    id?: string
    categoryId?: string | null
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assets?: AssetOnProductUncheckedCreateNestedManyWithoutProductInput
    tags?: TagOnProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutExhibitorInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutExhibitorInput, ProductUncheckedCreateWithoutExhibitorInput>
  }

  export type ProductCreateManyExhibitorInputEnvelope = {
    data: ProductCreateManyExhibitorInput | ProductCreateManyExhibitorInput[]
    skipDuplicates?: boolean
  }

  export type AssetOnExhibitorCreateWithoutExhibitorInput = {
    id?: string
    role?: string | null
    asset: AssetCreateNestedOneWithoutExhibitorLinksInput
  }

  export type AssetOnExhibitorUncheckedCreateWithoutExhibitorInput = {
    id?: string
    assetId: string
    role?: string | null
  }

  export type AssetOnExhibitorCreateOrConnectWithoutExhibitorInput = {
    where: AssetOnExhibitorWhereUniqueInput
    create: XOR<AssetOnExhibitorCreateWithoutExhibitorInput, AssetOnExhibitorUncheckedCreateWithoutExhibitorInput>
  }

  export type AssetOnExhibitorCreateManyExhibitorInputEnvelope = {
    data: AssetOnExhibitorCreateManyExhibitorInput | AssetOnExhibitorCreateManyExhibitorInput[]
    skipDuplicates?: boolean
  }

  export type TagOnExhibitorCreateWithoutExhibitorInput = {
    id?: string
    tag: TagCreateNestedOneWithoutExhibitorsInput
  }

  export type TagOnExhibitorUncheckedCreateWithoutExhibitorInput = {
    id?: string
    tagId: string
  }

  export type TagOnExhibitorCreateOrConnectWithoutExhibitorInput = {
    where: TagOnExhibitorWhereUniqueInput
    create: XOR<TagOnExhibitorCreateWithoutExhibitorInput, TagOnExhibitorUncheckedCreateWithoutExhibitorInput>
  }

  export type TagOnExhibitorCreateManyExhibitorInputEnvelope = {
    data: TagOnExhibitorCreateManyExhibitorInput | TagOnExhibitorCreateManyExhibitorInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutExhibitorInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutEventsCreatedInput
    speakers?: EventSpeakerCreateNestedManyWithoutEventInput
    attendees?: AttendeeCreateNestedManyWithoutEventInput
    tags?: TagOnEventCreateNestedManyWithoutEventInput
    assets?: AssetOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutExhibitorInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakers?: EventSpeakerUncheckedCreateNestedManyWithoutEventInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutEventInput
    tags?: TagOnEventUncheckedCreateNestedManyWithoutEventInput
    assets?: AssetOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutExhibitorInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutExhibitorInput, EventUncheckedCreateWithoutExhibitorInput>
  }

  export type EventCreateManyExhibitorInputEnvelope = {
    data: EventCreateManyExhibitorInput | EventCreateManyExhibitorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutExhibitorInput = {
    update: XOR<UserUpdateWithoutExhibitorInput, UserUncheckedUpdateWithoutExhibitorInput>
    create: XOR<UserCreateWithoutExhibitorInput, UserUncheckedCreateWithoutExhibitorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExhibitorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExhibitorInput, UserUncheckedUpdateWithoutExhibitorInput>
  }

  export type UserUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithWhereUniqueWithoutExhibitorInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutExhibitorInput, ProductUncheckedUpdateWithoutExhibitorInput>
    create: XOR<ProductCreateWithoutExhibitorInput, ProductUncheckedCreateWithoutExhibitorInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutExhibitorInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutExhibitorInput, ProductUncheckedUpdateWithoutExhibitorInput>
  }

  export type ProductUpdateManyWithWhereWithoutExhibitorInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutExhibitorInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    exhibitorId?: StringFilter<"Product"> | string
    categoryId?: StringNullableFilter<"Product"> | string | null
    name?: StringFilter<"Product"> | string
    title?: StringNullableFilter<"Product"> | string | null
    description?: StringNullableFilter<"Product"> | string | null
    shortDescription?: StringNullableFilter<"Product"> | string | null
    price?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    imageUrl?: StringNullableFilter<"Product"> | string | null
    inStock?: BoolFilter<"Product"> | boolean
    featured?: BoolFilter<"Product"> | boolean
    metadata?: JsonNullableFilter<"Product">
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
  }

  export type AssetOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput = {
    where: AssetOnExhibitorWhereUniqueInput
    update: XOR<AssetOnExhibitorUpdateWithoutExhibitorInput, AssetOnExhibitorUncheckedUpdateWithoutExhibitorInput>
    create: XOR<AssetOnExhibitorCreateWithoutExhibitorInput, AssetOnExhibitorUncheckedCreateWithoutExhibitorInput>
  }

  export type AssetOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput = {
    where: AssetOnExhibitorWhereUniqueInput
    data: XOR<AssetOnExhibitorUpdateWithoutExhibitorInput, AssetOnExhibitorUncheckedUpdateWithoutExhibitorInput>
  }

  export type AssetOnExhibitorUpdateManyWithWhereWithoutExhibitorInput = {
    where: AssetOnExhibitorScalarWhereInput
    data: XOR<AssetOnExhibitorUpdateManyMutationInput, AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorInput>
  }

  export type AssetOnExhibitorScalarWhereInput = {
    AND?: AssetOnExhibitorScalarWhereInput | AssetOnExhibitorScalarWhereInput[]
    OR?: AssetOnExhibitorScalarWhereInput[]
    NOT?: AssetOnExhibitorScalarWhereInput | AssetOnExhibitorScalarWhereInput[]
    id?: StringFilter<"AssetOnExhibitor"> | string
    assetId?: StringFilter<"AssetOnExhibitor"> | string
    exhibitorId?: StringFilter<"AssetOnExhibitor"> | string
    role?: StringNullableFilter<"AssetOnExhibitor"> | string | null
  }

  export type TagOnExhibitorUpsertWithWhereUniqueWithoutExhibitorInput = {
    where: TagOnExhibitorWhereUniqueInput
    update: XOR<TagOnExhibitorUpdateWithoutExhibitorInput, TagOnExhibitorUncheckedUpdateWithoutExhibitorInput>
    create: XOR<TagOnExhibitorCreateWithoutExhibitorInput, TagOnExhibitorUncheckedCreateWithoutExhibitorInput>
  }

  export type TagOnExhibitorUpdateWithWhereUniqueWithoutExhibitorInput = {
    where: TagOnExhibitorWhereUniqueInput
    data: XOR<TagOnExhibitorUpdateWithoutExhibitorInput, TagOnExhibitorUncheckedUpdateWithoutExhibitorInput>
  }

  export type TagOnExhibitorUpdateManyWithWhereWithoutExhibitorInput = {
    where: TagOnExhibitorScalarWhereInput
    data: XOR<TagOnExhibitorUpdateManyMutationInput, TagOnExhibitorUncheckedUpdateManyWithoutExhibitorInput>
  }

  export type TagOnExhibitorScalarWhereInput = {
    AND?: TagOnExhibitorScalarWhereInput | TagOnExhibitorScalarWhereInput[]
    OR?: TagOnExhibitorScalarWhereInput[]
    NOT?: TagOnExhibitorScalarWhereInput | TagOnExhibitorScalarWhereInput[]
    id?: StringFilter<"TagOnExhibitor"> | string
    tagId?: StringFilter<"TagOnExhibitor"> | string
    exhibitorId?: StringFilter<"TagOnExhibitor"> | string
  }

  export type EventUpsertWithWhereUniqueWithoutExhibitorInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutExhibitorInput, EventUncheckedUpdateWithoutExhibitorInput>
    create: XOR<EventCreateWithoutExhibitorInput, EventUncheckedCreateWithoutExhibitorInput>
  }

  export type EventUpdateWithWhereUniqueWithoutExhibitorInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutExhibitorInput, EventUncheckedUpdateWithoutExhibitorInput>
  }

  export type EventUpdateManyWithWhereWithoutExhibitorInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutExhibitorInput>
  }

  export type ExhibitorCreateWithoutProductsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutExhibitorInput
    assets?: AssetOnExhibitorCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorCreateNestedManyWithoutExhibitorInput
    events?: EventCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdById?: string | null
    assets?: AssetOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    events?: EventUncheckedCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorCreateOrConnectWithoutProductsInput = {
    where: ExhibitorWhereUniqueInput
    create: XOR<ExhibitorCreateWithoutProductsInput, ExhibitorUncheckedCreateWithoutProductsInput>
  }

  export type CategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type AssetOnProductCreateWithoutProductInput = {
    id?: string
    role?: string | null
    asset: AssetCreateNestedOneWithoutProductLinksInput
  }

  export type AssetOnProductUncheckedCreateWithoutProductInput = {
    id?: string
    assetId: string
    role?: string | null
  }

  export type AssetOnProductCreateOrConnectWithoutProductInput = {
    where: AssetOnProductWhereUniqueInput
    create: XOR<AssetOnProductCreateWithoutProductInput, AssetOnProductUncheckedCreateWithoutProductInput>
  }

  export type AssetOnProductCreateManyProductInputEnvelope = {
    data: AssetOnProductCreateManyProductInput | AssetOnProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type TagOnProductCreateWithoutProductInput = {
    id?: string
    tag: TagCreateNestedOneWithoutProductsInput
  }

  export type TagOnProductUncheckedCreateWithoutProductInput = {
    id?: string
    tagId: string
  }

  export type TagOnProductCreateOrConnectWithoutProductInput = {
    where: TagOnProductWhereUniqueInput
    create: XOR<TagOnProductCreateWithoutProductInput, TagOnProductUncheckedCreateWithoutProductInput>
  }

  export type TagOnProductCreateManyProductInputEnvelope = {
    data: TagOnProductCreateManyProductInput | TagOnProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ExhibitorUpsertWithoutProductsInput = {
    update: XOR<ExhibitorUpdateWithoutProductsInput, ExhibitorUncheckedUpdateWithoutProductsInput>
    create: XOR<ExhibitorCreateWithoutProductsInput, ExhibitorUncheckedCreateWithoutProductsInput>
    where?: ExhibitorWhereInput
  }

  export type ExhibitorUpdateToOneWithWhereWithoutProductsInput = {
    where?: ExhibitorWhereInput
    data: XOR<ExhibitorUpdateWithoutProductsInput, ExhibitorUncheckedUpdateWithoutProductsInput>
  }

  export type ExhibitorUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUpdateManyWithoutExhibitorNestedInput
    events?: EventUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    assets?: AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    events?: EventUncheckedUpdateManyWithoutExhibitorNestedInput
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type AssetOnProductUpsertWithWhereUniqueWithoutProductInput = {
    where: AssetOnProductWhereUniqueInput
    update: XOR<AssetOnProductUpdateWithoutProductInput, AssetOnProductUncheckedUpdateWithoutProductInput>
    create: XOR<AssetOnProductCreateWithoutProductInput, AssetOnProductUncheckedCreateWithoutProductInput>
  }

  export type AssetOnProductUpdateWithWhereUniqueWithoutProductInput = {
    where: AssetOnProductWhereUniqueInput
    data: XOR<AssetOnProductUpdateWithoutProductInput, AssetOnProductUncheckedUpdateWithoutProductInput>
  }

  export type AssetOnProductUpdateManyWithWhereWithoutProductInput = {
    where: AssetOnProductScalarWhereInput
    data: XOR<AssetOnProductUpdateManyMutationInput, AssetOnProductUncheckedUpdateManyWithoutProductInput>
  }

  export type AssetOnProductScalarWhereInput = {
    AND?: AssetOnProductScalarWhereInput | AssetOnProductScalarWhereInput[]
    OR?: AssetOnProductScalarWhereInput[]
    NOT?: AssetOnProductScalarWhereInput | AssetOnProductScalarWhereInput[]
    id?: StringFilter<"AssetOnProduct"> | string
    assetId?: StringFilter<"AssetOnProduct"> | string
    productId?: StringFilter<"AssetOnProduct"> | string
    role?: StringNullableFilter<"AssetOnProduct"> | string | null
  }

  export type TagOnProductUpsertWithWhereUniqueWithoutProductInput = {
    where: TagOnProductWhereUniqueInput
    update: XOR<TagOnProductUpdateWithoutProductInput, TagOnProductUncheckedUpdateWithoutProductInput>
    create: XOR<TagOnProductCreateWithoutProductInput, TagOnProductUncheckedCreateWithoutProductInput>
  }

  export type TagOnProductUpdateWithWhereUniqueWithoutProductInput = {
    where: TagOnProductWhereUniqueInput
    data: XOR<TagOnProductUpdateWithoutProductInput, TagOnProductUncheckedUpdateWithoutProductInput>
  }

  export type TagOnProductUpdateManyWithWhereWithoutProductInput = {
    where: TagOnProductScalarWhereInput
    data: XOR<TagOnProductUpdateManyMutationInput, TagOnProductUncheckedUpdateManyWithoutProductInput>
  }

  export type TagOnProductScalarWhereInput = {
    AND?: TagOnProductScalarWhereInput | TagOnProductScalarWhereInput[]
    OR?: TagOnProductScalarWhereInput[]
    NOT?: TagOnProductScalarWhereInput | TagOnProductScalarWhereInput[]
    id?: StringFilter<"TagOnProduct"> | string
    tagId?: StringFilter<"TagOnProduct"> | string
    productId?: StringFilter<"TagOnProduct"> | string
  }

  export type EventCreateWithoutAttendeesInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutEventsCreatedInput
    exhibitor?: ExhibitorCreateNestedOneWithoutEventsInput
    speakers?: EventSpeakerCreateNestedManyWithoutEventInput
    tags?: TagOnEventCreateNestedManyWithoutEventInput
    assets?: AssetOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAttendeesInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakers?: EventSpeakerUncheckedCreateNestedManyWithoutEventInput
    tags?: TagOnEventUncheckedCreateNestedManyWithoutEventInput
    assets?: AssetOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAttendeesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
  }

  export type UserCreateWithoutAttendeesInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendeesInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendeesInput, UserUncheckedCreateWithoutAttendeesInput>
  }

  export type EventUpsertWithoutAttendeesInput = {
    update: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
    create: XOR<EventCreateWithoutAttendeesInput, EventUncheckedCreateWithoutAttendeesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAttendeesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAttendeesInput, EventUncheckedUpdateWithoutAttendeesInput>
  }

  export type EventUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutEventsCreatedNestedInput
    exhibitor?: ExhibitorUpdateOneWithoutEventsNestedInput
    speakers?: EventSpeakerUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakers?: EventSpeakerUncheckedUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUncheckedUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutAttendeesInput = {
    update: XOR<UserUpdateWithoutAttendeesInput, UserUncheckedUpdateWithoutAttendeesInput>
    create: XOR<UserCreateWithoutAttendeesInput, UserUncheckedCreateWithoutAttendeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendeesInput, UserUncheckedUpdateWithoutAttendeesInput>
  }

  export type UserUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFavoritesInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssetOnProductCreateWithoutAssetInput = {
    id?: string
    role?: string | null
    product: ProductCreateNestedOneWithoutAssetsInput
  }

  export type AssetOnProductUncheckedCreateWithoutAssetInput = {
    id?: string
    productId: string
    role?: string | null
  }

  export type AssetOnProductCreateOrConnectWithoutAssetInput = {
    where: AssetOnProductWhereUniqueInput
    create: XOR<AssetOnProductCreateWithoutAssetInput, AssetOnProductUncheckedCreateWithoutAssetInput>
  }

  export type AssetOnProductCreateManyAssetInputEnvelope = {
    data: AssetOnProductCreateManyAssetInput | AssetOnProductCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetOnExhibitorCreateWithoutAssetInput = {
    id?: string
    role?: string | null
    exhibitor: ExhibitorCreateNestedOneWithoutAssetsInput
  }

  export type AssetOnExhibitorUncheckedCreateWithoutAssetInput = {
    id?: string
    exhibitorId: string
    role?: string | null
  }

  export type AssetOnExhibitorCreateOrConnectWithoutAssetInput = {
    where: AssetOnExhibitorWhereUniqueInput
    create: XOR<AssetOnExhibitorCreateWithoutAssetInput, AssetOnExhibitorUncheckedCreateWithoutAssetInput>
  }

  export type AssetOnExhibitorCreateManyAssetInputEnvelope = {
    data: AssetOnExhibitorCreateManyAssetInput | AssetOnExhibitorCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetOnEventCreateWithoutAssetInput = {
    id?: string
    role?: string | null
    event: EventCreateNestedOneWithoutAssetsInput
  }

  export type AssetOnEventUncheckedCreateWithoutAssetInput = {
    id?: string
    eventId: string
    role?: string | null
  }

  export type AssetOnEventCreateOrConnectWithoutAssetInput = {
    where: AssetOnEventWhereUniqueInput
    create: XOR<AssetOnEventCreateWithoutAssetInput, AssetOnEventUncheckedCreateWithoutAssetInput>
  }

  export type AssetOnEventCreateManyAssetInputEnvelope = {
    data: AssetOnEventCreateManyAssetInput | AssetOnEventCreateManyAssetInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutAvatarAssetInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvatarAssetInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvatarAssetInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvatarAssetInput, UserUncheckedCreateWithoutAvatarAssetInput>
  }

  export type UserCreateManyAvatarAssetInputEnvelope = {
    data: UserCreateManyAvatarAssetInput | UserCreateManyAvatarAssetInput[]
    skipDuplicates?: boolean
  }

  export type AssetOnProductUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetOnProductWhereUniqueInput
    update: XOR<AssetOnProductUpdateWithoutAssetInput, AssetOnProductUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetOnProductCreateWithoutAssetInput, AssetOnProductUncheckedCreateWithoutAssetInput>
  }

  export type AssetOnProductUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetOnProductWhereUniqueInput
    data: XOR<AssetOnProductUpdateWithoutAssetInput, AssetOnProductUncheckedUpdateWithoutAssetInput>
  }

  export type AssetOnProductUpdateManyWithWhereWithoutAssetInput = {
    where: AssetOnProductScalarWhereInput
    data: XOR<AssetOnProductUpdateManyMutationInput, AssetOnProductUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetOnExhibitorUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetOnExhibitorWhereUniqueInput
    update: XOR<AssetOnExhibitorUpdateWithoutAssetInput, AssetOnExhibitorUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetOnExhibitorCreateWithoutAssetInput, AssetOnExhibitorUncheckedCreateWithoutAssetInput>
  }

  export type AssetOnExhibitorUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetOnExhibitorWhereUniqueInput
    data: XOR<AssetOnExhibitorUpdateWithoutAssetInput, AssetOnExhibitorUncheckedUpdateWithoutAssetInput>
  }

  export type AssetOnExhibitorUpdateManyWithWhereWithoutAssetInput = {
    where: AssetOnExhibitorScalarWhereInput
    data: XOR<AssetOnExhibitorUpdateManyMutationInput, AssetOnExhibitorUncheckedUpdateManyWithoutAssetInput>
  }

  export type AssetOnEventUpsertWithWhereUniqueWithoutAssetInput = {
    where: AssetOnEventWhereUniqueInput
    update: XOR<AssetOnEventUpdateWithoutAssetInput, AssetOnEventUncheckedUpdateWithoutAssetInput>
    create: XOR<AssetOnEventCreateWithoutAssetInput, AssetOnEventUncheckedCreateWithoutAssetInput>
  }

  export type AssetOnEventUpdateWithWhereUniqueWithoutAssetInput = {
    where: AssetOnEventWhereUniqueInput
    data: XOR<AssetOnEventUpdateWithoutAssetInput, AssetOnEventUncheckedUpdateWithoutAssetInput>
  }

  export type AssetOnEventUpdateManyWithWhereWithoutAssetInput = {
    where: AssetOnEventScalarWhereInput
    data: XOR<AssetOnEventUpdateManyMutationInput, AssetOnEventUncheckedUpdateManyWithoutAssetInput>
  }

  export type UserUpsertWithWhereUniqueWithoutAvatarAssetInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAvatarAssetInput, UserUncheckedUpdateWithoutAvatarAssetInput>
    create: XOR<UserCreateWithoutAvatarAssetInput, UserUncheckedCreateWithoutAvatarAssetInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAvatarAssetInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAvatarAssetInput, UserUncheckedUpdateWithoutAvatarAssetInput>
  }

  export type UserUpdateManyWithWhereWithoutAvatarAssetInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAvatarAssetInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatarAssetId?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type AssetCreateWithoutProductLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    exhibitorLinks?: AssetOnExhibitorCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetUncheckedCreateWithoutProductLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    exhibitorLinks?: AssetOnExhibitorUncheckedCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventUncheckedCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserUncheckedCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetCreateOrConnectWithoutProductLinksInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutProductLinksInput, AssetUncheckedCreateWithoutProductLinksInput>
  }

  export type ProductCreateWithoutAssetsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    exhibitor: ExhibitorCreateNestedOneWithoutProductsInput
    category?: CategoryCreateNestedOneWithoutProductsInput
    tags?: TagOnProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutAssetsInput = {
    id?: string
    exhibitorId: string
    categoryId?: string | null
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    tags?: TagOnProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutAssetsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutAssetsInput, ProductUncheckedCreateWithoutAssetsInput>
  }

  export type AssetUpsertWithoutProductLinksInput = {
    update: XOR<AssetUpdateWithoutProductLinksInput, AssetUncheckedUpdateWithoutProductLinksInput>
    create: XOR<AssetCreateWithoutProductLinksInput, AssetUncheckedCreateWithoutProductLinksInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutProductLinksInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutProductLinksInput, AssetUncheckedUpdateWithoutProductLinksInput>
  }

  export type AssetUpdateWithoutProductLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitorLinks?: AssetOnExhibitorUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUpdateManyWithoutAvatarAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutProductLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitorLinks?: AssetOnExhibitorUncheckedUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUncheckedUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUncheckedUpdateManyWithoutAvatarAssetNestedInput
  }

  export type ProductUpsertWithoutAssetsInput = {
    update: XOR<ProductUpdateWithoutAssetsInput, ProductUncheckedUpdateWithoutAssetsInput>
    create: XOR<ProductCreateWithoutAssetsInput, ProductUncheckedCreateWithoutAssetsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutAssetsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutAssetsInput, ProductUncheckedUpdateWithoutAssetsInput>
  }

  export type ProductUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitor?: ExhibitorUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneWithoutProductsNestedInput
    tags?: TagOnProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tags?: TagOnProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type AssetCreateWithoutExhibitorLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetUncheckedCreateWithoutExhibitorLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductUncheckedCreateNestedManyWithoutAssetInput
    eventLinks?: AssetOnEventUncheckedCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserUncheckedCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetCreateOrConnectWithoutExhibitorLinksInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutExhibitorLinksInput, AssetUncheckedCreateWithoutExhibitorLinksInput>
  }

  export type ExhibitorCreateWithoutAssetsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutExhibitorInput
    products?: ProductCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorCreateNestedManyWithoutExhibitorInput
    events?: EventCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdById?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutExhibitorInput
    tags?: TagOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    events?: EventUncheckedCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorCreateOrConnectWithoutAssetsInput = {
    where: ExhibitorWhereUniqueInput
    create: XOR<ExhibitorCreateWithoutAssetsInput, ExhibitorUncheckedCreateWithoutAssetsInput>
  }

  export type AssetUpsertWithoutExhibitorLinksInput = {
    update: XOR<AssetUpdateWithoutExhibitorLinksInput, AssetUncheckedUpdateWithoutExhibitorLinksInput>
    create: XOR<AssetCreateWithoutExhibitorLinksInput, AssetUncheckedCreateWithoutExhibitorLinksInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutExhibitorLinksInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutExhibitorLinksInput, AssetUncheckedUpdateWithoutExhibitorLinksInput>
  }

  export type AssetUpdateWithoutExhibitorLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUpdateManyWithoutAvatarAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutExhibitorLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUncheckedUpdateManyWithoutAssetNestedInput
    eventLinks?: AssetOnEventUncheckedUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUncheckedUpdateManyWithoutAvatarAssetNestedInput
  }

  export type ExhibitorUpsertWithoutAssetsInput = {
    update: XOR<ExhibitorUpdateWithoutAssetsInput, ExhibitorUncheckedUpdateWithoutAssetsInput>
    create: XOR<ExhibitorCreateWithoutAssetsInput, ExhibitorUncheckedCreateWithoutAssetsInput>
    where?: ExhibitorWhereInput
  }

  export type ExhibitorUpdateToOneWithWhereWithoutAssetsInput = {
    where?: ExhibitorWhereInput
    data: XOR<ExhibitorUpdateWithoutAssetsInput, ExhibitorUncheckedUpdateWithoutAssetsInput>
  }

  export type ExhibitorUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutExhibitorNestedInput
    products?: ProductUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUpdateManyWithoutExhibitorNestedInput
    events?: EventUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    events?: EventUncheckedUpdateManyWithoutExhibitorNestedInput
  }

  export type AssetCreateWithoutEventLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductCreateNestedManyWithoutAssetInput
    exhibitorLinks?: AssetOnExhibitorCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetUncheckedCreateWithoutEventLinksInput = {
    id?: string
    url: string
    type?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    productLinks?: AssetOnProductUncheckedCreateNestedManyWithoutAssetInput
    exhibitorLinks?: AssetOnExhibitorUncheckedCreateNestedManyWithoutAssetInput
    userAvatarLinks?: UserUncheckedCreateNestedManyWithoutAvatarAssetInput
  }

  export type AssetCreateOrConnectWithoutEventLinksInput = {
    where: AssetWhereUniqueInput
    create: XOR<AssetCreateWithoutEventLinksInput, AssetUncheckedCreateWithoutEventLinksInput>
  }

  export type EventCreateWithoutAssetsInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutEventsCreatedInput
    exhibitor?: ExhibitorCreateNestedOneWithoutEventsInput
    speakers?: EventSpeakerCreateNestedManyWithoutEventInput
    attendees?: AttendeeCreateNestedManyWithoutEventInput
    tags?: TagOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAssetsInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakers?: EventSpeakerUncheckedCreateNestedManyWithoutEventInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutEventInput
    tags?: TagOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAssetsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAssetsInput, EventUncheckedCreateWithoutAssetsInput>
  }

  export type AssetUpsertWithoutEventLinksInput = {
    update: XOR<AssetUpdateWithoutEventLinksInput, AssetUncheckedUpdateWithoutEventLinksInput>
    create: XOR<AssetCreateWithoutEventLinksInput, AssetUncheckedCreateWithoutEventLinksInput>
    where?: AssetWhereInput
  }

  export type AssetUpdateToOneWithWhereWithoutEventLinksInput = {
    where?: AssetWhereInput
    data: XOR<AssetUpdateWithoutEventLinksInput, AssetUncheckedUpdateWithoutEventLinksInput>
  }

  export type AssetUpdateWithoutEventLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUpdateManyWithoutAssetNestedInput
    exhibitorLinks?: AssetOnExhibitorUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUpdateManyWithoutAvatarAssetNestedInput
  }

  export type AssetUncheckedUpdateWithoutEventLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productLinks?: AssetOnProductUncheckedUpdateManyWithoutAssetNestedInput
    exhibitorLinks?: AssetOnExhibitorUncheckedUpdateManyWithoutAssetNestedInput
    userAvatarLinks?: UserUncheckedUpdateManyWithoutAvatarAssetNestedInput
  }

  export type EventUpsertWithoutAssetsInput = {
    update: XOR<EventUpdateWithoutAssetsInput, EventUncheckedUpdateWithoutAssetsInput>
    create: XOR<EventCreateWithoutAssetsInput, EventUncheckedCreateWithoutAssetsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAssetsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAssetsInput, EventUncheckedUpdateWithoutAssetsInput>
  }

  export type EventUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutEventsCreatedNestedInput
    exhibitor?: ExhibitorUpdateOneWithoutEventsNestedInput
    speakers?: EventSpeakerUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakers?: EventSpeakerUncheckedUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type TagOnEventCreateWithoutTagInput = {
    id?: string
    event: EventCreateNestedOneWithoutTagsInput
  }

  export type TagOnEventUncheckedCreateWithoutTagInput = {
    id?: string
    eventId: string
  }

  export type TagOnEventCreateOrConnectWithoutTagInput = {
    where: TagOnEventWhereUniqueInput
    create: XOR<TagOnEventCreateWithoutTagInput, TagOnEventUncheckedCreateWithoutTagInput>
  }

  export type TagOnEventCreateManyTagInputEnvelope = {
    data: TagOnEventCreateManyTagInput | TagOnEventCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagOnExhibitorCreateWithoutTagInput = {
    id?: string
    exhibitor: ExhibitorCreateNestedOneWithoutTagsInput
  }

  export type TagOnExhibitorUncheckedCreateWithoutTagInput = {
    id?: string
    exhibitorId: string
  }

  export type TagOnExhibitorCreateOrConnectWithoutTagInput = {
    where: TagOnExhibitorWhereUniqueInput
    create: XOR<TagOnExhibitorCreateWithoutTagInput, TagOnExhibitorUncheckedCreateWithoutTagInput>
  }

  export type TagOnExhibitorCreateManyTagInputEnvelope = {
    data: TagOnExhibitorCreateManyTagInput | TagOnExhibitorCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagOnProductCreateWithoutTagInput = {
    id?: string
    product: ProductCreateNestedOneWithoutTagsInput
  }

  export type TagOnProductUncheckedCreateWithoutTagInput = {
    id?: string
    productId: string
  }

  export type TagOnProductCreateOrConnectWithoutTagInput = {
    where: TagOnProductWhereUniqueInput
    create: XOR<TagOnProductCreateWithoutTagInput, TagOnProductUncheckedCreateWithoutTagInput>
  }

  export type TagOnProductCreateManyTagInputEnvelope = {
    data: TagOnProductCreateManyTagInput | TagOnProductCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type TagOnEventUpsertWithWhereUniqueWithoutTagInput = {
    where: TagOnEventWhereUniqueInput
    update: XOR<TagOnEventUpdateWithoutTagInput, TagOnEventUncheckedUpdateWithoutTagInput>
    create: XOR<TagOnEventCreateWithoutTagInput, TagOnEventUncheckedCreateWithoutTagInput>
  }

  export type TagOnEventUpdateWithWhereUniqueWithoutTagInput = {
    where: TagOnEventWhereUniqueInput
    data: XOR<TagOnEventUpdateWithoutTagInput, TagOnEventUncheckedUpdateWithoutTagInput>
  }

  export type TagOnEventUpdateManyWithWhereWithoutTagInput = {
    where: TagOnEventScalarWhereInput
    data: XOR<TagOnEventUpdateManyMutationInput, TagOnEventUncheckedUpdateManyWithoutTagInput>
  }

  export type TagOnExhibitorUpsertWithWhereUniqueWithoutTagInput = {
    where: TagOnExhibitorWhereUniqueInput
    update: XOR<TagOnExhibitorUpdateWithoutTagInput, TagOnExhibitorUncheckedUpdateWithoutTagInput>
    create: XOR<TagOnExhibitorCreateWithoutTagInput, TagOnExhibitorUncheckedCreateWithoutTagInput>
  }

  export type TagOnExhibitorUpdateWithWhereUniqueWithoutTagInput = {
    where: TagOnExhibitorWhereUniqueInput
    data: XOR<TagOnExhibitorUpdateWithoutTagInput, TagOnExhibitorUncheckedUpdateWithoutTagInput>
  }

  export type TagOnExhibitorUpdateManyWithWhereWithoutTagInput = {
    where: TagOnExhibitorScalarWhereInput
    data: XOR<TagOnExhibitorUpdateManyMutationInput, TagOnExhibitorUncheckedUpdateManyWithoutTagInput>
  }

  export type TagOnProductUpsertWithWhereUniqueWithoutTagInput = {
    where: TagOnProductWhereUniqueInput
    update: XOR<TagOnProductUpdateWithoutTagInput, TagOnProductUncheckedUpdateWithoutTagInput>
    create: XOR<TagOnProductCreateWithoutTagInput, TagOnProductUncheckedCreateWithoutTagInput>
  }

  export type TagOnProductUpdateWithWhereUniqueWithoutTagInput = {
    where: TagOnProductWhereUniqueInput
    data: XOR<TagOnProductUpdateWithoutTagInput, TagOnProductUncheckedUpdateWithoutTagInput>
  }

  export type TagOnProductUpdateManyWithWhereWithoutTagInput = {
    where: TagOnProductScalarWhereInput
    data: XOR<TagOnProductUpdateManyMutationInput, TagOnProductUncheckedUpdateManyWithoutTagInput>
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutCategoryInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    exhibitor: ExhibitorCreateNestedOneWithoutProductsInput
    assets?: AssetOnProductCreateNestedManyWithoutProductInput
    tags?: TagOnProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    exhibitorId: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assets?: AssetOnProductUncheckedCreateNestedManyWithoutProductInput
    tags?: TagOnProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    title?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    color?: StringNullableFilter<"Category"> | string | null
    icon?: StringNullableFilter<"Category"> | string | null
    parentId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type TagCreateWithoutEventsInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    exhibitors?: TagOnExhibitorCreateNestedManyWithoutTagInput
    products?: TagOnProductCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    exhibitors?: TagOnExhibitorUncheckedCreateNestedManyWithoutTagInput
    products?: TagOnProductUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutEventsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
  }

  export type EventCreateWithoutTagsInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutEventsCreatedInput
    exhibitor?: ExhibitorCreateNestedOneWithoutEventsInput
    speakers?: EventSpeakerCreateNestedManyWithoutEventInput
    attendees?: AttendeeCreateNestedManyWithoutEventInput
    assets?: AssetOnEventCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    speakers?: EventSpeakerUncheckedCreateNestedManyWithoutEventInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutEventInput
    assets?: AssetOnEventUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTagsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
  }

  export type TagUpsertWithoutEventsInput = {
    update: XOR<TagUpdateWithoutEventsInput, TagUncheckedUpdateWithoutEventsInput>
    create: XOR<TagCreateWithoutEventsInput, TagUncheckedCreateWithoutEventsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutEventsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutEventsInput, TagUncheckedUpdateWithoutEventsInput>
  }

  export type TagUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exhibitors?: TagOnExhibitorUpdateManyWithoutTagNestedInput
    products?: TagOnProductUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exhibitors?: TagOnExhibitorUncheckedUpdateManyWithoutTagNestedInput
    products?: TagOnProductUncheckedUpdateManyWithoutTagNestedInput
  }

  export type EventUpsertWithoutTagsInput = {
    update: XOR<EventUpdateWithoutTagsInput, EventUncheckedUpdateWithoutTagsInput>
    create: XOR<EventCreateWithoutTagsInput, EventUncheckedCreateWithoutTagsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutTagsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutTagsInput, EventUncheckedUpdateWithoutTagsInput>
  }

  export type EventUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutEventsCreatedNestedInput
    exhibitor?: ExhibitorUpdateOneWithoutEventsNestedInput
    speakers?: EventSpeakerUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakers?: EventSpeakerUncheckedUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type TagCreateWithoutExhibitorsInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    events?: TagOnEventCreateNestedManyWithoutTagInput
    products?: TagOnProductCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutExhibitorsInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    events?: TagOnEventUncheckedCreateNestedManyWithoutTagInput
    products?: TagOnProductUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutExhibitorsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutExhibitorsInput, TagUncheckedCreateWithoutExhibitorsInput>
  }

  export type ExhibitorCreateWithoutTagsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutExhibitorInput
    products?: ProductCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorCreateNestedManyWithoutExhibitorInput
    events?: EventCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    createdById?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutExhibitorInput
    assets?: AssetOnExhibitorUncheckedCreateNestedManyWithoutExhibitorInput
    events?: EventUncheckedCreateNestedManyWithoutExhibitorInput
  }

  export type ExhibitorCreateOrConnectWithoutTagsInput = {
    where: ExhibitorWhereUniqueInput
    create: XOR<ExhibitorCreateWithoutTagsInput, ExhibitorUncheckedCreateWithoutTagsInput>
  }

  export type TagUpsertWithoutExhibitorsInput = {
    update: XOR<TagUpdateWithoutExhibitorsInput, TagUncheckedUpdateWithoutExhibitorsInput>
    create: XOR<TagCreateWithoutExhibitorsInput, TagUncheckedCreateWithoutExhibitorsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutExhibitorsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutExhibitorsInput, TagUncheckedUpdateWithoutExhibitorsInput>
  }

  export type TagUpdateWithoutExhibitorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: TagOnEventUpdateManyWithoutTagNestedInput
    products?: TagOnProductUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutExhibitorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: TagOnEventUncheckedUpdateManyWithoutTagNestedInput
    products?: TagOnProductUncheckedUpdateManyWithoutTagNestedInput
  }

  export type ExhibitorUpsertWithoutTagsInput = {
    update: XOR<ExhibitorUpdateWithoutTagsInput, ExhibitorUncheckedUpdateWithoutTagsInput>
    create: XOR<ExhibitorCreateWithoutTagsInput, ExhibitorUncheckedCreateWithoutTagsInput>
    where?: ExhibitorWhereInput
  }

  export type ExhibitorUpdateToOneWithWhereWithoutTagsInput = {
    where?: ExhibitorWhereInput
    data: XOR<ExhibitorUpdateWithoutTagsInput, ExhibitorUncheckedUpdateWithoutTagsInput>
  }

  export type ExhibitorUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutExhibitorNestedInput
    products?: ProductUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUpdateManyWithoutExhibitorNestedInput
    events?: EventUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    events?: EventUncheckedUpdateManyWithoutExhibitorNestedInput
  }

  export type TagCreateWithoutProductsInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    events?: TagOnEventCreateNestedManyWithoutTagInput
    exhibitors?: TagOnExhibitorCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    title?: string | null
    color?: string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    events?: TagOnEventUncheckedCreateNestedManyWithoutTagInput
    exhibitors?: TagOnExhibitorUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutProductsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutProductsInput, TagUncheckedCreateWithoutProductsInput>
  }

  export type ProductCreateWithoutTagsInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    exhibitor: ExhibitorCreateNestedOneWithoutProductsInput
    category?: CategoryCreateNestedOneWithoutProductsInput
    assets?: AssetOnProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutTagsInput = {
    id?: string
    exhibitorId: string
    categoryId?: string | null
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    assets?: AssetOnProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutTagsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutTagsInput, ProductUncheckedCreateWithoutTagsInput>
  }

  export type TagUpsertWithoutProductsInput = {
    update: XOR<TagUpdateWithoutProductsInput, TagUncheckedUpdateWithoutProductsInput>
    create: XOR<TagCreateWithoutProductsInput, TagUncheckedCreateWithoutProductsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutProductsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutProductsInput, TagUncheckedUpdateWithoutProductsInput>
  }

  export type TagUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: TagOnEventUpdateManyWithoutTagNestedInput
    exhibitors?: TagOnExhibitorUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: TagOnEventUncheckedUpdateManyWithoutTagNestedInput
    exhibitors?: TagOnExhibitorUncheckedUpdateManyWithoutTagNestedInput
  }

  export type ProductUpsertWithoutTagsInput = {
    update: XOR<ProductUpdateWithoutTagsInput, ProductUncheckedUpdateWithoutTagsInput>
    create: XOR<ProductCreateWithoutTagsInput, ProductUncheckedCreateWithoutTagsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutTagsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutTagsInput, ProductUncheckedUpdateWithoutTagsInput>
  }

  export type ProductUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitor?: ExhibitorUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneWithoutProductsNestedInput
    assets?: AssetOnProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assets?: AssetOnProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
    recents?: RecentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
    recents?: RecentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
  }

  export type UserUpsertWithoutAuditLogInput = {
    update: XOR<UserUpdateWithoutAuditLogInput, UserUncheckedUpdateWithoutAuditLogInput>
    create: XOR<UserCreateWithoutAuditLogInput, UserUncheckedCreateWithoutAuditLogInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogInput, UserUncheckedUpdateWithoutAuditLogInput>
  }

  export type UserUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRecentsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    avatarAsset?: AssetCreateNestedOneWithoutUserAvatarLinksInput
    eventsCreated?: EventCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerCreateNestedManyWithoutUserInput
    attendees?: AttendeeCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutRecentsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    avatarAssetId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    eventsCreated?: EventUncheckedCreateNestedManyWithoutCreatedByInput
    speakersFor?: EventSpeakerUncheckedCreateNestedManyWithoutUserInput
    attendees?: AttendeeUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    Exhibitor?: ExhibitorUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutRecentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecentsInput, UserUncheckedCreateWithoutRecentsInput>
  }

  export type UserUpsertWithoutRecentsInput = {
    update: XOR<UserUpdateWithoutRecentsInput, UserUncheckedUpdateWithoutRecentsInput>
    create: XOR<UserCreateWithoutRecentsInput, UserUncheckedCreateWithoutRecentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecentsInput, UserUncheckedUpdateWithoutRecentsInput>
  }

  export type UserUpdateWithoutRecentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarAsset?: AssetUpdateOneWithoutUserAvatarLinksNestedInput
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRecentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarAssetId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type EventCreateManyCreatedByInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    exhibitorId?: string | null
    timezone?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type EventSpeakerCreateManyUserInput = {
    id?: string
    eventId: string
    role?: string | null
    order?: number | null
  }

  export type AttendeeCreateManyUserInput = {
    id?: string
    eventId: string
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type FavoriteCreateManyUserInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    createdAt?: Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    tokenHash: string
    expiresAt: Date | string
    revoked?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type?: string | null
    icon?: string | null
    color?: string | null
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ExhibitorCreateManyCreatedByInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    website?: string | null
    location?: string | null
    sponsor?: boolean
    favoriteCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type RecentCreateManyUserInput = {
    id?: string
    resourceType: $Enums.ResourceType
    resourceId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EventUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitor?: ExhibitorUpdateOneWithoutEventsNestedInput
    speakers?: EventSpeakerUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakers?: EventSpeakerUncheckedUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUncheckedUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitorId?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventSpeakerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    event?: EventUpdateOneRequiredWithoutSpeakersNestedInput
  }

  export type EventSpeakerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventSpeakerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAttendeesNestedInput
  }

  export type AttendeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendeeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExhibitorUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUpdateManyWithoutExhibitorNestedInput
    events?: EventUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductUncheckedUpdateManyWithoutExhibitorNestedInput
    assets?: AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    tags?: TagOnExhibitorUncheckedUpdateManyWithoutExhibitorNestedInput
    events?: EventUncheckedUpdateManyWithoutExhibitorNestedInput
  }

  export type ExhibitorUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    sponsor?: BoolFieldUpdateOperationsInput | boolean
    favoriteCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: EnumResourceTypeFieldUpdateOperationsInput | $Enums.ResourceType
    resourceId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSpeakerCreateManyEventInput = {
    id?: string
    userId: string
    role?: string | null
    order?: number | null
  }

  export type AttendeeCreateManyEventInput = {
    id?: string
    userId?: string | null
    name: string
    email: string
    ticketType?: string | null
    checkedIn?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TagOnEventCreateManyEventInput = {
    id?: string
    tagId: string
  }

  export type AssetOnEventCreateManyEventInput = {
    id?: string
    assetId: string
    role?: string | null
  }

  export type EventSpeakerUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSpeakersForNestedInput
  }

  export type EventSpeakerUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventSpeakerUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendeeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAttendeesNestedInput
  }

  export type AttendeeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendeeUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    ticketType?: NullableStringFieldUpdateOperationsInput | string | null
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagOnEventUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutEventsNestedInput
  }

  export type TagOnEventUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnEventUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type AssetOnEventUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    asset?: AssetUpdateOneRequiredWithoutEventLinksNestedInput
  }

  export type AssetOnEventUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnEventUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManyExhibitorInput = {
    id?: string
    categoryId?: string | null
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetOnExhibitorCreateManyExhibitorInput = {
    id?: string
    assetId: string
    role?: string | null
  }

  export type TagOnExhibitorCreateManyExhibitorInput = {
    id?: string
    tagId: string
  }

  export type EventCreateManyExhibitorInput = {
    id?: string
    name: string
    title: string
    description?: string | null
    color?: string | null
    start: Date | string
    end: Date | string
    timed?: boolean
    location?: string | null
    timezone?: string | null
    published?: boolean
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ProductUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneWithoutProductsNestedInput
    assets?: AssetOnProductUpdateManyWithoutProductNestedInput
    tags?: TagOnProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assets?: AssetOnProductUncheckedUpdateManyWithoutProductNestedInput
    tags?: TagOnProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetOnExhibitorUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    asset?: AssetUpdateOneRequiredWithoutExhibitorLinksNestedInput
  }

  export type AssetOnExhibitorUncheckedUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnExhibitorUncheckedUpdateManyWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagOnExhibitorUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutExhibitorsNestedInput
  }

  export type TagOnExhibitorUncheckedUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnExhibitorUncheckedUpdateManyWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type EventUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutEventsCreatedNestedInput
    speakers?: EventSpeakerUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    speakers?: EventSpeakerUncheckedUpdateManyWithoutEventNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutEventNestedInput
    tags?: TagOnEventUncheckedUpdateManyWithoutEventNestedInput
    assets?: AssetOnEventUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutExhibitorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    timed?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssetOnProductCreateManyProductInput = {
    id?: string
    assetId: string
    role?: string | null
  }

  export type TagOnProductCreateManyProductInput = {
    id?: string
    tagId: string
  }

  export type AssetOnProductUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    asset?: AssetUpdateOneRequiredWithoutProductLinksNestedInput
  }

  export type AssetOnProductUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnProductUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagOnProductUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: TagUpdateOneRequiredWithoutProductsNestedInput
  }

  export type TagOnProductUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnProductUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type AssetOnProductCreateManyAssetInput = {
    id?: string
    productId: string
    role?: string | null
  }

  export type AssetOnExhibitorCreateManyAssetInput = {
    id?: string
    exhibitorId: string
    role?: string | null
  }

  export type AssetOnEventCreateManyAssetInput = {
    id?: string
    eventId: string
    role?: string | null
  }

  export type UserCreateManyAvatarAssetInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type AssetOnProductUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type AssetOnProductUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnProductUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnExhibitorUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    exhibitor?: ExhibitorUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type AssetOnExhibitorUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnExhibitorUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnEventUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    event?: EventUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type AssetOnEventUncheckedUpdateWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssetOnEventUncheckedUpdateManyWithoutAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutAvatarAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvatarAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventsCreated?: EventUncheckedUpdateManyWithoutCreatedByNestedInput
    speakersFor?: EventSpeakerUncheckedUpdateManyWithoutUserNestedInput
    attendees?: AttendeeUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    Exhibitor?: ExhibitorUncheckedUpdateManyWithoutCreatedByNestedInput
    recents?: RecentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAvatarAssetInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TagOnEventCreateManyTagInput = {
    id?: string
    eventId: string
  }

  export type TagOnExhibitorCreateManyTagInput = {
    id?: string
    exhibitorId: string
  }

  export type TagOnProductCreateManyTagInput = {
    id?: string
    productId: string
  }

  export type TagOnEventUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagOnEventUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnEventUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnExhibitorUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitor?: ExhibitorUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagOnExhibitorUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnExhibitorUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnProductUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagOnProductUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type TagOnProductUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    title?: string | null
    description?: string | null
    color?: string | null
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateManyCategoryInput = {
    id?: string
    exhibitorId: string
    name: string
    title?: string | null
    description?: string | null
    shortDescription?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    imageUrl?: string | null
    inStock?: boolean
    featured?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exhibitor?: ExhibitorUpdateOneRequiredWithoutProductsNestedInput
    assets?: AssetOnProductUpdateManyWithoutProductNestedInput
    tags?: TagOnProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assets?: AssetOnProductUncheckedUpdateManyWithoutProductNestedInput
    tags?: TagOnProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    exhibitorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExhibitorCountOutputTypeDefaultArgs instead
     */
    export type ExhibitorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExhibitorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetCountOutputTypeDefaultArgs instead
     */
    export type AssetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventSpeakerDefaultArgs instead
     */
    export type EventSpeakerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventSpeakerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExhibitorDefaultArgs instead
     */
    export type ExhibitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExhibitorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendeeDefaultArgs instead
     */
    export type AttendeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteDefaultArgs instead
     */
    export type FavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetDefaultArgs instead
     */
    export type AssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetOnProductDefaultArgs instead
     */
    export type AssetOnProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetOnProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetOnExhibitorDefaultArgs instead
     */
    export type AssetOnExhibitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetOnExhibitorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssetOnEventDefaultArgs instead
     */
    export type AssetOnEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssetOnEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagOnEventDefaultArgs instead
     */
    export type TagOnEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagOnEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagOnExhibitorDefaultArgs instead
     */
    export type TagOnExhibitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagOnExhibitorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagOnProductDefaultArgs instead
     */
    export type TagOnProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagOnProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecentDefaultArgs instead
     */
    export type RecentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}