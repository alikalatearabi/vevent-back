
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  avatarAssetId: 'avatarAssetId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  color: 'color',
  start: 'start',
  end: 'end',
  timed: 'timed',
  location: 'location',
  exhibitorId: 'exhibitorId',
  timezone: 'timezone',
  published: 'published',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EventSpeakerScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  role: 'role',
  order: 'order'
};

exports.Prisma.ExhibitorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  website: 'website',
  location: 'location',
  sponsor: 'sponsor',
  favoriteCount: 'favoriteCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdById: 'createdById'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  exhibitorId: 'exhibitorId',
  name: 'name',
  description: 'description',
  price: 'price',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AttendeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  name: 'name',
  email: 'email',
  ticketType: 'ticketType',
  checkedIn: 'checkedIn',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  icon: 'icon',
  color: 'color',
  message: 'message',
  data: 'data',
  read: 'read',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  meta: 'meta',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AssetOnProductScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  productId: 'productId',
  role: 'role'
};

exports.Prisma.AssetOnExhibitorScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  exhibitorId: 'exhibitorId',
  role: 'role'
};

exports.Prisma.AssetOnEventScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  eventId: 'eventId',
  role: 'role'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.TagOnEventScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  eventId: 'eventId'
};

exports.Prisma.TagOnExhibitorScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  exhibitorId: 'exhibitorId'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  revoked: 'revoked',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.RecentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  EVENT: 'EVENT',
  EXHIBITOR: 'EXHIBITOR',
  PRODUCT: 'PRODUCT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  EventSpeaker: 'EventSpeaker',
  Exhibitor: 'Exhibitor',
  Product: 'Product',
  Attendee: 'Attendee',
  Favorite: 'Favorite',
  Notification: 'Notification',
  Asset: 'Asset',
  AssetOnProduct: 'AssetOnProduct',
  AssetOnExhibitor: 'AssetOnExhibitor',
  AssetOnEvent: 'AssetOnEvent',
  Tag: 'Tag',
  TagOnEvent: 'TagOnEvent',
  TagOnExhibitor: 'TagOnExhibitor',
  RefreshToken: 'RefreshToken',
  AuditLog: 'AuditLog',
  Recent: 'Recent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
